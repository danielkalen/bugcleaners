// Generated by CoffeeScript 1.10.0
/*! jQuery v3.0.0-beta1 | (c) jQuery Foundation | jquery.org/license */
!function(a,b){"object"==typeof module&&"object"==typeof module.exports?module.exports=a.document?b(a,!0):function(a){if(!a.document)throw new Error("jQuery requires a window with a document");return b(a)}:b(a)}("undefined"!=typeof window?window:this,function(a,b){var c=[],d=a.document,e=c.slice,f=c.concat,g=c.push,h=c.indexOf,i={},j=i.toString,k=i.hasOwnProperty,l={};function m(a,b){b=b||d;var c=b.createElement("script");c.text=a,b.head.appendChild(c).parentNode.removeChild(c)}var n="3.0.0-beta1",o=function(a,b){return new o.fn.init(a,b)},p=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,q=/^-ms-/,r=/-([a-z])/g,s=function(a,b){return b.toUpperCase()};o.fn=o.prototype={jquery:n,constructor:o,length:0,toArray:function(){return e.call(this)},get:function(a){return null!=a?0>a?this[a+this.length]:this[a]:e.call(this)},pushStack:function(a){var b=o.merge(this.constructor(),a);return b.prevObject=this,b},each:function(a){return o.each(this,a)},map:function(a){return this.pushStack(o.map(this,function(b,c){return a.call(b,c,b)}))},slice:function(){return this.pushStack(e.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},eq:function(a){var b=this.length,c=+a+(0>a?b:0);return this.pushStack(c>=0&&b>c?[this[c]]:[])},end:function(){return this.prevObject||this.constructor()},push:g,sort:c.sort,splice:c.splice},o.extend=o.fn.extend=function(){var a,b,c,d,e,f,g=arguments[0]||{},h=1,i=arguments.length,j=!1;for("boolean"==typeof g&&(j=g,g=arguments[h]||{},h++),"object"==typeof g||o.isFunction(g)||(g={}),h===i&&(g=this,h--);i>h;h++)if(null!=(a=arguments[h]))for(b in a)c=g[b],d=a[b],g!==d&&(j&&d&&(o.isPlainObject(d)||(e=o.isArray(d)))?(e?(e=!1,f=c&&o.isArray(c)?c:[]):f=c&&o.isPlainObject(c)?c:{},g[b]=o.extend(j,f,d)):void 0!==d&&(g[b]=d));return g},o.extend({expando:"jQuery"+(n+Math.random()).replace(/\D/g,""),isReady:!0,error:function(a){throw new Error(a)},noop:function(){},isFunction:function(a){return"function"===o.type(a)},isArray:Array.isArray,isWindow:function(a){return null!=a&&a===a.window},isNumeric:function(a){var b=o.type(a);return("number"===b||"string"===b)&&a-parseFloat(a)+1>=0},isPlainObject:function(a){return"object"!==o.type(a)||a.nodeType||o.isWindow(a)?!1:a.constructor&&!k.call(a.constructor.prototype,"isPrototypeOf")?!1:!0},isEmptyObject:function(a){var b;for(b in a)return!1;return!0},type:function(a){return null==a?a+"":"object"==typeof a||"function"==typeof a?i[j.call(a)]||"object":typeof a},globalEval:function(a){m(a)},camelCase:function(a){return a.replace(q,"ms-").replace(r,s)},nodeName:function(a,b){return a.nodeName&&a.nodeName.toLowerCase()===b.toLowerCase()},each:function(a,b){var c,d=0;if(t(a)){for(c=a.length;c>d;d++)if(b.call(a[d],d,a[d])===!1)break}else for(d in a)if(b.call(a[d],d,a[d])===!1)break;return a},trim:function(a){return null==a?"":(a+"").replace(p,"")},makeArray:function(a,b){var c=b||[];return null!=a&&(t(Object(a))?o.merge(c,"string"==typeof a?[a]:a):g.call(c,a)),c},inArray:function(a,b,c){return null==b?-1:h.call(b,a,c)},merge:function(a,b){for(var c=+b.length,d=0,e=a.length;c>d;d++)a[e++]=b[d];return a.length=e,a},grep:function(a,b,c){for(var d,e=[],f=0,g=a.length,h=!c;g>f;f++)d=!b(a[f],f),d!==h&&e.push(a[f]);return e},map:function(a,b,c){var d,e,g=0,h=[];if(t(a))for(d=a.length;d>g;g++)e=b(a[g],g,c),null!=e&&h.push(e);else for(g in a)e=b(a[g],g,c),null!=e&&h.push(e);return f.apply([],h)},guid:1,proxy:function(a,b){var c,d,f;return"string"==typeof b&&(c=a[b],b=a,a=c),o.isFunction(a)?(d=e.call(arguments,2),f=function(){return a.apply(b||this,d.concat(e.call(arguments)))},f.guid=a.guid=a.guid||o.guid++,f):void 0},now:Date.now,support:l}),"function"==typeof Symbol&&(o.fn[Symbol.iterator]=c[Symbol.iterator]),o.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),function(a,b){i["[object "+b+"]"]=b.toLowerCase()});function t(a){var b=!!a&&"length"in a&&a.length,c=o.type(a);return"function"===c||o.isWindow(a)?!1:"array"===c||0===b||"number"==typeof b&&b>0&&b-1 in a}var u=function(a){var b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u="sizzle"+1*new Date,v=a.document,w=0,x=0,y=ha(),z=ha(),A=ha(),B=function(a,b){return a===b&&(l=!0),0},C={}.hasOwnProperty,D=[],E=D.pop,F=D.push,G=D.push,H=D.slice,I=function(a,b){for(var c=0,d=a.length;d>c;c++)if(a[c]===b)return c;return-1},J="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",K="[\\x20\\t\\r\\n\\f]",L="(?:\\\\.|[\\w-]|[^\x00-\\xa0])+",M="\\["+K+"*("+L+")(?:"+K+"*([*^$|!~]?=)"+K+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+L+"))|)"+K+"*\\]",N=":("+L+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+M+")*)|.*)\\)|)",O=new RegExp(K+"+","g"),P=new RegExp("^"+K+"+|((?:^|[^\\\\])(?:\\\\.)*)"+K+"+$","g"),Q=new RegExp("^"+K+"*,"+K+"*"),R=new RegExp("^"+K+"*([>+~]|"+K+")"+K+"*"),S=new RegExp("="+K+"*([^\\]'\"]*?)"+K+"*\\]","g"),T=new RegExp(N),U=new RegExp("^"+L+"$"),V={ID:new RegExp("^#("+L+")"),CLASS:new RegExp("^\\.("+L+")"),TAG:new RegExp("^("+L+"|[*])"),ATTR:new RegExp("^"+M),PSEUDO:new RegExp("^"+N),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+K+"*(even|odd|(([+-]|)(\\d*)n|)"+K+"*(?:([+-]|)"+K+"*(\\d+)|))"+K+"*\\)|)","i"),bool:new RegExp("^(?:"+J+")$","i"),needsContext:new RegExp("^"+K+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+K+"*((?:-\\d)?\\d*)"+K+"*\\)|)(?=[^-]|$)","i")},W=/^(?:input|select|textarea|button)$/i,X=/^h\d$/i,Y=/^[^{]+\{\s*\[native \w/,Z=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,$=/[+~]/,_=new RegExp("\\\\([\\da-f]{1,6}"+K+"?|("+K+")|.)","ig"),aa=function(a,b,c){var d="0x"+b-65536;return d!==d||c?b:0>d?String.fromCharCode(d+65536):String.fromCharCode(d>>10|55296,1023&d|56320)},ba=/([\0-\x1f\x7f]|^-?\d)|^-$|[^\x80-\uFFFF\w-]/g,ca=function(a,b){return b?"\x00"===a?"\ufffd":a.slice(0,-1)+"\\"+a.charCodeAt(a.length-1).toString(16)+" ":"\\"+a},da=function(){m()},ea=ta(function(a){return a.disabled===!0},{dir:"parentNode",next:"legend"});try{G.apply(D=H.call(v.childNodes),v.childNodes),D[v.childNodes.length].nodeType}catch(fa){G={apply:D.length?function(a,b){F.apply(a,H.call(b))}:function(a,b){var c=a.length,d=0;while(a[c++]=b[d++]);a.length=c-1}}}function ga(a,b,d,e){var f,h,j,k,l,o,r,s=b&&b.ownerDocument,w=b?b.nodeType:9;if(d=d||[],"string"!=typeof a||!a||1!==w&&9!==w&&11!==w)return d;if(!e&&((b?b.ownerDocument||b:v)!==n&&m(b),b=b||n,p)){if(11!==w&&(l=Z.exec(a)))if(f=l[1]){if(9===w){if(!(j=b.getElementById(f)))return d;if(j.id===f)return d.push(j),d}else if(s&&(j=s.getElementById(f))&&t(b,j)&&j.id===f)return d.push(j),d}else{if(l[2])return G.apply(d,b.getElementsByTagName(a)),d;if((f=l[3])&&c.getElementsByClassName&&b.getElementsByClassName)return G.apply(d,b.getElementsByClassName(f)),d}if(c.qsa&&!A[a+" "]&&(!q||!q.test(a))){if(1!==w)s=b,r=a;else if("object"!==b.nodeName.toLowerCase()){(k=b.getAttribute("id"))?k=k.replace(ba,ca):b.setAttribute("id",k=u),o=g(a),h=o.length;while(h--)o[h]="#"+k+" "+sa(o[h]);r=o.join(","),s=$.test(a)&&qa(b.parentNode)||b}if(r)try{return G.apply(d,s.querySelectorAll(r)),d}catch(x){}finally{k===u&&b.removeAttribute("id")}}}return i(a.replace(P,"$1"),b,d,e)}function ha(){var a=[];function b(c,e){return a.push(c+" ")>d.cacheLength&&delete b[a.shift()],b[c+" "]=e}return b}function ia(a){return a[u]=!0,a}function ja(a){var b=n.createElement("fieldset");try{return!!a(b)}catch(c){return!1}finally{b.parentNode&&b.parentNode.removeChild(b),b=null}}function ka(a,b){var c=a.split("|"),e=c.length;while(e--)d.attrHandle[c[e]]=b}function la(a,b){var c=b&&a,d=c&&1===a.nodeType&&1===b.nodeType&&a.sourceIndex-b.sourceIndex;if(d)return d;if(c)while(c=c.nextSibling)if(c===b)return-1;return a?1:-1}function ma(a){return function(b){var c=b.nodeName.toLowerCase();return"input"===c&&b.type===a}}function na(a){return function(b){var c=b.nodeName.toLowerCase();return("input"===c||"button"===c)&&b.type===a}}function oa(a){return function(b){return"label"in b&&b.disabled===a||"form"in b&&b.disabled===a||"form"in b&&b.disabled===!1&&(b.isDisabled===a||b.isDisabled!==!a&&("label"in b||!ea(b))!==a)}}function pa(a){return ia(function(b){return b=+b,ia(function(c,d){var e,f=a([],c.length,b),g=f.length;while(g--)c[e=f[g]]&&(c[e]=!(d[e]=c[e]))})})}function qa(a){return a&&"undefined"!=typeof a.getElementsByTagName&&a}c=ga.support={},f=ga.isXML=function(a){var b=a&&(a.ownerDocument||a).documentElement;return b?"HTML"!==b.nodeName:!1},m=ga.setDocument=function(a){var b,e,g=a?a.ownerDocument||a:v;return g!==n&&9===g.nodeType&&g.documentElement?(n=g,o=n.documentElement,p=!f(n),v!==n&&(e=n.defaultView)&&e.top!==e&&(e.addEventListener?e.addEventListener("unload",da,!1):e.attachEvent&&e.attachEvent("onunload",da)),c.attributes=ja(function(a){return a.className="i",!a.getAttribute("className")}),c.getElementsByTagName=ja(function(a){return a.appendChild(n.createComment("")),!a.getElementsByTagName("*").length}),c.getElementsByClassName=Y.test(n.getElementsByClassName),c.getById=ja(function(a){return o.appendChild(a).id=u,!n.getElementsByName||!n.getElementsByName(u).length}),c.getById?(d.find.ID=function(a,b){if("undefined"!=typeof b.getElementById&&p){var c=b.getElementById(a);return c?[c]:[]}},d.filter.ID=function(a){var b=a.replace(_,aa);return function(a){return a.getAttribute("id")===b}}):(delete d.find.ID,d.filter.ID=function(a){var b=a.replace(_,aa);return function(a){var c="undefined"!=typeof a.getAttributeNode&&a.getAttributeNode("id");return c&&c.value===b}}),d.find.TAG=c.getElementsByTagName?function(a,b){return"undefined"!=typeof b.getElementsByTagName?b.getElementsByTagName(a):c.qsa?b.querySelectorAll(a):void 0}:function(a,b){var c,d=[],e=0,f=b.getElementsByTagName(a);if("*"===a){while(c=f[e++])1===c.nodeType&&d.push(c);return d}return f},d.find.CLASS=c.getElementsByClassName&&function(a,b){return"undefined"!=typeof b.getElementsByClassName&&p?b.getElementsByClassName(a):void 0},r=[],q=[],(c.qsa=Y.test(n.querySelectorAll))&&(ja(function(a){o.appendChild(a).innerHTML="<a id='"+u+"'></a><select id='"+u+"-\r\\' msallowcapture=''><option selected=''></option></select>",a.querySelectorAll("[msallowcapture^='']").length&&q.push("[*^$]="+K+"*(?:''|\"\")"),a.querySelectorAll("[selected]").length||q.push("\\["+K+"*(?:value|"+J+")"),a.querySelectorAll("[id~="+u+"-]").length||q.push("~="),a.querySelectorAll(":checked").length||q.push(":checked"),a.querySelectorAll("a#"+u+"+*").length||q.push(".#.+[+~]")}),ja(function(a){a.innerHTML="<a href='' disabled='disabled'></a><select disabled='disabled'><option/></select>";var b=n.createElement("input");b.setAttribute("type","hidden"),a.appendChild(b).setAttribute("name","D"),a.querySelectorAll("[name=d]").length&&q.push("name"+K+"*[*^$|!~]?="),2!==a.querySelectorAll(":enabled").length&&q.push(":enabled",":disabled"),o.appendChild(a).disabled=!0,2!==a.querySelectorAll(":disabled").length&&q.push(":enabled",":disabled"),a.querySelectorAll("*,:x"),q.push(",.*:")})),(c.matchesSelector=Y.test(s=o.matches||o.webkitMatchesSelector||o.mozMatchesSelector||o.oMatchesSelector||o.msMatchesSelector))&&ja(function(a){c.disconnectedMatch=s.call(a,"*"),s.call(a,"[s!='']:x"),r.push("!=",N)}),q=q.length&&new RegExp(q.join("|")),r=r.length&&new RegExp(r.join("|")),b=Y.test(o.compareDocumentPosition),t=b||Y.test(o.contains)?function(a,b){var c=9===a.nodeType?a.documentElement:a,d=b&&b.parentNode;return a===d||!(!d||1!==d.nodeType||!(c.contains?c.contains(d):a.compareDocumentPosition&&16&a.compareDocumentPosition(d)))}:function(a,b){if(b)while(b=b.parentNode)if(b===a)return!0;return!1},B=b?function(a,b){if(a===b)return l=!0,0;var d=!a.compareDocumentPosition-!b.compareDocumentPosition;return d?d:(d=(a.ownerDocument||a)===(b.ownerDocument||b)?a.compareDocumentPosition(b):1,1&d||!c.sortDetached&&b.compareDocumentPosition(a)===d?a===n||a.ownerDocument===v&&t(v,a)?-1:b===n||b.ownerDocument===v&&t(v,b)?1:k?I(k,a)-I(k,b):0:4&d?-1:1)}:function(a,b){if(a===b)return l=!0,0;var c,d=0,e=a.parentNode,f=b.parentNode,g=[a],h=[b];if(!e||!f)return a===n?-1:b===n?1:e?-1:f?1:k?I(k,a)-I(k,b):0;if(e===f)return la(a,b);c=a;while(c=c.parentNode)g.unshift(c);c=b;while(c=c.parentNode)h.unshift(c);while(g[d]===h[d])d++;return d?la(g[d],h[d]):g[d]===v?-1:h[d]===v?1:0},n):n},ga.matches=function(a,b){return ga(a,null,null,b)},ga.matchesSelector=function(a,b){if((a.ownerDocument||a)!==n&&m(a),b=b.replace(S,"='$1']"),c.matchesSelector&&p&&!A[b+" "]&&(!r||!r.test(b))&&(!q||!q.test(b)))try{var d=s.call(a,b);if(d||c.disconnectedMatch||a.document&&11!==a.document.nodeType)return d}catch(e){}return ga(b,n,null,[a]).length>0},ga.contains=function(a,b){return(a.ownerDocument||a)!==n&&m(a),t(a,b)},ga.attr=function(a,b){(a.ownerDocument||a)!==n&&m(a);var e=d.attrHandle[b.toLowerCase()],f=e&&C.call(d.attrHandle,b.toLowerCase())?e(a,b,!p):void 0;return void 0!==f?f:c.attributes||!p?a.getAttribute(b):(f=a.getAttributeNode(b))&&f.specified?f.value:null},ga.escape=function(a){return(a+"").replace(ba,ca)},ga.error=function(a){throw new Error("Syntax error, unrecognized expression: "+a)},ga.uniqueSort=function(a){var b,d=[],e=0,f=0;if(l=!c.detectDuplicates,k=!c.sortStable&&a.slice(0),a.sort(B),l){while(b=a[f++])b===a[f]&&(e=d.push(f));while(e--)a.splice(d[e],1)}return k=null,a},e=ga.getText=function(a){var b,c="",d=0,f=a.nodeType;if(f){if(1===f||9===f||11===f){if("string"==typeof a.textContent)return a.textContent;for(a=a.firstChild;a;a=a.nextSibling)c+=e(a)}else if(3===f||4===f)return a.nodeValue}else while(b=a[d++])c+=e(b);return c},d=ga.selectors={cacheLength:50,createPseudo:ia,match:V,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(a){return a[1]=a[1].replace(_,aa),a[3]=(a[3]||a[4]||a[5]||"").replace(_,aa),"~="===a[2]&&(a[3]=" "+a[3]+" "),a.slice(0,4)},CHILD:function(a){return a[1]=a[1].toLowerCase(),"nth"===a[1].slice(0,3)?(a[3]||ga.error(a[0]),a[4]=+(a[4]?a[5]+(a[6]||1):2*("even"===a[3]||"odd"===a[3])),a[5]=+(a[7]+a[8]||"odd"===a[3])):a[3]&&ga.error(a[0]),a},PSEUDO:function(a){var b,c=!a[6]&&a[2];return V.CHILD.test(a[0])?null:(a[3]?a[2]=a[4]||a[5]||"":c&&T.test(c)&&(b=g(c,!0))&&(b=c.indexOf(")",c.length-b)-c.length)&&(a[0]=a[0].slice(0,b),a[2]=c.slice(0,b)),a.slice(0,3))}},filter:{TAG:function(a){var b=a.replace(_,aa).toLowerCase();return"*"===a?function(){return!0}:function(a){return a.nodeName&&a.nodeName.toLowerCase()===b}},CLASS:function(a){var b=y[a+" "];return b||(b=new RegExp("(^|"+K+")"+a+"("+K+"|$)"))&&y(a,function(a){return b.test("string"==typeof a.className&&a.className||"undefined"!=typeof a.getAttribute&&a.getAttribute("class")||"")})},ATTR:function(a,b,c){return function(d){var e=ga.attr(d,a);return null==e?"!="===b:b?(e+="","="===b?e===c:"!="===b?e!==c:"^="===b?c&&0===e.indexOf(c):"*="===b?c&&e.indexOf(c)>-1:"$="===b?c&&e.slice(-c.length)===c:"~="===b?(" "+e.replace(O," ")+" ").indexOf(c)>-1:"|="===b?e===c||e.slice(0,c.length+1)===c+"-":!1):!0}},CHILD:function(a,b,c,d,e){var f="nth"!==a.slice(0,3),g="last"!==a.slice(-4),h="of-type"===b;return 1===d&&0===e?function(a){return!!a.parentNode}:function(b,c,i){var j,k,l,m,n,o,p=f!==g?"nextSibling":"previousSibling",q=b.parentNode,r=h&&b.nodeName.toLowerCase(),s=!i&&!h,t=!1;if(q){if(f){while(p){m=b;while(m=m[p])if(h?m.nodeName.toLowerCase()===r:1===m.nodeType)return!1;o=p="only"===a&&!o&&"nextSibling"}return!0}if(o=[g?q.firstChild:q.lastChild],g&&s){m=q,l=m[u]||(m[u]={}),k=l[m.uniqueID]||(l[m.uniqueID]={}),j=k[a]||[],n=j[0]===w&&j[1],t=n&&j[2],m=n&&q.childNodes[n];while(m=++n&&m&&m[p]||(t=n=0)||o.pop())if(1===m.nodeType&&++t&&m===b){k[a]=[w,n,t];break}}else if(s&&(m=b,l=m[u]||(m[u]={}),k=l[m.uniqueID]||(l[m.uniqueID]={}),j=k[a]||[],n=j[0]===w&&j[1],t=n),t===!1)while(m=++n&&m&&m[p]||(t=n=0)||o.pop())if((h?m.nodeName.toLowerCase()===r:1===m.nodeType)&&++t&&(s&&(l=m[u]||(m[u]={}),k=l[m.uniqueID]||(l[m.uniqueID]={}),k[a]=[w,t]),m===b))break;return t-=e,t===d||t%d===0&&t/d>=0}}},PSEUDO:function(a,b){var c,e=d.pseudos[a]||d.setFilters[a.toLowerCase()]||ga.error("unsupported pseudo: "+a);return e[u]?e(b):e.length>1?(c=[a,a,"",b],d.setFilters.hasOwnProperty(a.toLowerCase())?ia(function(a,c){var d,f=e(a,b),g=f.length;while(g--)d=I(a,f[g]),a[d]=!(c[d]=f[g])}):function(a){return e(a,0,c)}):e}},pseudos:{not:ia(function(a){var b=[],c=[],d=h(a.replace(P,"$1"));return d[u]?ia(function(a,b,c,e){var f,g=d(a,null,e,[]),h=a.length;while(h--)(f=g[h])&&(a[h]=!(b[h]=f))}):function(a,e,f){return b[0]=a,d(b,null,f,c),b[0]=null,!c.pop()}}),has:ia(function(a){return function(b){return ga(a,b).length>0}}),contains:ia(function(a){return a=a.replace(_,aa),function(b){return(b.textContent||b.innerText||e(b)).indexOf(a)>-1}}),lang:ia(function(a){return U.test(a||"")||ga.error("unsupported lang: "+a),a=a.replace(_,aa).toLowerCase(),function(b){var c;do if(c=p?b.lang:b.getAttribute("xml:lang")||b.getAttribute("lang"))return c=c.toLowerCase(),c===a||0===c.indexOf(a+"-");while((b=b.parentNode)&&1===b.nodeType);return!1}}),target:function(b){var c=a.location&&a.location.hash;return c&&c.slice(1)===b.id},root:function(a){return a===o},focus:function(a){return a===n.activeElement&&(!n.hasFocus||n.hasFocus())&&!!(a.type||a.href||~a.tabIndex)},enabled:oa(!1),disabled:oa(!0),checked:function(a){var b=a.nodeName.toLowerCase();return"input"===b&&!!a.checked||"option"===b&&!!a.selected},selected:function(a){return a.parentNode&&a.parentNode.selectedIndex,a.selected===!0},empty:function(a){for(a=a.firstChild;a;a=a.nextSibling)if(a.nodeType<6)return!1;return!0},parent:function(a){return!d.pseudos.empty(a)},header:function(a){return X.test(a.nodeName)},input:function(a){return W.test(a.nodeName)},button:function(a){var b=a.nodeName.toLowerCase();return"input"===b&&"button"===a.type||"button"===b},text:function(a){var b;return"input"===a.nodeName.toLowerCase()&&"text"===a.type&&(null==(b=a.getAttribute("type"))||"text"===b.toLowerCase())},first:pa(function(){return[0]}),last:pa(function(a,b){return[b-1]}),eq:pa(function(a,b,c){return[0>c?c+b:c]}),even:pa(function(a,b){for(var c=0;b>c;c+=2)a.push(c);return a}),odd:pa(function(a,b){for(var c=1;b>c;c+=2)a.push(c);return a}),lt:pa(function(a,b,c){for(var d=0>c?c+b:c;--d>=0;)a.push(d);return a}),gt:pa(function(a,b,c){for(var d=0>c?c+b:c;++d<b;)a.push(d);return a})}},d.pseudos.nth=d.pseudos.eq;for(b in{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})d.pseudos[b]=ma(b);for(b in{submit:!0,reset:!0})d.pseudos[b]=na(b);function ra(){}ra.prototype=d.filters=d.pseudos,d.setFilters=new ra,g=ga.tokenize=function(a,b){var c,e,f,g,h,i,j,k=z[a+" "];if(k)return b?0:k.slice(0);h=a,i=[],j=d.preFilter;while(h){(!c||(e=Q.exec(h)))&&(e&&(h=h.slice(e[0].length)||h),i.push(f=[])),c=!1,(e=R.exec(h))&&(c=e.shift(),f.push({value:c,type:e[0].replace(P," ")}),h=h.slice(c.length));for(g in d.filter)!(e=V[g].exec(h))||j[g]&&!(e=j[g](e))||(c=e.shift(),f.push({value:c,type:g,matches:e}),h=h.slice(c.length));if(!c)break}return b?h.length:h?ga.error(a):z(a,i).slice(0)};function sa(a){for(var b=0,c=a.length,d="";c>b;b++)d+=a[b].value;return d}function ta(a,b,c){var d=b.dir,e=b.next,f=e||d,g=c&&"parentNode"===f,h=x++;return b.first?function(b,c,e){while(b=b[d])if(1===b.nodeType||g)return a(b,c,e)}:function(b,c,i){var j,k,l,m=[w,h];if(i){while(b=b[d])if((1===b.nodeType||g)&&a(b,c,i))return!0}else while(b=b[d])if(1===b.nodeType||g)if(l=b[u]||(b[u]={}),k=l[b.uniqueID]||(l[b.uniqueID]={}),e&&e===b.nodeName.toLowerCase())b=b[d]||b;else{if((j=k[f])&&j[0]===w&&j[1]===h)return m[2]=j[2];if(k[f]=m,m[2]=a(b,c,i))return!0}}}function ua(a){return a.length>1?function(b,c,d){var e=a.length;while(e--)if(!a[e](b,c,d))return!1;return!0}:a[0]}function va(a,b,c){for(var d=0,e=b.length;e>d;d++)ga(a,b[d],c);return c}function wa(a,b,c,d,e){for(var f,g=[],h=0,i=a.length,j=null!=b;i>h;h++)(f=a[h])&&(!c||c(f,d,e))&&(g.push(f),j&&b.push(h));return g}function xa(a,b,c,d,e,f){return d&&!d[u]&&(d=xa(d)),e&&!e[u]&&(e=xa(e,f)),ia(function(f,g,h,i){var j,k,l,m=[],n=[],o=g.length,p=f||va(b||"*",h.nodeType?[h]:h,[]),q=!a||!f&&b?p:wa(p,m,a,h,i),r=c?e||(f?a:o||d)?[]:g:q;if(c&&c(q,r,h,i),d){j=wa(r,n),d(j,[],h,i),k=j.length;while(k--)(l=j[k])&&(r[n[k]]=!(q[n[k]]=l))}if(f){if(e||a){if(e){j=[],k=r.length;while(k--)(l=r[k])&&j.push(q[k]=l);e(null,r=[],j,i)}k=r.length;while(k--)(l=r[k])&&(j=e?I(f,l):m[k])>-1&&(f[j]=!(g[j]=l))}}else r=wa(r===g?r.splice(o,r.length):r),e?e(null,g,r,i):G.apply(g,r)})}function ya(a){for(var b,c,e,f=a.length,g=d.relative[a[0].type],h=g||d.relative[" "],i=g?1:0,k=ta(function(a){return a===b},h,!0),l=ta(function(a){return I(b,a)>-1},h,!0),m=[function(a,c,d){var e=!g&&(d||c!==j)||((b=c).nodeType?k(a,c,d):l(a,c,d));return b=null,e}];f>i;i++)if(c=d.relative[a[i].type])m=[ta(ua(m),c)];else{if(c=d.filter[a[i].type].apply(null,a[i].matches),c[u]){for(e=++i;f>e;e++)if(d.relative[a[e].type])break;return xa(i>1&&ua(m),i>1&&sa(a.slice(0,i-1).concat({value:" "===a[i-2].type?"*":""})).replace(P,"$1"),c,e>i&&ya(a.slice(i,e)),f>e&&ya(a=a.slice(e)),f>e&&sa(a))}m.push(c)}return ua(m)}function za(a,b){var c=b.length>0,e=a.length>0,f=function(f,g,h,i,k){var l,o,q,r=0,s="0",t=f&&[],u=[],v=j,x=f||e&&d.find.TAG("*",k),y=w+=null==v?1:Math.random()||.1,z=x.length;for(k&&(j=g===n||g||k);s!==z&&null!=(l=x[s]);s++){if(e&&l){o=0,g||l.ownerDocument===n||(m(l),h=!p);while(q=a[o++])if(q(l,g||n,h)){i.push(l);break}k&&(w=y)}c&&((l=!q&&l)&&r--,f&&t.push(l))}if(r+=s,c&&s!==r){o=0;while(q=b[o++])q(t,u,g,h);if(f){if(r>0)while(s--)t[s]||u[s]||(u[s]=E.call(i));u=wa(u)}G.apply(i,u),k&&!f&&u.length>0&&r+b.length>1&&ga.uniqueSort(i)}return k&&(w=y,j=v),t};return c?ia(f):f}return h=ga.compile=function(a,b){var c,d=[],e=[],f=A[a+" "];if(!f){b||(b=g(a)),c=b.length;while(c--)f=ya(b[c]),f[u]?d.push(f):e.push(f);f=A(a,za(e,d)),f.selector=a}return f},i=ga.select=function(a,b,e,f){var i,j,k,l,m,n="function"==typeof a&&a,o=!f&&g(a=n.selector||a);if(e=e||[],1===o.length){if(j=o[0]=o[0].slice(0),j.length>2&&"ID"===(k=j[0]).type&&c.getById&&9===b.nodeType&&p&&d.relative[j[1].type]){if(b=(d.find.ID(k.matches[0].replace(_,aa),b)||[])[0],!b)return e;n&&(b=b.parentNode),a=a.slice(j.shift().value.length)}i=V.needsContext.test(a)?0:j.length;while(i--){if(k=j[i],d.relative[l=k.type])break;if((m=d.find[l])&&(f=m(k.matches[0].replace(_,aa),$.test(j[0].type)&&qa(b.parentNode)||b))){if(j.splice(i,1),a=f.length&&sa(j),!a)return G.apply(e,f),e;break}}}return(n||h(a,o))(f,b,!p,e,!b||$.test(a)&&qa(b.parentNode)||b),e},c.sortStable=u.split("").sort(B).join("")===u,c.detectDuplicates=!!l,m(),c.sortDetached=ja(function(a){return 1&a.compareDocumentPosition(n.createElement("fieldset"))}),ja(function(a){return a.innerHTML="<a href='#'></a>","#"===a.firstChild.getAttribute("href")})||ka("type|href|height|width",function(a,b,c){return c?void 0:a.getAttribute(b,"type"===b.toLowerCase()?1:2)}),c.attributes&&ja(function(a){return a.innerHTML="<input/>",a.firstChild.setAttribute("value",""),""===a.firstChild.getAttribute("value")})||ka("value",function(a,b,c){return c||"input"!==a.nodeName.toLowerCase()?void 0:a.defaultValue}),ja(function(a){return null==a.getAttribute("disabled")})||ka(J,function(a,b,c){var d;return c?void 0:a[b]===!0?b.toLowerCase():(d=a.getAttributeNode(b))&&d.specified?d.value:null}),ga}(a);o.find=u,o.expr=u.selectors,o.expr[":"]=o.expr.pseudos,o.uniqueSort=o.unique=u.uniqueSort,o.text=u.getText,o.isXMLDoc=u.isXML,o.contains=u.contains;var v=function(a,b,c){var d=[],e=void 0!==c;while((a=a[b])&&9!==a.nodeType)if(1===a.nodeType){if(e&&o(a).is(c))break;d.push(a)}return d},w=function(a,b){for(var c=[];a;a=a.nextSibling)1===a.nodeType&&a!==b&&c.push(a);return c},x=o.expr.match.needsContext,y=/^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i,z=/^.[^:#\[\.,]*$/;function A(a,b,c){if(o.isFunction(b))return o.grep(a,function(a,d){return!!b.call(a,d,a)!==c});if(b.nodeType)return o.grep(a,function(a){return a===b!==c});if("string"==typeof b){if(z.test(b))return o.filter(b,a,c);b=o.filter(b,a)}return o.grep(a,function(a){return h.call(b,a)>-1!==c&&1===a.nodeType})}o.filter=function(a,b,c){var d=b[0];return c&&(a=":not("+a+")"),1===b.length&&1===d.nodeType?o.find.matchesSelector(d,a)?[d]:[]:o.find.matches(a,o.grep(b,function(a){return 1===a.nodeType}))},o.fn.extend({find:function(a){var b,c=this.length,d=[],e=this;if("string"!=typeof a)return this.pushStack(o(a).filter(function(){for(b=0;c>b;b++)if(o.contains(e[b],this))return!0}));for(b=0;c>b;b++)o.find(a,e[b],d);return this.pushStack(c>1?o.uniqueSort(d):d)},filter:function(a){return this.pushStack(A(this,a||[],!1))},not:function(a){return this.pushStack(A(this,a||[],!0))},is:function(a){return!!A(this,"string"==typeof a&&x.test(a)?o(a):a||[],!1).length}});var B,C=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/,D=o.fn.init=function(a,b,c){var e,f;if(!a)return this;if(c=c||B,"string"==typeof a){if(e="<"===a[0]&&">"===a[a.length-1]&&a.length>=3?[null,a,null]:C.exec(a),!e||!e[1]&&b)return!b||b.jquery?(b||c).find(a):this.constructor(b).find(a);if(e[1]){if(b=b instanceof o?b[0]:b,o.merge(this,o.parseHTML(e[1],b&&b.nodeType?b.ownerDocument||b:d,!0)),y.test(e[1])&&o.isPlainObject(b))for(e in b)o.isFunction(this[e])?this[e](b[e]):this.attr(e,b[e]);return this}return f=d.getElementById(e[2]),f&&(this[0]=f,this.length=1),this}return a.nodeType?(this[0]=a,this.length=1,this):o.isFunction(a)?void 0!==c.ready?c.ready(a):a(o):o.makeArray(a,this)};D.prototype=o.fn,B=o(d);var E=/^(?:parents|prev(?:Until|All))/,F={children:!0,contents:!0,next:!0,prev:!0};o.fn.extend({has:function(a){var b=o(a,this),c=b.length;return this.filter(function(){for(var a=0;c>a;a++)if(o.contains(this,b[a]))return!0})},closest:function(a,b){var c,d=0,e=this.length,f=[],g="string"!=typeof a&&o(a);if(!x.test(a))for(;e>d;d++)for(c=this[d];c&&c!==b;c=c.parentNode)if(c.nodeType<11&&(g?g.index(c)>-1:1===c.nodeType&&o.find.matchesSelector(c,a))){f.push(c);break}return this.pushStack(f.length>1?o.uniqueSort(f):f)},index:function(a){return a?"string"==typeof a?h.call(o(a),this[0]):h.call(this,a.jquery?a[0]:a):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(a,b){return this.pushStack(o.uniqueSort(o.merge(this.get(),o(a,b))))},addBack:function(a){return this.add(null==a?this.prevObject:this.prevObject.filter(a))}});function G(a,b){while((a=a[b])&&1!==a.nodeType);return a}o.each({parent:function(a){var b=a.parentNode;return b&&11!==b.nodeType?b:null},parents:function(a){return v(a,"parentNode")},parentsUntil:function(a,b,c){return v(a,"parentNode",c)},next:function(a){return G(a,"nextSibling")},prev:function(a){return G(a,"previousSibling")},nextAll:function(a){return v(a,"nextSibling")},prevAll:function(a){return v(a,"previousSibling")},nextUntil:function(a,b,c){return v(a,"nextSibling",c)},prevUntil:function(a,b,c){return v(a,"previousSibling",c)},siblings:function(a){return w((a.parentNode||{}).firstChild,a)},children:function(a){return w(a.firstChild)},contents:function(a){return a.contentDocument||o.merge([],a.childNodes)}},function(a,b){o.fn[a]=function(c,d){var e=o.map(this,b,c);return"Until"!==a.slice(-5)&&(d=c),d&&"string"==typeof d&&(e=o.filter(d,e)),this.length>1&&(F[a]||o.uniqueSort(e),E.test(a)&&e.reverse()),this.pushStack(e)}});var H=/\S+/g;function I(a){var b={};return o.each(a.match(H)||[],function(a,c){b[c]=!0}),b}o.Callbacks=function(a){a="string"==typeof a?I(a):o.extend({},a);var b,c,d,e,f=[],g=[],h=-1,i=function(){for(e=a.once,d=b=!0;g.length;h=-1){c=g.shift();while(++h<f.length)f[h].apply(c[0],c[1])===!1&&a.stopOnFalse&&(h=f.length,c=!1)}a.memory||(c=!1),b=!1,e&&(f=c?[]:"")},j={add:function(){return f&&(c&&!b&&(h=f.length-1,g.push(c)),function d(b){o.each(b,function(b,c){o.isFunction(c)?a.unique&&j.has(c)||f.push(c):c&&c.length&&"string"!==o.type(c)&&d(c)})}(arguments),c&&!b&&i()),this},remove:function(){return o.each(arguments,function(a,b){var c;while((c=o.inArray(b,f,c))>-1)f.splice(c,1),h>=c&&h--}),this},has:function(a){return a?o.inArray(a,f)>-1:f.length>0},empty:function(){return f&&(f=[]),this},disable:function(){return e=g=[],f=c="",this},disabled:function(){return!f},lock:function(){return e=g=[],c||b||(f=c=""),this},locked:function(){return!!e},fireWith:function(a,c){return e||(c=c||[],c=[a,c.slice?c.slice():c],g.push(c),b||i()),this},fire:function(){return j.fireWith(this,arguments),this},fired:function(){return!!d}};return j};function J(a){return a}function K(a){throw a}o.extend({Deferred:function(b){var c=[["notify","progress",o.Callbacks("memory"),o.Callbacks("memory"),2],["resolve","done",o.Callbacks("once memory"),o.Callbacks("once memory"),0,"resolved"],["reject","fail",o.Callbacks("once memory"),o.Callbacks("once memory"),1,"rejected"]],d="pending",e={state:function(){return d},always:function(){return f.done(arguments).fail(arguments),this},"catch":function(a){return e.then(null,a)},pipe:function(){var a=arguments;return o.Deferred(function(b){o.each(c,function(c,d){var g=o.isFunction(a[d[4]])&&a[d[4]];f[d[1]](function(){var a=g&&g.apply(this,arguments);a&&o.isFunction(a.promise)?a.promise().progress(b.notify).done(b.resolve).fail(b.reject):b[d[0]+"With"](this===e?b.promise():this,g?[a]:arguments)})}),a=null}).promise()},then:function(b,d,f){var g=0;function h(b,c,d,f){return function(){var i=this===e?void 0:this,j=arguments,k=function(){var a,e;if(!(g>b)){if(a=d.apply(i,j),a===c.promise())throw new TypeError("Thenable self-resolution");e=a&&("object"==typeof a||"function"==typeof a)&&a.then,o.isFunction(e)?f?e.call(a,h(g,c,J,f),h(g,c,K,f)):(g++,e.call(a,h(g,c,J,f),h(g,c,K,f),h(g,c,J,c.notify))):(d!==J&&(i=void 0,j=[a]),(f||c.resolveWith)(i||c.promise(),j))}},l=f?k:function(){try{k()}catch(a){o.Deferred.exceptionHook&&o.Deferred.exceptionHook(a,l.stackTrace),b+1>=g&&(d!==K&&(i=void 0,j=[a]),c.rejectWith(i||c.promise(),j))}};b?l():(o.Deferred.getStackHook&&(l.stackTrace=o.Deferred.getStackHook()),a.setTimeout(l))}}return o.Deferred(function(a){c[0][3].add(h(0,a,o.isFunction(f)?f:J,a.notifyWith)),c[1][3].add(h(0,a,o.isFunction(b)?b:J)),c[2][3].add(h(0,a,o.isFunction(d)?d:K))}).promise()},promise:function(a){return null!=a?o.extend(a,e):e}},f={};return o.each(c,function(a,b){var g=b[2],h=b[5];e[b[1]]=g.add,h&&g.add(function(){d=h},c[3-a][2].disable,c[0][2].lock),g.add(b[3].fire),f[b[0]]=function(){return f[b[0]+"With"](this===f?e:this,arguments),this},f[b[0]+"With"]=g.fireWith}),e.promise(f),b&&b.call(f,f),f},when:function(){var a,b,c=0,d=e.call(arguments),f=d.length,g=f,h=o.Deferred(),i=function(a){return function(c){b[a]=this,d[a]=arguments.length>1?e.call(arguments):c,--g||h.resolveWith(1===b.length?b[0]:b,d)}};if(f>0)for(b=new Array(f);f>c;c++)d[c]&&o.isFunction(a=d[c].promise)?a.call(d[c]).done(i(c)).fail(h.reject):d[c]&&o.isFunction(a=d[c].then)?a.call(d[c],i(c),h.reject):i(c)(d[c]);else h.resolveWith();return h.promise()}});var L=/^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;o.Deferred.exceptionHook=function(b,c){a.console&&a.console.warn&&b&&L.test(b.name)&&a.console.warn("jQuery.Deferred exception: "+b.message,c)};var M;o.fn.ready=function(a){return o.ready.promise().done(a),this},o.extend({isReady:!1,readyWait:1,holdReady:function(a){a?o.readyWait++:o.ready(!0)},ready:function(a){(a===!0?--o.readyWait:o.isReady)||(o.isReady=!0,a!==!0&&--o.readyWait>0||M.resolveWith(d,[o]))}});function N(){d.removeEventListener("DOMContentLoaded",N),a.removeEventListener("load",N),o.ready()}o.ready.promise=function(b){return M||(M=o.Deferred(),"complete"===d.readyState||"loading"!==d.readyState&&!d.documentElement.doScroll?a.setTimeout(o.ready):(d.addEventListener("DOMContentLoaded",N),a.addEventListener("load",N))),M.promise(b)},o.ready.promise();var O=function(a,b,c,d,e,f,g){var h=0,i=a.length,j=null==c;if("object"===o.type(c)){e=!0;for(h in c)O(a,b,h,c[h],!0,f,g)}else if(void 0!==d&&(e=!0,o.isFunction(d)||(g=!0),j&&(g?(b.call(a,d),b=null):(j=b,b=function(a,b,c){return j.call(o(a),c)})),b))for(;i>h;h++)b(a[h],c,g?d:d.call(a[h],h,b(a[h],c)));return e?a:j?b.call(a):i?b(a[0],c):f;
},P=function(a){return 1===a.nodeType||9===a.nodeType||!+a.nodeType};function Q(){this.expando=o.expando+Q.uid++}Q.uid=1,Q.prototype={cache:function(a){var b=a[this.expando];return b||(b={},P(a)&&(a.nodeType?a[this.expando]=b:Object.defineProperty(a,this.expando,{value:b,configurable:!0}))),b},set:function(a,b,c){var d,e=this.cache(a);if("string"==typeof b)e[o.camelCase(b)]=c;else for(d in b)e[o.camelCase(d)]=b[d];return e},get:function(a,b){return void 0===b?this.cache(a):a[this.expando]&&a[this.expando][o.camelCase(b)]},access:function(a,b,c){return void 0===b||b&&"string"==typeof b&&void 0===c?this.get(a,b):(this.set(a,b,c),void 0!==c?c:b)},remove:function(a,b){var c,d=a[this.expando];if(void 0!==d){if(void 0!==b){o.isArray(b)?b=b.map(o.camelCase):(b=o.camelCase(b),b=b in d?[b]:b.match(H)||[]),c=b.length;while(c--)delete d[b[c]]}(void 0===b||o.isEmptyObject(d))&&(a.nodeType?a[this.expando]=void 0:delete a[this.expando])}},hasData:function(a){var b=a[this.expando];return void 0!==b&&!o.isEmptyObject(b)}};var R=new Q,S=new Q,T=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,U=/[A-Z]/g;function V(a,b,c){var d;if(void 0===c&&1===a.nodeType)if(d="data-"+b.replace(U,"-$&").toLowerCase(),c=a.getAttribute(d),"string"==typeof c){try{c="true"===c?!0:"false"===c?!1:"null"===c?null:+c+""===c?+c:T.test(c)?o.parseJSON(c):c}catch(e){}S.set(a,b,c)}else c=void 0;return c}o.extend({hasData:function(a){return S.hasData(a)||R.hasData(a)},data:function(a,b,c){return S.access(a,b,c)},removeData:function(a,b){S.remove(a,b)},_data:function(a,b,c){return R.access(a,b,c)},_removeData:function(a,b){R.remove(a,b)}}),o.fn.extend({data:function(a,b){var c,d,e,f=this[0],g=f&&f.attributes;if(void 0===a){if(this.length&&(e=S.get(f),1===f.nodeType&&!R.get(f,"hasDataAttrs"))){c=g.length;while(c--)g[c]&&(d=g[c].name,0===d.indexOf("data-")&&(d=o.camelCase(d.slice(5)),V(f,d,e[d])));R.set(f,"hasDataAttrs",!0)}return e}return"object"==typeof a?this.each(function(){S.set(this,a)}):O(this,function(b){var c;if(f&&void 0===b){if(c=S.get(f,a),void 0!==c)return c;if(c=V(f,a),void 0!==c)return c}else this.each(function(){S.set(this,a,b)})},null,b,arguments.length>1,null,!0)},removeData:function(a){return this.each(function(){S.remove(this,a)})}}),o.extend({queue:function(a,b,c){var d;return a?(b=(b||"fx")+"queue",d=R.get(a,b),c&&(!d||o.isArray(c)?d=R.access(a,b,o.makeArray(c)):d.push(c)),d||[]):void 0},dequeue:function(a,b){b=b||"fx";var c=o.queue(a,b),d=c.length,e=c.shift(),f=o._queueHooks(a,b),g=function(){o.dequeue(a,b)};"inprogress"===e&&(e=c.shift(),d--),e&&("fx"===b&&c.unshift("inprogress"),delete f.stop,e.call(a,g,f)),!d&&f&&f.empty.fire()},_queueHooks:function(a,b){var c=b+"queueHooks";return R.get(a,c)||R.access(a,c,{empty:o.Callbacks("once memory").add(function(){R.remove(a,[b+"queue",c])})})}}),o.fn.extend({queue:function(a,b){var c=2;return"string"!=typeof a&&(b=a,a="fx",c--),arguments.length<c?o.queue(this[0],a):void 0===b?this:this.each(function(){var c=o.queue(this,a,b);o._queueHooks(this,a),"fx"===a&&"inprogress"!==c[0]&&o.dequeue(this,a)})},dequeue:function(a){return this.each(function(){o.dequeue(this,a)})},clearQueue:function(a){return this.queue(a||"fx",[])},promise:function(a,b){var c,d=1,e=o.Deferred(),f=this,g=this.length,h=function(){--d||e.resolveWith(f,[f])};"string"!=typeof a&&(b=a,a=void 0),a=a||"fx";while(g--)c=R.get(f[g],a+"queueHooks"),c&&c.empty&&(d++,c.empty.add(h));return h(),e.promise(b)}});var W=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,X=new RegExp("^(?:([+-])=|)("+W+")([a-z%]*)$","i"),Y=["Top","Right","Bottom","Left"],Z=function(a,b){return a=b||a,"none"===o.css(a,"display")||!o.contains(a.ownerDocument,a)},$=function(a,b,c,d){var e,f,g={};for(f in b)g[f]=a.style[f],a.style[f]=b[f];e=c.apply(a,d||[]);for(f in b)a.style[f]=g[f];return e};function _(a,b,c,d){var e,f=1,g=20,h=d?function(){return d.cur()}:function(){return o.css(a,b,"")},i=h(),j=c&&c[3]||(o.cssNumber[b]?"":"px"),k=(o.cssNumber[b]||"px"!==j&&+i)&&X.exec(o.css(a,b));if(k&&k[3]!==j){j=j||k[3],c=c||[],k=+i||1;do f=f||".5",k/=f,o.style(a,b,k+j);while(f!==(f=h()/i)&&1!==f&&--g)}return c&&(k=+k||+i||0,e=c[1]?k+(c[1]+1)*c[2]:+c[2],d&&(d.unit=j,d.start=k,d.end=e)),e}var aa={};function ba(a){var b,c=a.ownerDocument,d=a.nodeName,e=aa[d];return e?e:(b=c.body.appendChild(c.createElement(d)),e=o.css(b,"display"),b.parentNode.removeChild(b),"none"===e&&(e="block"),aa[d]=e,e)}function ca(a,b){for(var c,d,e=[],f=0,g=a.length;g>f;f++)d=a[f],d.style&&(c=d.style.display,b?("none"===c&&(e[f]=R.get(d,"display")||null,e[f]||(d.style.display="")),""===d.style.display&&"none"===o.css(d,"display")&&o.contains(d.ownerDocument,d)&&(e[f]=ba(d))):"none"!==c&&(e[f]="none",R.set(d,"display",c)));for(f=0;g>f;f++)null!=e[f]&&(a[f].style.display=e[f]);return a}o.fn.extend({show:function(){return ca(this,!0)},hide:function(){return ca(this)},toggle:function(a){return"boolean"==typeof a?a?this.show():this.hide():this.each(function(){Z(this)?o(this).show():o(this).hide()})}});var da=/^(?:checkbox|radio)$/i,ea=/<([a-z][^\/\0>\x20\t\r\n\f]+)/i,fa=/^$|\/(?:java|ecma)script/i,ga={option:[1,"<select multiple='multiple'>","</select>"],thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};ga.optgroup=ga.option,ga.tbody=ga.tfoot=ga.colgroup=ga.caption=ga.thead,ga.th=ga.td;function ha(a,b){var c="undefined"!=typeof a.getElementsByTagName?a.getElementsByTagName(b||"*"):"undefined"!=typeof a.querySelectorAll?a.querySelectorAll(b||"*"):[];return void 0===b||b&&o.nodeName(a,b)?o.merge([a],c):c}function ia(a,b){for(var c=0,d=a.length;d>c;c++)R.set(a[c],"globalEval",!b||R.get(b[c],"globalEval"))}var ja=/<|&#?\w+;/;function ka(a,b,c,d,e){for(var f,g,h,i,j,k,l=b.createDocumentFragment(),m=[],n=0,p=a.length;p>n;n++)if(f=a[n],f||0===f)if("object"===o.type(f))o.merge(m,f.nodeType?[f]:f);else if(ja.test(f)){g=g||l.appendChild(b.createElement("div")),h=(ea.exec(f)||["",""])[1].toLowerCase(),i=ga[h]||ga._default,g.innerHTML=i[1]+o.htmlPrefilter(f)+i[2],k=i[0];while(k--)g=g.lastChild;o.merge(m,g.childNodes),g=l.firstChild,g.textContent=""}else m.push(b.createTextNode(f));l.textContent="",n=0;while(f=m[n++])if(d&&o.inArray(f,d)>-1)e&&e.push(f);else if(j=o.contains(f.ownerDocument,f),g=ha(l.appendChild(f),"script"),j&&ia(g),c){k=0;while(f=g[k++])fa.test(f.type||"")&&c.push(f)}return l}!function(){var a=d.createDocumentFragment(),b=a.appendChild(d.createElement("div")),c=d.createElement("input");c.setAttribute("type","radio"),c.setAttribute("checked","checked"),c.setAttribute("name","t"),b.appendChild(c),l.checkClone=b.cloneNode(!0).cloneNode(!0).lastChild.checked,b.innerHTML="<textarea>x</textarea>",l.noCloneChecked=!!b.cloneNode(!0).lastChild.defaultValue}();var la=/^key/,ma=/^(?:mouse|pointer|contextmenu|drag|drop)|click/,na=/^([^.]*)(?:\.(.+)|)/;function oa(){return!0}function pa(){return!1}function qa(){try{return d.activeElement}catch(a){}}function ra(a,b,c,d,e,f){var g,h;if("object"==typeof b){"string"!=typeof c&&(d=d||c,c=void 0);for(h in b)ra(a,h,c,d,b[h],f);return a}return null==d&&null==e?(e=c,d=c=void 0):null==e&&("string"==typeof c?(e=d,d=void 0):(e=d,d=c,c=void 0)),e===!1&&(e=pa),1===f&&(g=e,e=function(a){return o().off(a),g.apply(this,arguments)},e.guid=g.guid||(g.guid=o.guid++)),a.each(function(){o.event.add(this,b,e,d,c)})}o.event={global:{},add:function(a,b,c,d,e){var f,g,h,i,j,k,l,m,n,p,q,r=R.get(a);if(r){c.handler&&(f=c,c=f.handler,e=f.selector),c.guid||(c.guid=o.guid++),(i=r.events)||(i=r.events={}),(g=r.handle)||(g=r.handle=function(b){return"undefined"!=typeof o&&o.event.triggered!==b.type?o.event.dispatch.apply(a,arguments):void 0}),b=(b||"").match(H)||[""],j=b.length;while(j--)h=na.exec(b[j])||[],n=q=h[1],p=(h[2]||"").split(".").sort(),n&&(l=o.event.special[n]||{},n=(e?l.delegateType:l.bindType)||n,l=o.event.special[n]||{},k=o.extend({type:n,origType:q,data:d,handler:c,guid:c.guid,selector:e,needsContext:e&&o.expr.match.needsContext.test(e),namespace:p.join(".")},f),(m=i[n])||(m=i[n]=[],m.delegateCount=0,l.setup&&l.setup.call(a,d,p,g)!==!1||a.addEventListener&&a.addEventListener(n,g)),l.add&&(l.add.call(a,k),k.handler.guid||(k.handler.guid=c.guid)),e?m.splice(m.delegateCount++,0,k):m.push(k),o.event.global[n]=!0)}},remove:function(a,b,c,d,e){var f,g,h,i,j,k,l,m,n,p,q,r=R.hasData(a)&&R.get(a);if(r&&(i=r.events)){b=(b||"").match(H)||[""],j=b.length;while(j--)if(h=na.exec(b[j])||[],n=q=h[1],p=(h[2]||"").split(".").sort(),n){l=o.event.special[n]||{},n=(d?l.delegateType:l.bindType)||n,m=i[n]||[],h=h[2]&&new RegExp("(^|\\.)"+p.join("\\.(?:.*\\.|)")+"(\\.|$)"),g=f=m.length;while(f--)k=m[f],!e&&q!==k.origType||c&&c.guid!==k.guid||h&&!h.test(k.namespace)||d&&d!==k.selector&&("**"!==d||!k.selector)||(m.splice(f,1),k.selector&&m.delegateCount--,l.remove&&l.remove.call(a,k));g&&!m.length&&(l.teardown&&l.teardown.call(a,p,r.handle)!==!1||o.removeEvent(a,n,r.handle),delete i[n])}else for(n in i)o.event.remove(a,n+b[j],c,d,!0);o.isEmptyObject(i)&&R.remove(a,"handle events")}},dispatch:function(a){a=o.event.fix(a);var b,c,d,f,g,h=[],i=e.call(arguments),j=(R.get(this,"events")||{})[a.type]||[],k=o.event.special[a.type]||{};if(i[0]=a,a.delegateTarget=this,!k.preDispatch||k.preDispatch.call(this,a)!==!1){h=o.event.handlers.call(this,a,j),b=0;while((f=h[b++])&&!a.isPropagationStopped()){a.currentTarget=f.elem,c=0;while((g=f.handlers[c++])&&!a.isImmediatePropagationStopped())(!a.rnamespace||a.rnamespace.test(g.namespace))&&(a.handleObj=g,a.data=g.data,d=((o.event.special[g.origType]||{}).handle||g.handler).apply(f.elem,i),void 0!==d&&(a.result=d)===!1&&(a.preventDefault(),a.stopPropagation()))}return k.postDispatch&&k.postDispatch.call(this,a),a.result}},handlers:function(a,b){var c,d,e,f,g=[],h=b.delegateCount,i=a.target;if(h&&i.nodeType&&("click"!==a.type||isNaN(a.button)||a.button<1))for(;i!==this;i=i.parentNode||this)if(1===i.nodeType&&(i.disabled!==!0||"click"!==a.type)){for(d=[],c=0;h>c;c++)f=b[c],e=f.selector+" ",void 0===d[e]&&(d[e]=f.needsContext?o(e,this).index(i)>-1:o.find(e,this,null,[i]).length),d[e]&&d.push(f);d.length&&g.push({elem:i,handlers:d})}return h<b.length&&g.push({elem:this,handlers:b.slice(h)}),g},props:"altKey bubbles cancelable ctrlKey currentTarget detail eventPhase metaKey relatedTarget shiftKey target timeStamp view which".split(" "),fixHooks:{},keyHooks:{props:"char charCode key keyCode".split(" "),filter:function(a,b){return null==a.which&&(a.which=null!=b.charCode?b.charCode:b.keyCode),a}},mouseHooks:{props:"button buttons clientX clientY offsetX offsetY pageX pageY screenX screenY toElement".split(" "),filter:function(a,b){var c,e,f,g=b.button;return null==a.pageX&&null!=b.clientX&&(c=a.target.ownerDocument||d,e=c.documentElement,f=c.body,a.pageX=b.clientX+(e&&e.scrollLeft||f&&f.scrollLeft||0)-(e&&e.clientLeft||f&&f.clientLeft||0),a.pageY=b.clientY+(e&&e.scrollTop||f&&f.scrollTop||0)-(e&&e.clientTop||f&&f.clientTop||0)),a.which||void 0===g||(a.which=1&g?1:2&g?3:4&g?2:0),a}},fix:function(a){if(a[o.expando])return a;var b,c,d,e=a.type,f=a,g=this.fixHooks[e];g||(this.fixHooks[e]=g=ma.test(e)?this.mouseHooks:la.test(e)?this.keyHooks:{}),d=g.props?this.props.concat(g.props):this.props,a=new o.Event(f),b=d.length;while(b--)c=d[b],a[c]=f[c];return 3===a.target.nodeType&&(a.target=a.target.parentNode),g.filter?g.filter(a,f):a},special:{load:{noBubble:!0},focus:{trigger:function(){return this!==qa()&&this.focus?(this.focus(),!1):void 0},delegateType:"focusin"},blur:{trigger:function(){return this===qa()&&this.blur?(this.blur(),!1):void 0},delegateType:"focusout"},click:{trigger:function(){return"checkbox"===this.type&&this.click&&o.nodeName(this,"input")?(this.click(),!1):void 0},_default:function(a){return o.nodeName(a.target,"a")}},beforeunload:{postDispatch:function(a){void 0!==a.result&&a.originalEvent&&(a.originalEvent.returnValue=a.result)}}}},o.removeEvent=function(a,b,c){a.removeEventListener&&a.removeEventListener(b,c)},o.Event=function(a,b){return this instanceof o.Event?(a&&a.type?(this.originalEvent=a,this.type=a.type,this.isDefaultPrevented=a.defaultPrevented||void 0===a.defaultPrevented&&a.returnValue===!1?oa:pa):this.type=a,b&&o.extend(this,b),this.timeStamp=a&&a.timeStamp||o.now(),void(this[o.expando]=!0)):new o.Event(a,b)},o.Event.prototype={constructor:o.Event,isDefaultPrevented:pa,isPropagationStopped:pa,isImmediatePropagationStopped:pa,preventDefault:function(){var a=this.originalEvent;this.isDefaultPrevented=oa,a&&a.preventDefault()},stopPropagation:function(){var a=this.originalEvent;this.isPropagationStopped=oa,a&&a.stopPropagation()},stopImmediatePropagation:function(){var a=this.originalEvent;this.isImmediatePropagationStopped=oa,a&&a.stopImmediatePropagation(),this.stopPropagation()}},o.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},function(a,b){o.event.special[a]={delegateType:b,bindType:b,handle:function(a){var c,d=this,e=a.relatedTarget,f=a.handleObj;return(!e||e!==d&&!o.contains(d,e))&&(a.type=f.origType,c=f.handler.apply(this,arguments),a.type=b),c}}}),o.fn.extend({on:function(a,b,c,d){return ra(this,a,b,c,d)},one:function(a,b,c,d){return ra(this,a,b,c,d,1)},off:function(a,b,c){var d,e;if(a&&a.preventDefault&&a.handleObj)return d=a.handleObj,o(a.delegateTarget).off(d.namespace?d.origType+"."+d.namespace:d.origType,d.selector,d.handler),this;if("object"==typeof a){for(e in a)this.off(e,b,a[e]);return this}return(b===!1||"function"==typeof b)&&(c=b,b=void 0),c===!1&&(c=pa),this.each(function(){o.event.remove(this,a,c,b)})}});var sa=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\/\0>\x20\t\r\n\f]*)[^>]*)\/>/gi,ta=/<script|<style|<link/i,ua=/checked\s*(?:[^=]|=\s*.checked.)/i,va=/^true\/(.*)/,wa=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;function xa(a,b){return o.nodeName(a,"table")&&o.nodeName(11!==b.nodeType?b:b.firstChild,"tr")?a.getElementsByTagName("tbody")[0]||a:a}function ya(a){return a.type=(null!==a.getAttribute("type"))+"/"+a.type,a}function za(a){var b=va.exec(a.type);return b?a.type=b[1]:a.removeAttribute("type"),a}function Aa(a,b){var c,d,e,f,g,h,i,j;if(1===b.nodeType){if(R.hasData(a)&&(f=R.access(a),g=R.set(b,f),j=f.events)){delete g.handle,g.events={};for(e in j)for(c=0,d=j[e].length;d>c;c++)o.event.add(b,e,j[e][c])}S.hasData(a)&&(h=S.access(a),i=o.extend({},h),S.set(b,i))}}function Ba(a,b){var c=b.nodeName.toLowerCase();"input"===c&&da.test(a.type)?b.checked=a.checked:("input"===c||"textarea"===c)&&(b.defaultValue=a.defaultValue)}function Ca(a,b,c,d){b=f.apply([],b);var e,g,h,i,j,k,n=0,p=a.length,q=p-1,r=b[0],s=o.isFunction(r);if(s||p>1&&"string"==typeof r&&!l.checkClone&&ua.test(r))return a.each(function(e){var f=a.eq(e);s&&(b[0]=r.call(this,e,f.html())),Ca(f,b,c,d)});if(p&&(e=ka(b,a[0].ownerDocument,!1,a,d),g=e.firstChild,1===e.childNodes.length&&(e=g),g||d)){for(h=o.map(ha(e,"script"),ya),i=h.length;p>n;n++)j=e,n!==q&&(j=o.clone(j,!0,!0),i&&o.merge(h,ha(j,"script"))),c.call(a[n],j,n);if(i)for(k=h[h.length-1].ownerDocument,o.map(h,za),n=0;i>n;n++)j=h[n],fa.test(j.type||"")&&!R.access(j,"globalEval")&&o.contains(k,j)&&(j.src?o._evalUrl&&o._evalUrl(j.src):m(j.textContent.replace(wa,""),k))}return a}function Da(a,b,c){for(var d,e=b?o.filter(b,a):a,f=0;null!=(d=e[f]);f++)c||1!==d.nodeType||o.cleanData(ha(d)),d.parentNode&&(c&&o.contains(d.ownerDocument,d)&&ia(ha(d,"script")),d.parentNode.removeChild(d));return a}o.extend({htmlPrefilter:function(a){return a.replace(sa,"<$1></$2>")},clone:function(a,b,c){var d,e,f,g,h=a.cloneNode(!0),i=o.contains(a.ownerDocument,a);if(!(l.noCloneChecked||1!==a.nodeType&&11!==a.nodeType||o.isXMLDoc(a)))for(g=ha(h),f=ha(a),d=0,e=f.length;e>d;d++)Ba(f[d],g[d]);if(b)if(c)for(f=f||ha(a),g=g||ha(h),d=0,e=f.length;e>d;d++)Aa(f[d],g[d]);else Aa(a,h);return g=ha(h,"script"),g.length>0&&ia(g,!i&&ha(a,"script")),h},cleanData:function(a){for(var b,c,d,e=o.event.special,f=0;void 0!==(c=a[f]);f++)if(P(c)){if(b=c[R.expando]){if(b.events)for(d in b.events)e[d]?o.event.remove(c,d):o.removeEvent(c,d,b.handle);c[R.expando]=void 0}c[S.expando]&&(c[S.expando]=void 0)}}}),o.fn.extend({detach:function(a){return Da(this,a,!0)},remove:function(a){return Da(this,a)},text:function(a){return O(this,function(a){return void 0===a?o.text(this):this.empty().each(function(){(1===this.nodeType||11===this.nodeType||9===this.nodeType)&&(this.textContent=a)})},null,a,arguments.length)},append:function(){return Ca(this,arguments,function(a){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var b=xa(this,a);b.appendChild(a)}})},prepend:function(){return Ca(this,arguments,function(a){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var b=xa(this,a);b.insertBefore(a,b.firstChild)}})},before:function(){return Ca(this,arguments,function(a){this.parentNode&&this.parentNode.insertBefore(a,this)})},after:function(){return Ca(this,arguments,function(a){this.parentNode&&this.parentNode.insertBefore(a,this.nextSibling)})},empty:function(){for(var a,b=0;null!=(a=this[b]);b++)1===a.nodeType&&(o.cleanData(ha(a,!1)),a.textContent="");return this},clone:function(a,b){return a=null==a?!1:a,b=null==b?a:b,this.map(function(){return o.clone(this,a,b)})},html:function(a){return O(this,function(a){var b=this[0]||{},c=0,d=this.length;if(void 0===a&&1===b.nodeType)return b.innerHTML;if("string"==typeof a&&!ta.test(a)&&!ga[(ea.exec(a)||["",""])[1].toLowerCase()]){a=o.htmlPrefilter(a);try{for(;d>c;c++)b=this[c]||{},1===b.nodeType&&(o.cleanData(ha(b,!1)),b.innerHTML=a);b=0}catch(e){}}b&&this.empty().append(a)},null,a,arguments.length)},replaceWith:function(){var a=[];return Ca(this,arguments,function(b){var c=this.parentNode;o.inArray(this,a)<0&&(o.cleanData(ha(this)),c&&c.replaceChild(b,this))},a)}}),o.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(a,b){o.fn[a]=function(a){for(var c,d=[],e=o(a),f=e.length-1,h=0;f>=h;h++)c=h===f?this:this.clone(!0),o(e[h])[b](c),g.apply(d,c.get());return this.pushStack(d)}});var Ea=/^margin/,Fa=new RegExp("^("+W+")(?!px)[a-z%]+$","i"),Ga=function(b){var c=b.ownerDocument.defaultView;return c.opener||(c=a),c.getComputedStyle(b)},Ha=d.documentElement;!function(){var b,c,e,f,g=d.createElement("div"),h=d.createElement("div");if(h.style){h.style.backgroundClip="content-box",h.cloneNode(!0).style.backgroundClip="",l.clearCloneStyle="content-box"===h.style.backgroundClip,g.style.cssText="border:0;width:8px;height:0;top:0;left:-9999px;padding:0;margin-top:1px;position:absolute",g.appendChild(h);function i(){h.style.cssText="box-sizing:border-box;position:relative;display:block;margin:auto;border:1px;padding:1px;top:1%;width:50%",h.innerHTML="",Ha.appendChild(g);var d=a.getComputedStyle(h);b="1%"!==d.top,f="2px"===d.marginLeft,c="4px"===d.width,h.style.marginRight="50%",e="4px"===d.marginRight,Ha.removeChild(g)}o.extend(l,{pixelPosition:function(){return i(),b},boxSizingReliable:function(){return null==c&&i(),c},pixelMarginRight:function(){return null==c&&i(),e},reliableMarginLeft:function(){return null==c&&i(),f}})}}();function Ia(a,b,c){var d,e,f,g,h=a.style;return c=c||Ga(a),c&&(g=c.getPropertyValue(b)||c[b],""!==g||o.contains(a.ownerDocument,a)||(g=o.style(a,b)),!l.pixelMarginRight()&&Fa.test(g)&&Ea.test(b)&&(d=h.width,e=h.minWidth,f=h.maxWidth,h.minWidth=h.maxWidth=h.width=g,g=c.width,h.width=d,h.minWidth=e,h.maxWidth=f)),void 0!==g?g+"":g}function Ja(a,b){return{get:function(){return a()?void delete this.get:(this.get=b).apply(this,arguments)}}}var Ka=/^(none|table(?!-c[ea]).+)/,La={position:"absolute",visibility:"hidden",display:"block"},Ma={letterSpacing:"0",fontWeight:"400"},Na=["Webkit","Moz","ms"],Oa=d.createElement("div").style;function Pa(a){if(a in Oa)return a;var b=a[0].toUpperCase()+a.slice(1),c=Na.length;while(c--)if(a=Na[c]+b,a in Oa)return a}function Qa(a,b,c){var d=X.exec(b);return d?Math.max(0,d[2]-(c||0))+(d[3]||"px"):b}function Ra(a,b,c,d,e){for(var f=c===(d?"border":"content")?4:"width"===b?1:0,g=0;4>f;f+=2)"margin"===c&&(g+=o.css(a,c+Y[f],!0,e)),d?("content"===c&&(g-=o.css(a,"padding"+Y[f],!0,e)),"margin"!==c&&(g-=o.css(a,"border"+Y[f]+"Width",!0,e))):(g+=o.css(a,"padding"+Y[f],!0,e),"padding"!==c&&(g+=o.css(a,"border"+Y[f]+"Width",!0,e)));return g}function Sa(b,c,e){var f,g=!0,h=Ga(b),i="border-box"===o.css(b,"boxSizing",!1,h);if(b.getClientRects().length&&(f=b.getBoundingClientRect()[c]),d.msFullscreenElement&&a.top!==a&&(f*=100),0>=f||null==f){if(f=Ia(b,c,h),(0>f||null==f)&&(f=b.style[c]),Fa.test(f))return f;g=i&&(l.boxSizingReliable()||f===b.style[c]),f=parseFloat(f)||0}return f+Ra(b,c,e||(i?"border":"content"),g,h)+"px"}o.extend({cssHooks:{opacity:{get:function(a,b){if(b){var c=Ia(a,"opacity");return""===c?"1":c}}}},cssNumber:{animationIterationCount:!0,columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{"float":"cssFloat"},style:function(a,b,c,d){if(a&&3!==a.nodeType&&8!==a.nodeType&&a.style){var e,f,g,h=o.camelCase(b),i=a.style;return b=o.cssProps[h]||(o.cssProps[h]=Pa(h)||h),g=o.cssHooks[b]||o.cssHooks[h],void 0===c?g&&"get"in g&&void 0!==(e=g.get(a,!1,d))?e:i[b]:(f=typeof c,"string"===f&&(e=X.exec(c))&&e[1]&&(c=_(a,b,e),f="number"),null!=c&&c===c&&("number"===f&&(c+=e&&e[3]||(o.cssNumber[h]?"":"px")),l.clearCloneStyle||""!==c||0!==b.indexOf("background")||(i[b]="inherit"),g&&"set"in g&&void 0===(c=g.set(a,c,d))||(i[b]=c)),void 0)}},css:function(a,b,c,d){var e,f,g,h=o.camelCase(b);return b=o.cssProps[h]||(o.cssProps[h]=Pa(h)||h),g=o.cssHooks[b]||o.cssHooks[h],g&&"get"in g&&(e=g.get(a,!0,c)),void 0===e&&(e=Ia(a,b,d)),"normal"===e&&b in Ma&&(e=Ma[b]),""===c||c?(f=parseFloat(e),c===!0||isFinite(f)?f||0:e):e}}),o.each(["height","width"],function(a,b){o.cssHooks[b]={get:function(a,c,d){return c?!Ka.test(o.css(a,"display"))||a.getClientRects().length&&a.getBoundingClientRect().width?Sa(a,b,d):$(a,La,function(){return Sa(a,b,d)}):void 0},set:function(a,c,d){var e,f=d&&Ga(a),g=d&&Ra(a,b,d,"border-box"===o.css(a,"boxSizing",!1,f),f);return g&&(e=X.exec(c))&&"px"!==(e[3]||"px")&&(a.style[b]=c,c=o.css(a,b)),Qa(a,c,g)}}}),o.cssHooks.marginLeft=Ja(l.reliableMarginLeft,function(a,b){return b?(parseFloat(Ia(a,"marginLeft"))||a.getBoundingClientRect().left-$(a,{marginLeft:0},function(){return a.getBoundingClientRect().left}))+"px":void 0}),o.each({margin:"",padding:"",border:"Width"},function(a,b){o.cssHooks[a+b]={expand:function(c){for(var d=0,e={},f="string"==typeof c?c.split(" "):[c];4>d;d++)e[a+Y[d]+b]=f[d]||f[d-2]||f[0];return e}},Ea.test(a)||(o.cssHooks[a+b].set=Qa)}),o.fn.extend({css:function(a,b){return O(this,function(a,b,c){var d,e,f={},g=0;if(o.isArray(b)){for(d=Ga(a),e=b.length;e>g;g++)f[b[g]]=o.css(a,b[g],!1,d);return f}return void 0!==c?o.style(a,b,c):o.css(a,b)},a,b,arguments.length>1)}});function Ta(a,b,c,d,e){return new Ta.prototype.init(a,b,c,d,e)}o.Tween=Ta,Ta.prototype={constructor:Ta,init:function(a,b,c,d,e,f){this.elem=a,this.prop=c,this.easing=e||o.easing._default,this.options=b,this.start=this.now=this.cur(),this.end=d,this.unit=f||(o.cssNumber[c]?"":"px")},cur:function(){var a=Ta.propHooks[this.prop];return a&&a.get?a.get(this):Ta.propHooks._default.get(this)},run:function(a){var b=Ta.propHooks[this.prop];return this.pos=this.options.duration?o.easing[this.easing](a):a,this.now=(this.end-this.start)*this.pos+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),b&&b.set?b.set(this):Ta.propHooks._default.set(this),this}},Ta.prototype.init.prototype=Ta.prototype,Ta.propHooks={_default:{get:function(a){var b;return 1!==a.elem.nodeType||null!=a.elem[a.prop]&&null==a.elem.style[a.prop]?a.elem[a.prop]:(b=o.css(a.elem,a.prop,""),b&&"auto"!==b?b:0)},set:function(a){o.fx.step[a.prop]?o.fx.step[a.prop](a):1!==a.elem.nodeType||null==a.elem.style[o.cssProps[a.prop]]&&!o.cssHooks[a.prop]?a.elem[a.prop]=a.now:o.style(a.elem,a.prop,a.now+a.unit)}}},Ta.propHooks.scrollTop=Ta.propHooks.scrollLeft={set:function(a){a.elem.nodeType&&a.elem.parentNode&&(a.elem[a.prop]=a.now)}},o.easing={linear:function(a){return a},swing:function(a){return.5-Math.cos(a*Math.PI)/2},_default:"swing"},o.fx=Ta.prototype.init,o.fx.step={};var Ua,Va,Wa=/^(?:toggle|show|hide)$/,Xa=/queueHooks$/;function Ya(){Va&&(a.requestAnimationFrame(Ya),o.fx.tick())}function Za(){return a.setTimeout(function(){Ua=void 0}),Ua=o.now()}function $a(a,b){var c,d=0,e={height:a};for(b=b?1:0;4>d;d+=2-b)c=Y[d],e["margin"+c]=e["padding"+c]=a;return b&&(e.opacity=e.width=a),e}function _a(a,b,c){for(var d,e=(cb.tweeners[b]||[]).concat(cb.tweeners["*"]),f=0,g=e.length;g>f;f++)if(d=e[f].call(c,b,a))return d}function ab(a,b,c){var d,e,f,g,h,i,j,k,l="width"in b||"height"in b,m=this,n={},p=a.style,q=a.nodeType&&Z(a),r=R.get(a,"fxshow");c.queue||(g=o._queueHooks(a,"fx"),null==g.unqueued&&(g.unqueued=0,h=g.empty.fire,g.empty.fire=function(){g.unqueued||h()}),g.unqueued++,m.always(function(){m.always(function(){g.unqueued--,o.queue(a,"fx").length||g.empty.fire()})}));for(d in b)if(e=b[d],Wa.test(e)){if(delete b[d],f=f||"toggle"===e,e===(q?"hide":"show")){if("show"!==e||!r||void 0===r[d])continue;q=!0}n[d]=r&&r[d]||o.style(a,d)}if(i=!o.isEmptyObject(b),i||!o.isEmptyObject(n)){l&&1===a.nodeType&&(c.overflow=[p.overflow,p.overflowX,p.overflowY],j=r&&r.display,null==j&&(j=R.get(a,"display")),k=o.css(a,"display"),"none"===k&&(j?k=j:(ca([a],!0),j=a.style.display||j,k=o.css(a,"display"),ca([a]))),("inline"===k||"inline-block"===k&&null!=j)&&"none"===o.css(a,"float")&&(i||(m.done(function(){p.display=j}),null==j&&(k=p.display,j="none"===k?"":k)),p.display="inline-block")),c.overflow&&(p.overflow="hidden",m.always(function(){p.overflow=c.overflow[0],p.overflowX=c.overflow[1],p.overflowY=c.overflow[2]})),i=!1;for(d in n)i||(r?"hidden"in r&&(q=r.hidden):r=R.access(a,"fxshow",{display:j}),f&&(r.hidden=!q),q&&ca([a],!0),m.done(function(){q||ca([a]),R.remove(a,"fxshow");for(d in n)o.style(a,d,n[d])})),i=_a(q?r[d]:0,d,m),d in r||(r[d]=i.start,q&&(i.end=i.start,i.start="width"===d||"height"===d?1:0))}}function bb(a,b){var c,d,e,f,g;for(c in a)if(d=o.camelCase(c),e=b[d],f=a[c],o.isArray(f)&&(e=f[1],f=a[c]=f[0]),c!==d&&(a[d]=f,delete a[c]),g=o.cssHooks[d],g&&"expand"in g){f=g.expand(f),delete a[d];for(c in f)c in a||(a[c]=f[c],b[c]=e)}else b[d]=e}function cb(a,b,c){var d,e,f=0,g=cb.prefilters.length,h=o.Deferred().always(function(){delete i.elem}),i=function(){if(e)return!1;for(var b=Ua||Za(),c=Math.max(0,j.startTime+j.duration-b),d=c/j.duration||0,f=1-d,g=0,i=j.tweens.length;i>g;g++)j.tweens[g].run(f);return h.notifyWith(a,[j,f,c]),1>f&&i?c:(h.resolveWith(a,[j]),!1)},j=h.promise({elem:a,props:o.extend({},b),opts:o.extend(!0,{specialEasing:{},easing:o.easing._default},c),originalProperties:b,originalOptions:c,startTime:Ua||Za(),duration:c.duration,tweens:[],createTween:function(b,c){var d=o.Tween(a,j.opts,b,c,j.opts.specialEasing[b]||j.opts.easing);return j.tweens.push(d),d},stop:function(b){var c=0,d=b?j.tweens.length:0;if(e)return this;for(e=!0;d>c;c++)j.tweens[c].run(1);return b?(h.notifyWith(a,[j,1,0]),h.resolveWith(a,[j,b])):h.rejectWith(a,[j,b]),this}}),k=j.props;for(bb(k,j.opts.specialEasing);g>f;f++)if(d=cb.prefilters[f].call(j,a,k,j.opts))return o.isFunction(d.stop)&&(o._queueHooks(j.elem,j.opts.queue).stop=o.proxy(d.stop,d)),d;return o.map(k,_a,j),o.isFunction(j.opts.start)&&j.opts.start.call(a,j),o.fx.timer(o.extend(i,{elem:a,anim:j,queue:j.opts.queue})),j.progress(j.opts.progress).done(j.opts.done,j.opts.complete).fail(j.opts.fail).always(j.opts.always)}o.Animation=o.extend(cb,{tweeners:{"*":[function(a,b){var c=this.createTween(a,b);return _(c.elem,a,X.exec(b),c),c}]},tweener:function(a,b){o.isFunction(a)?(b=a,a=["*"]):a=a.match(H);for(var c,d=0,e=a.length;e>d;d++)c=a[d],cb.tweeners[c]=cb.tweeners[c]||[],cb.tweeners[c].unshift(b)},prefilters:[ab],prefilter:function(a,b){b?cb.prefilters.unshift(a):cb.prefilters.push(a)}}),o.speed=function(a,b,c){var e=a&&"object"==typeof a?o.extend({},a):{complete:c||!c&&b||o.isFunction(a)&&a,duration:a,easing:c&&b||b&&!o.isFunction(b)&&b};return o.fx.off||d.hidden?e.duration=0:e.duration="number"==typeof e.duration?e.duration:e.duration in o.fx.speeds?o.fx.speeds[e.duration]:o.fx.speeds._default,(null==e.queue||e.queue===!0)&&(e.queue="fx"),e.old=e.complete,e.complete=function(){o.isFunction(e.old)&&e.old.call(this),e.queue&&o.dequeue(this,e.queue)},e},o.fn.extend({fadeTo:function(a,b,c,d){return this.filter(Z).css("opacity",0).show().end().animate({opacity:b},a,c,d)},animate:function(a,b,c,d){var e=o.isEmptyObject(a),f=o.speed(b,c,d),g=function(){var b=cb(this,o.extend({},a),f);(e||R.get(this,"finish"))&&b.stop(!0)};return g.finish=g,e||f.queue===!1?this.each(g):this.queue(f.queue,g)},stop:function(a,b,c){var d=function(a){var b=a.stop;delete a.stop,b(c)};return"string"!=typeof a&&(c=b,b=a,a=void 0),b&&a!==!1&&this.queue(a||"fx",[]),this.each(function(){var b=!0,e=null!=a&&a+"queueHooks",f=o.timers,g=R.get(this);if(e)g[e]&&g[e].stop&&d(g[e]);else for(e in g)g[e]&&g[e].stop&&Xa.test(e)&&d(g[e]);for(e=f.length;e--;)f[e].elem!==this||null!=a&&f[e].queue!==a||(f[e].anim.stop(c),b=!1,f.splice(e,1));(b||!c)&&o.dequeue(this,a)})},finish:function(a){return a!==!1&&(a=a||"fx"),this.each(function(){var b,c=R.get(this),d=c[a+"queue"],e=c[a+"queueHooks"],f=o.timers,g=d?d.length:0;for(c.finish=!0,o.queue(this,a,[]),e&&e.stop&&e.stop.call(this,!0),b=f.length;b--;)f[b].elem===this&&f[b].queue===a&&(f[b].anim.stop(!0),f.splice(b,1));for(b=0;g>b;b++)d[b]&&d[b].finish&&d[b].finish.call(this);delete c.finish})}}),o.each(["toggle","show","hide"],function(a,b){var c=o.fn[b];o.fn[b]=function(a,d,e){return null==a||"boolean"==typeof a?c.apply(this,arguments):this.animate($a(b,!0),a,d,e)}}),o.each({slideDown:$a("show"),slideUp:$a("hide"),slideToggle:$a("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(a,b){o.fn[a]=function(a,c,d){return this.animate(b,a,c,d)}}),o.timers=[],o.fx.tick=function(){var a,b=0,c=o.timers;for(Ua=o.now();b<c.length;b++)a=c[b],a()||c[b]!==a||c.splice(b--,1);c.length||o.fx.stop(),Ua=void 0},o.fx.timer=function(a){o.timers.push(a),a()?o.fx.start():o.timers.pop()},o.fx.interval=13,o.fx.start=function(){Va||(Va=a.requestAnimationFrame?a.requestAnimationFrame(Ya):a.setInterval(o.fx.tick,o.fx.interval))},o.fx.stop=function(){a.cancelAnimationFrame?a.cancelAnimationFrame(Va):a.clearInterval(Va),Va=null},o.fx.speeds={slow:600,fast:200,_default:400},o.fn.delay=function(b,c){return b=o.fx?o.fx.speeds[b]||b:b,c=c||"fx",this.queue(c,function(c,d){var e=a.setTimeout(c,b);d.stop=function(){a.clearTimeout(e)}})},function(){var a=d.createElement("input"),b=d.createElement("select"),c=b.appendChild(d.createElement("option"));a.type="checkbox",l.checkOn=""!==a.value,l.optSelected=c.selected,a=d.createElement("input"),a.value="t",a.type="radio",l.radioValue="t"===a.value}();var db,eb=o.expr.attrHandle,fb=/[A-Z]+/g,gb=function(a){return a.toLowerCase()};o.fn.extend({attr:function(a,b){return O(this,o.attr,a,b,arguments.length>1)},removeAttr:function(a){return this.each(function(){o.removeAttr(this,a)})}}),o.extend({attr:function(a,b,c){var d,e,f=a.nodeType;if(3!==f&&8!==f&&2!==f)return"undefined"==typeof a.getAttribute?o.prop(a,b,c):(1===f&&o.isXMLDoc(a)||(b=b.replace(fb,gb),e=o.attrHooks[b]||(o.expr.match.bool.test(b)?db:void 0)),void 0!==c?null===c?void o.removeAttr(a,b):e&&"set"in e&&void 0!==(d=e.set(a,c,b))?d:(a.setAttribute(b,c+""),c):e&&"get"in e&&null!==(d=e.get(a,b))?d:(d=o.find.attr(a,b),null==d?void 0:d))},attrHooks:{type:{set:function(a,b){if(!l.radioValue&&"radio"===b&&o.nodeName(a,"input")){var c=a.value;return a.setAttribute("type",b),c&&(a.value=c),b}}}},removeAttr:function(a,b){var c,d=0,e=b&&b.match(H);if(e&&1===a.nodeType)while(c=e[d++])a.removeAttribute(c)}}),db={set:function(a,b,c){return b===!1?o.removeAttr(a,c):a.setAttribute(c,c),c}},o.each(o.expr.match.bool.source.match(/\w+/g),function(a,b){
var c=eb[b]||o.find.attr;eb[b]=function(a,b,d){var e,f;return d||(f=eb[b],eb[b]=e,e=null!=c(a,b,d)?b.toLowerCase():null,eb[b]=f),e}});var hb=/^(?:input|select|textarea|button)$/i,ib=/^(?:a|area)$/i;o.fn.extend({prop:function(a,b){return O(this,o.prop,a,b,arguments.length>1)},removeProp:function(a){return this.each(function(){delete this[o.propFix[a]||a]})}}),o.extend({prop:function(a,b,c){var d,e,f=a.nodeType;if(3!==f&&8!==f&&2!==f)return 1===f&&o.isXMLDoc(a)||(b=o.propFix[b]||b,e=o.propHooks[b]),void 0!==c?e&&"set"in e&&void 0!==(d=e.set(a,c,b))?d:a[b]=c:e&&"get"in e&&null!==(d=e.get(a,b))?d:a[b]},propHooks:{tabIndex:{get:function(a){var b=o.find.attr(a,"tabindex");return b?parseInt(b,10):hb.test(a.nodeName)||ib.test(a.nodeName)&&a.href?0:-1}}},propFix:{"for":"htmlFor","class":"className"}}),l.optSelected||(o.propHooks.selected={get:function(a){var b=a.parentNode;return b&&b.parentNode&&b.parentNode.selectedIndex,null}}),o.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],function(){o.propFix[this.toLowerCase()]=this});var jb=/[\t\r\n\f]/g;function kb(a){return a.getAttribute&&a.getAttribute("class")||""}o.fn.extend({addClass:function(a){var b,c,d,e,f,g,h,i=0;if(o.isFunction(a))return this.each(function(b){o(this).addClass(a.call(this,b,kb(this)))});if("string"==typeof a&&a){b=a.match(H)||[];while(c=this[i++])if(e=kb(c),d=1===c.nodeType&&(" "+e+" ").replace(jb," ")){g=0;while(f=b[g++])d.indexOf(" "+f+" ")<0&&(d+=f+" ");h=o.trim(d),e!==h&&c.setAttribute("class",h)}}return this},removeClass:function(a){var b,c,d,e,f,g,h,i=0;if(o.isFunction(a))return this.each(function(b){o(this).removeClass(a.call(this,b,kb(this)))});if(!arguments.length)return this.attr("class","");if("string"==typeof a&&a){b=a.match(H)||[];while(c=this[i++])if(e=kb(c),d=1===c.nodeType&&(" "+e+" ").replace(jb," ")){g=0;while(f=b[g++])while(d.indexOf(" "+f+" ")>-1)d=d.replace(" "+f+" "," ");h=o.trim(d),e!==h&&c.setAttribute("class",h)}}return this},toggleClass:function(a,b){var c=typeof a;return"boolean"==typeof b&&"string"===c?b?this.addClass(a):this.removeClass(a):o.isFunction(a)?this.each(function(c){o(this).toggleClass(a.call(this,c,kb(this),b),b)}):this.each(function(){var b,d,e,f;if("string"===c){d=0,e=o(this),f=a.match(H)||[];while(b=f[d++])e.hasClass(b)?e.removeClass(b):e.addClass(b)}else(void 0===a||"boolean"===c)&&(b=kb(this),b&&R.set(this,"__className__",b),this.setAttribute&&this.setAttribute("class",b||a===!1?"":R.get(this,"__className__")||""))})},hasClass:function(a){var b,c,d=0;b=" "+a+" ";while(c=this[d++])if(1===c.nodeType&&(" "+kb(c)+" ").replace(jb," ").indexOf(b)>-1)return!0;return!1}});var lb=/\r/g;o.fn.extend({val:function(a){var b,c,d,e=this[0];{if(arguments.length)return d=o.isFunction(a),this.each(function(c){var e;1===this.nodeType&&(e=d?a.call(this,c,o(this).val()):a,null==e?e="":"number"==typeof e?e+="":o.isArray(e)&&(e=o.map(e,function(a){return null==a?"":a+""})),b=o.valHooks[this.type]||o.valHooks[this.nodeName.toLowerCase()],b&&"set"in b&&void 0!==b.set(this,e,"value")||(this.value=e))});if(e)return b=o.valHooks[e.type]||o.valHooks[e.nodeName.toLowerCase()],b&&"get"in b&&void 0!==(c=b.get(e,"value"))?c:(c=e.value,"string"==typeof c?c.replace(lb,""):null==c?"":c)}}}),o.extend({valHooks:{option:{get:function(a){return o.trim(a.value)}},select:{get:function(a){for(var b,c,d=a.options,e=a.selectedIndex,f="select-one"===a.type,g=f?null:[],h=f?e+1:d.length,i=0>e?h:f?e:0;h>i;i++)if(c=d[i],(c.selected||i===e)&&!c.disabled&&(!c.parentNode.disabled||!o.nodeName(c.parentNode,"optgroup"))){if(b=o(c).val(),f)return b;g.push(b)}return g},set:function(a,b){var c,d,e=a.options,f=o.makeArray(b),g=e.length;while(g--)d=e[g],(d.selected=o.inArray(o.valHooks.option.get(d),f)>-1)&&(c=!0);return c||(a.selectedIndex=-1),f}}}}),o.each(["radio","checkbox"],function(){o.valHooks[this]={set:function(a,b){return o.isArray(b)?a.checked=o.inArray(o(a).val(),b)>-1:void 0}},l.checkOn||(o.valHooks[this].get=function(a){return null===a.getAttribute("value")?"on":a.value})});var mb=/^(?:focusinfocus|focusoutblur)$/;o.extend(o.event,{trigger:function(b,c,e,f){var g,h,i,j,l,m,n,p=[e||d],q=k.call(b,"type")?b.type:b,r=k.call(b,"namespace")?b.namespace.split("."):[];if(h=i=e=e||d,3!==e.nodeType&&8!==e.nodeType&&!mb.test(q+o.event.triggered)&&(q.indexOf(".")>-1&&(r=q.split("."),q=r.shift(),r.sort()),l=q.indexOf(":")<0&&"on"+q,b=b[o.expando]?b:new o.Event(q,"object"==typeof b&&b),b.isTrigger=f?2:3,b.namespace=r.join("."),b.rnamespace=b.namespace?new RegExp("(^|\\.)"+r.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,b.result=void 0,b.target||(b.target=e),c=null==c?[b]:o.makeArray(c,[b]),n=o.event.special[q]||{},f||!n.trigger||n.trigger.apply(e,c)!==!1)){if(!f&&!n.noBubble&&!o.isWindow(e)){for(j=n.delegateType||q,mb.test(j+q)||(h=h.parentNode);h;h=h.parentNode)p.push(h),i=h;i===(e.ownerDocument||d)&&p.push(i.defaultView||i.parentWindow||a)}g=0;while((h=p[g++])&&!b.isPropagationStopped())b.type=g>1?j:n.bindType||q,m=(R.get(h,"events")||{})[b.type]&&R.get(h,"handle"),m&&m.apply(h,c),m=l&&h[l],m&&m.apply&&P(h)&&(b.result=m.apply(h,c),b.result===!1&&b.preventDefault());return b.type=q,f||b.isDefaultPrevented()||n._default&&n._default.apply(p.pop(),c)!==!1||!P(e)||l&&o.isFunction(e[q])&&!o.isWindow(e)&&(i=e[l],i&&(e[l]=null),o.event.triggered=q,e[q](),o.event.triggered=void 0,i&&(e[l]=i)),b.result}},simulate:function(a,b,c){var d=o.extend(new o.Event,c,{type:a,isSimulated:!0});o.event.trigger(d,null,b),d.isDefaultPrevented()&&c.preventDefault()}}),o.fn.extend({trigger:function(a,b){return this.each(function(){o.event.trigger(a,b,this)})},triggerHandler:function(a,b){var c=this[0];return c?o.event.trigger(a,b,c,!0):void 0}}),o.each("blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu".split(" "),function(a,b){o.fn[b]=function(a,c){return arguments.length>0?this.on(b,null,a,c):this.trigger(b)}}),o.fn.extend({hover:function(a,b){return this.mouseenter(a).mouseleave(b||a)}}),l.focusin="onfocusin"in a,l.focusin||o.each({focus:"focusin",blur:"focusout"},function(a,b){var c=function(a){o.event.simulate(b,a.target,o.event.fix(a))};o.event.special[b]={setup:function(){var d=this.ownerDocument||this,e=R.access(d,b);e||d.addEventListener(a,c,!0),R.access(d,b,(e||0)+1)},teardown:function(){var d=this.ownerDocument||this,e=R.access(d,b)-1;e?R.access(d,b,e):(d.removeEventListener(a,c,!0),R.remove(d,b))}}});var nb=a.location,ob=o.now(),pb=/\?/;o.parseJSON=JSON.parse,o.parseXML=function(b){var c;if(!b||"string"!=typeof b)return null;try{c=(new a.DOMParser).parseFromString(b,"text/xml")}catch(d){c=void 0}return(!c||c.getElementsByTagName("parsererror").length)&&o.error("Invalid XML: "+b),c};var qb=/%20/g,rb=/#.*$/,sb=/([?&])_=[^&]*/,tb=/^(.*?):[ \t]*([^\r\n]*)$/gm,ub=/^(?:about|app|app-storage|.+-extension|file|res|widget):$/,vb=/^(?:GET|HEAD)$/,wb=/^\/\//,xb={},yb={},zb="*/".concat("*"),Ab=d.createElement("a");Ab.href=nb.href;function Bb(a){return function(b,c){"string"!=typeof b&&(c=b,b="*");var d,e=0,f=b.toLowerCase().match(H)||[];if(o.isFunction(c))while(d=f[e++])"+"===d[0]?(d=d.slice(1)||"*",(a[d]=a[d]||[]).unshift(c)):(a[d]=a[d]||[]).push(c)}}function Cb(a,b,c,d){var e={},f=a===yb;function g(h){var i;return e[h]=!0,o.each(a[h]||[],function(a,h){var j=h(b,c,d);return"string"!=typeof j||f||e[j]?f?!(i=j):void 0:(b.dataTypes.unshift(j),g(j),!1)}),i}return g(b.dataTypes[0])||!e["*"]&&g("*")}function Db(a,b){var c,d,e=o.ajaxSettings.flatOptions||{};for(c in b)void 0!==b[c]&&((e[c]?a:d||(d={}))[c]=b[c]);return d&&o.extend(!0,a,d),a}function Eb(a,b,c){var d,e,f,g,h=a.contents,i=a.dataTypes;while("*"===i[0])i.shift(),void 0===d&&(d=a.mimeType||b.getResponseHeader("Content-Type"));if(d)for(e in h)if(h[e]&&h[e].test(d)){i.unshift(e);break}if(i[0]in c)f=i[0];else{for(e in c){if(!i[0]||a.converters[e+" "+i[0]]){f=e;break}g||(g=e)}f=f||g}return f?(f!==i[0]&&i.unshift(f),c[f]):void 0}function Fb(a,b,c,d){var e,f,g,h,i,j={},k=a.dataTypes.slice();if(k[1])for(g in a.converters)j[g.toLowerCase()]=a.converters[g];f=k.shift();while(f)if(a.responseFields[f]&&(c[a.responseFields[f]]=b),!i&&d&&a.dataFilter&&(b=a.dataFilter(b,a.dataType)),i=f,f=k.shift())if("*"===f)f=i;else if("*"!==i&&i!==f){if(g=j[i+" "+f]||j["* "+f],!g)for(e in j)if(h=e.split(" "),h[1]===f&&(g=j[i+" "+h[0]]||j["* "+h[0]])){g===!0?g=j[e]:j[e]!==!0&&(f=h[0],k.unshift(h[1]));break}if(g!==!0)if(g&&a["throws"])b=g(b);else try{b=g(b)}catch(l){return{state:"parsererror",error:g?l:"No conversion from "+i+" to "+f}}}return{state:"success",data:b}}o.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:nb.href,type:"GET",isLocal:ub.test(nb.protocol),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":zb,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/\bxml\b/,html:/\bhtml/,json:/\bjson\b/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":o.parseJSON,"text xml":o.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(a,b){return b?Db(Db(a,o.ajaxSettings),b):Db(o.ajaxSettings,a)},ajaxPrefilter:Bb(xb),ajaxTransport:Bb(yb),ajax:function(b,c){"object"==typeof b&&(c=b,b=void 0),c=c||{};var e,f,g,h,i,j,k,l,m,n,p=o.ajaxSetup({},c),q=p.context||p,r=p.context&&(q.nodeType||q.jquery)?o(q):o.event,s=o.Deferred(),t=o.Callbacks("once memory"),u=p.statusCode||{},v={},w={},x="canceled",y={readyState:0,getResponseHeader:function(a){var b;if(k){if(!h){h={};while(b=tb.exec(g))h[b[1].toLowerCase()]=b[2]}b=h[a.toLowerCase()]}return null==b?null:b},getAllResponseHeaders:function(){return k?g:null},setRequestHeader:function(a,b){return null==k&&(a=w[a.toLowerCase()]=w[a.toLowerCase()]||a,v[a]=b),this},overrideMimeType:function(a){return null==k&&(p.mimeType=a),this},statusCode:function(a){var b;if(a)if(k)y.always(a[y.status]);else for(b in a)u[b]=[u[b],a[b]];return this},abort:function(a){var b=a||x;return e&&e.abort(b),A(0,b),this}};if(s.promise(y),p.url=((b||p.url||nb.href)+"").replace(wb,nb.protocol+"//"),p.type=c.method||c.type||p.method||p.type,p.dataTypes=o.trim(p.dataType||"*").toLowerCase().match(H)||[""],null==p.crossDomain){j=d.createElement("a");try{j.href=p.url,j.href=j.href,p.crossDomain=Ab.protocol+"//"+Ab.host!=j.protocol+"//"+j.host}catch(z){p.crossDomain=!0}}if(p.data&&p.processData&&"string"!=typeof p.data&&(p.data=o.param(p.data,p.traditional)),Cb(xb,p,c,y),k)return y;l=o.event&&p.global,l&&0===o.active++&&o.event.trigger("ajaxStart"),p.type=p.type.toUpperCase(),p.hasContent=!vb.test(p.type),f=p.url.replace(rb,""),p.hasContent?p.data&&p.processData&&0===(p.contentType||"").indexOf("application/x-www-form-urlencoded")&&(p.data=p.data.replace(qb,"+")):(n=p.url.slice(f.length),p.data&&(f+=(pb.test(f)?"&":"?")+p.data,delete p.data),p.cache===!1&&(f=f.replace(sb,""),n=(pb.test(f)?"&":"?")+"_="+ob++ +n),p.url=f+n),p.ifModified&&(o.lastModified[f]&&y.setRequestHeader("If-Modified-Since",o.lastModified[f]),o.etag[f]&&y.setRequestHeader("If-None-Match",o.etag[f])),(p.data&&p.hasContent&&p.contentType!==!1||c.contentType)&&y.setRequestHeader("Content-Type",p.contentType),y.setRequestHeader("Accept",p.dataTypes[0]&&p.accepts[p.dataTypes[0]]?p.accepts[p.dataTypes[0]]+("*"!==p.dataTypes[0]?", "+zb+"; q=0.01":""):p.accepts["*"]);for(m in p.headers)y.setRequestHeader(m,p.headers[m]);if(p.beforeSend&&(p.beforeSend.call(q,y,p)===!1||k))return y.abort();if(x="abort",t.add(p.complete),y.done(p.success),y.fail(p.error),e=Cb(yb,p,c,y)){if(y.readyState=1,l&&r.trigger("ajaxSend",[y,p]),k)return y;p.async&&p.timeout>0&&(i=a.setTimeout(function(){y.abort("timeout")},p.timeout));try{k=!1,e.send(v,A)}catch(z){if(k)throw z;A(-1,z)}}else A(-1,"No Transport");function A(b,c,d,h){var j,m,n,v,w,x=c;k||(k=!0,i&&a.clearTimeout(i),e=void 0,g=h||"",y.readyState=b>0?4:0,j=b>=200&&300>b||304===b,d&&(v=Eb(p,y,d)),v=Fb(p,v,y,j),j?(p.ifModified&&(w=y.getResponseHeader("Last-Modified"),w&&(o.lastModified[f]=w),w=y.getResponseHeader("etag"),w&&(o.etag[f]=w)),204===b||"HEAD"===p.type?x="nocontent":304===b?x="notmodified":(x=v.state,m=v.data,n=v.error,j=!n)):(n=x,(b||!x)&&(x="error",0>b&&(b=0))),y.status=b,y.statusText=(c||x)+"",j?s.resolveWith(q,[m,x,y]):s.rejectWith(q,[y,x,n]),y.statusCode(u),u=void 0,l&&r.trigger(j?"ajaxSuccess":"ajaxError",[y,p,j?m:n]),t.fireWith(q,[y,x]),l&&(r.trigger("ajaxComplete",[y,p]),--o.active||o.event.trigger("ajaxStop")))}return y},getJSON:function(a,b,c){return o.get(a,b,c,"json")},getScript:function(a,b){return o.get(a,void 0,b,"script")}}),o.each(["get","post"],function(a,b){o[b]=function(a,c,d,e){return o.isFunction(c)&&(e=e||d,d=c,c=void 0),o.ajax(o.extend({url:a,type:b,dataType:e,data:c,success:d},o.isPlainObject(a)&&a))}}),o._evalUrl=function(a){return o.ajax({url:a,type:"GET",dataType:"script",cache:!0,async:!1,global:!1,"throws":!0})},o.fn.extend({wrapAll:function(a){var b;return this[0]&&(o.isFunction(a)&&(a=a.call(this[0])),b=o(a,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&b.insertBefore(this[0]),b.map(function(){var a=this;while(a.firstElementChild)a=a.firstElementChild;return a}).append(this)),this},wrapInner:function(a){return o.isFunction(a)?this.each(function(b){o(this).wrapInner(a.call(this,b))}):this.each(function(){var b=o(this),c=b.contents();c.length?c.wrapAll(a):b.append(a)})},wrap:function(a){var b=o.isFunction(a);return this.each(function(c){o(this).wrapAll(b?a.call(this,c):a)})},unwrap:function(a){return this.parent(a).not("body").each(function(){o(this).replaceWith(this.childNodes)}),this}}),o.expr.filters.hidden=function(a){return!o.expr.filters.visible(a)},o.expr.filters.visible=function(a){return!!(a.offsetWidth||a.offsetHeight||a.getClientRects().length)};var Gb=/\[\]$/,Hb=/\r?\n/g,Ib=/^(?:submit|button|image|reset|file)$/i,Jb=/^(?:input|select|textarea|keygen)/i;function Kb(a,b,c,d){var e;if(o.isArray(b))o.each(b,function(b,e){c||Gb.test(a)?d(a,e):Kb(a+"["+("object"==typeof e&&null!=e?b:"")+"]",e,c,d)});else if(c||"object"!==o.type(b))d(a,b);else for(e in b)Kb(a+"["+e+"]",b[e],c,d)}o.param=function(a,b){var c,d=[],e=function(a,b){b=o.isFunction(b)?b():null==b?"":b,d[d.length]=encodeURIComponent(a)+"="+encodeURIComponent(b)};if(void 0===b&&(b=o.ajaxSettings&&o.ajaxSettings.traditional),o.isArray(a)||a.jquery&&!o.isPlainObject(a))o.each(a,function(){e(this.name,this.value)});else for(c in a)Kb(c,a[c],b,e);return d.join("&")},o.fn.extend({serialize:function(){return o.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var a=o.prop(this,"elements");return a?o.makeArray(a):this}).filter(function(){var a=this.type;return this.name&&!o(this).is(":disabled")&&Jb.test(this.nodeName)&&!Ib.test(a)&&(this.checked||!da.test(a))}).map(function(a,b){var c=o(this).val();return null==c?null:o.isArray(c)?o.map(c,function(a){return{name:b.name,value:a.replace(Hb,"\r\n")}}):{name:b.name,value:c.replace(Hb,"\r\n")}}).get()}}),o.ajaxSettings.xhr=function(){try{return new a.XMLHttpRequest}catch(b){}};var Lb={0:200,1223:204},Mb=o.ajaxSettings.xhr();l.cors=!!Mb&&"withCredentials"in Mb,l.ajax=Mb=!!Mb,o.ajaxTransport(function(b){var c,d;return l.cors||Mb&&!b.crossDomain?{send:function(e,f){var g,h=b.xhr();if(h.open(b.type,b.url,b.async,b.username,b.password),b.xhrFields)for(g in b.xhrFields)h[g]=b.xhrFields[g];b.mimeType&&h.overrideMimeType&&h.overrideMimeType(b.mimeType),b.crossDomain||e["X-Requested-With"]||(e["X-Requested-With"]="XMLHttpRequest");for(g in e)h.setRequestHeader(g,e[g]);c=function(a){return function(){c&&(c=d=h.onload=h.onerror=h.onabort=h.onreadystatechange=null,"abort"===a?h.abort():"error"===a?"number"!=typeof h.status?f(0,"error"):f(h.status,h.statusText):f(Lb[h.status]||h.status,h.statusText,"text"!==(h.responseType||"text")||"string"!=typeof h.responseText?{binary:h.response}:{text:h.responseText},h.getAllResponseHeaders()))}},h.onload=c(),d=h.onerror=c("error"),void 0!==h.onabort?h.onabort=d:h.onreadystatechange=function(){4===h.readyState&&a.setTimeout(function(){c&&d()})},c=c("abort");try{h.send(b.hasContent&&b.data||null)}catch(i){if(c)throw i}},abort:function(){c&&c()}}:void 0}),o.ajaxPrefilter(function(a){a.crossDomain&&(a.contents.script=!1)}),o.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/\b(?:java|ecma)script\b/},converters:{"text script":function(a){return o.globalEval(a),a}}}),o.ajaxPrefilter("script",function(a){void 0===a.cache&&(a.cache=!1),a.crossDomain&&(a.type="GET")}),o.ajaxTransport("script",function(a){if(a.crossDomain){var b,c;return{send:function(e,f){b=o("<script>").prop({charset:a.scriptCharset,src:a.url}).on("load error",c=function(a){b.remove(),c=null,a&&f("error"===a.type?404:200,a.type)}),d.head.appendChild(b[0])},abort:function(){c&&c()}}}});var Nb=[],Ob=/(=)\?(?=&|$)|\?\?/;o.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var a=Nb.pop()||o.expando+"_"+ob++;return this[a]=!0,a}}),o.ajaxPrefilter("json jsonp",function(b,c,d){var e,f,g,h=b.jsonp!==!1&&(Ob.test(b.url)?"url":"string"==typeof b.data&&0===(b.contentType||"").indexOf("application/x-www-form-urlencoded")&&Ob.test(b.data)&&"data");return h||"jsonp"===b.dataTypes[0]?(e=b.jsonpCallback=o.isFunction(b.jsonpCallback)?b.jsonpCallback():b.jsonpCallback,h?b[h]=b[h].replace(Ob,"$1"+e):b.jsonp!==!1&&(b.url+=(pb.test(b.url)?"&":"?")+b.jsonp+"="+e),b.converters["script json"]=function(){return g||o.error(e+" was not called"),g[0]},b.dataTypes[0]="json",f=a[e],a[e]=function(){g=arguments},d.always(function(){void 0===f?o(a).removeProp(e):a[e]=f,b[e]&&(b.jsonpCallback=c.jsonpCallback,Nb.push(e)),g&&o.isFunction(f)&&f(g[0]),g=f=void 0}),"script"):void 0}),l.createHTMLDocument=function(){var a=d.implementation.createHTMLDocument("").body;return a.innerHTML="<form></form><form></form>",2===a.childNodes.length}(),o.parseHTML=function(a,b,c){if("string"!=typeof a)return[];"boolean"==typeof b&&(c=b,b=!1),b=b||(l.createHTMLDocument?d.implementation.createHTMLDocument(""):d);var e=y.exec(a),f=!c&&[];return e?[b.createElement(e[1])]:(e=ka([a],b,f),f&&f.length&&o(f).remove(),o.merge([],e.childNodes))},o.fn.load=function(a,b,c){var d,e,f,g=this,h=a.indexOf(" ");return h>-1&&(d=o.trim(a.slice(h)),a=a.slice(0,h)),o.isFunction(b)?(c=b,b=void 0):b&&"object"==typeof b&&(e="POST"),g.length>0&&o.ajax({url:a,type:e||"GET",dataType:"html",data:b}).done(function(a){f=arguments,g.html(d?o("<div>").append(o.parseHTML(a)).find(d):a)}).always(c&&function(a,b){g.each(function(){c.apply(g,f||[a.responseText,b,a])})}),this},o.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],function(a,b){o.fn[b]=function(a){return this.on(b,a)}}),o.expr.filters.animated=function(a){return o.grep(o.timers,function(b){return a===b.elem}).length};function Pb(a){return o.isWindow(a)?a:9===a.nodeType&&a.defaultView}o.offset={setOffset:function(a,b,c){var d,e,f,g,h,i,j,k=o.css(a,"position"),l=o(a),m={};"static"===k&&(a.style.position="relative"),h=l.offset(),f=o.css(a,"top"),i=o.css(a,"left"),j=("absolute"===k||"fixed"===k)&&(f+i).indexOf("auto")>-1,j?(d=l.position(),g=d.top,e=d.left):(g=parseFloat(f)||0,e=parseFloat(i)||0),o.isFunction(b)&&(b=b.call(a,c,o.extend({},h))),null!=b.top&&(m.top=b.top-h.top+g),null!=b.left&&(m.left=b.left-h.left+e),"using"in b?b.using.call(a,m):l.css(m)}},o.fn.extend({offset:function(a){if(arguments.length)return void 0===a?this:this.each(function(b){o.offset.setOffset(this,a,b)});var b,c,d,e,f=this[0];if(f)return f.getClientRects().length?(d=f.getBoundingClientRect(),d.width||d.height?(e=f.ownerDocument,c=Pb(e),b=e.documentElement,{top:d.top+c.pageYOffset-b.clientTop,left:d.left+c.pageXOffset-b.clientLeft}):d):{top:0,left:0}},position:function(){if(this[0]){var a,b,c=this[0],d={top:0,left:0};return"fixed"===o.css(c,"position")?b=c.getBoundingClientRect():(a=this.offsetParent(),b=this.offset(),o.nodeName(a[0],"html")||(d=a.offset()),d.top+=o.css(a[0],"borderTopWidth",!0)-a.scrollTop(),d.left+=o.css(a[0],"borderLeftWidth",!0)-a.scrollLeft()),{top:b.top-d.top-o.css(c,"marginTop",!0),left:b.left-d.left-o.css(c,"marginLeft",!0)}}},offsetParent:function(){return this.map(function(){var a=this.offsetParent;while(a&&"static"===o.css(a,"position"))a=a.offsetParent;return a||Ha})}}),o.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(a,b){var c="pageYOffset"===b;o.fn[a]=function(d){return O(this,function(a,d,e){var f=Pb(a);return void 0===e?f?f[b]:a[d]:void(f?f.scrollTo(c?f.pageXOffset:e,c?e:f.pageYOffset):a[d]=e)},a,d,arguments.length)}}),o.each(["top","left"],function(a,b){o.cssHooks[b]=Ja(l.pixelPosition,function(a,c){return c?(c=Ia(a,b),Fa.test(c)?o(a).position()[b]+"px":c):void 0})}),o.each({Height:"height",Width:"width"},function(a,b){o.each({padding:"inner"+a,content:b,"":"outer"+a},function(c,d){o.fn[d]=function(e,f){var g=arguments.length&&(c||"boolean"!=typeof e),h=c||(e===!0||f===!0?"margin":"border");return O(this,function(b,c,e){var f;return o.isWindow(b)?0===d.indexOf("outer")?b["inner"+a]:b.document.documentElement["client"+a]:9===b.nodeType?(f=b.documentElement,Math.max(b.body["scroll"+a],f["scroll"+a],b.body["offset"+a],f["offset"+a],f["client"+a])):void 0===e?o.css(b,c,h):o.style(b,c,e,h)},b,g?e:void 0,g)}})}),o.fn.extend({bind:function(a,b,c){return this.on(a,null,b,c)},unbind:function(a,b){return this.off(a,null,b)},delegate:function(a,b,c,d){return this.on(b,a,c,d)},undelegate:function(a,b,c){return 1===arguments.length?this.off(a,"**"):this.off(b,a||"**",c)}}),"function"==typeof define&&define.amd&&define("jquery",[],function(){return o});var Qb=a.jQuery,Rb=a.$;return o.noConflict=function(b){return a.$===o&&(a.$=Rb),b&&a.jQuery===o&&(a.jQuery=Qb),o},b||(a.jQuery=a.$=o),o});
;
// jQuery Selector Cache
!function(n,r){var $={};$$=function(u){var t=$[u];return t!==r?t:$[u]=n(u)},$$.clear=function(n){$[n]=r},$$.fresh=function(n){return $[n]=r,$$(n)}}(jQuery);
;
!function(){"use strict";function t(e,o){function i(t,e){return function(){return t.apply(e,arguments)}}var r;if(o=o||{},this.trackingClick=!1,this.trackingClickStart=0,this.targetElement=null,this.touchStartX=0,this.touchStartY=0,this.lastTouchIdentifier=0,this.touchBoundary=o.touchBoundary||10,this.layer=e,this.tapDelay=o.tapDelay||200,this.tapTimeout=o.tapTimeout||700,!t.notNeeded(e)){for(var a=["onMouse","onClick","onTouchStart","onTouchMove","onTouchEnd","onTouchCancel"],c=this,s=0,u=a.length;u>s;s++)c[a[s]]=i(c[a[s]],c);n&&(e.addEventListener("mouseover",this.onMouse,!0),e.addEventListener("mousedown",this.onMouse,!0),e.addEventListener("mouseup",this.onMouse,!0)),e.addEventListener("click",this.onClick,!0),e.addEventListener("touchstart",this.onTouchStart,!1),e.addEventListener("touchmove",this.onTouchMove,!1),e.addEventListener("touchend",this.onTouchEnd,!1),e.addEventListener("touchcancel",this.onTouchCancel,!1),Event.prototype.stopImmediatePropagation||(e.removeEventListener=function(t,n,o){var i=Node.prototype.removeEventListener;"click"===t?i.call(e,t,n.hijacked||n,o):i.call(e,t,n,o)},e.addEventListener=function(t,n,o){var i=Node.prototype.addEventListener;"click"===t?i.call(e,t,n.hijacked||(n.hijacked=function(t){t.propagationStopped||n(t)}),o):i.call(e,t,n,o)}),"function"==typeof e.onclick&&(r=e.onclick,e.addEventListener("click",function(t){r(t)},!1),e.onclick=null)}}var e=navigator.userAgent.indexOf("Windows Phone")>=0,n=navigator.userAgent.indexOf("Android")>0&&!e,o=/iP(ad|hone|od)/.test(navigator.userAgent)&&!e,i=o&&/OS 4_\d(_\d)?/.test(navigator.userAgent),r=o&&/OS [6-7]_\d/.test(navigator.userAgent),a=navigator.userAgent.indexOf("BB10")>0;t.prototype.needsClick=function(t){switch(t.nodeName.toLowerCase()){case"button":case"select":case"textarea":if(t.disabled)return!0;break;case"input":if(o&&"file"===t.type||t.disabled)return!0;break;case"label":case"iframe":case"video":return!0}return/\bneedsclick\b/.test(t.className)},t.prototype.needsFocus=function(t){switch(t.nodeName.toLowerCase()){case"textarea":return!0;case"select":return!n;case"input":switch(t.type){case"button":case"checkbox":case"file":case"image":case"radio":case"submit":return!1}return!t.disabled&&!t.readOnly;default:return/\bneedsfocus\b/.test(t.className)}},t.prototype.sendClick=function(t,e){var n,o;document.activeElement&&document.activeElement!==t&&document.activeElement.blur(),o=e.changedTouches[0],n=document.createEvent("MouseEvents"),n.initMouseEvent(this.determineEventType(t),!0,!0,window,1,o.screenX,o.screenY,o.clientX,o.clientY,!1,!1,!1,!1,0,null),n.forwardedTouchEvent=!0,t.dispatchEvent(n)},t.prototype.determineEventType=function(t){return n&&"select"===t.tagName.toLowerCase()?"mousedown":"click"},t.prototype.focus=function(t){var e;o&&t.setSelectionRange&&0!==t.type.indexOf("date")&&"time"!==t.type&&"month"!==t.type?(e=t.value.length,t.setSelectionRange(e,e)):t.focus()},t.prototype.updateScrollParent=function(t){var e,n;if(e=t.fastClickScrollParent,!e||!e.contains(t)){n=t;do{if(n.scrollHeight>n.offsetHeight){e=n,t.fastClickScrollParent=n;break}n=n.parentElement}while(n)}e&&(e.fastClickLastScrollTop=e.scrollTop)},t.prototype.getTargetElementFromEventTarget=function(t){return t.nodeType===Node.TEXT_NODE?t.parentNode:t},t.prototype.onTouchStart=function(t){var e,n,r;if(t.targetTouches.length>1)return!0;if(e=this.getTargetElementFromEventTarget(t.target),n=t.targetTouches[0],o){if(r=window.getSelection(),r.rangeCount&&!r.isCollapsed)return!0;if(!i){if(n.identifier&&n.identifier===this.lastTouchIdentifier)return t.preventDefault(),!1;this.lastTouchIdentifier=n.identifier,this.updateScrollParent(e)}}return this.trackingClick=!0,this.trackingClickStart=t.timeStamp,this.targetElement=e,this.touchStartX=n.pageX,this.touchStartY=n.pageY,t.timeStamp-this.lastClickTime<this.tapDelay&&t.preventDefault(),!0},t.prototype.touchHasMoved=function(t){var e=t.changedTouches[0],n=this.touchBoundary;return Math.abs(e.pageX-this.touchStartX)>n||Math.abs(e.pageY-this.touchStartY)>n?!0:!1},t.prototype.onTouchMove=function(t){return this.trackingClick?((this.targetElement!==this.getTargetElementFromEventTarget(t.target)||this.touchHasMoved(t))&&(this.trackingClick=!1,this.targetElement=null),!0):!0},t.prototype.findControl=function(t){return void 0!==t.control?t.control:t.htmlFor?document.getElementById(t.htmlFor):t.querySelector("button, input:not([type=hidden]), keygen, meter, output, progress, select, textarea")},t.prototype.onTouchEnd=function(t){var e,a,c,s,u,l=this.targetElement;if(!this.trackingClick)return!0;if(t.timeStamp-this.lastClickTime<this.tapDelay)return this.cancelNextClick=!0,!0;if(t.timeStamp-this.trackingClickStart>this.tapTimeout)return!0;if(this.cancelNextClick=!1,this.lastClickTime=t.timeStamp,a=this.trackingClickStart,this.trackingClick=!1,this.trackingClickStart=0,r&&(u=t.changedTouches[0],l=document.elementFromPoint(u.pageX-window.pageXOffset,u.pageY-window.pageYOffset)||l,l.fastClickScrollParent=this.targetElement.fastClickScrollParent),c=l.tagName.toLowerCase(),"label"===c){if(e=this.findControl(l)){if(this.focus(l),n)return!1;l=e}}else if(this.needsFocus(l))return t.timeStamp-a>100||o&&window.top!==window&&"input"===c?(this.targetElement=null,!1):(this.focus(l),this.sendClick(l,t),o&&"select"===c||(this.targetElement=null,t.preventDefault()),!1);return o&&!i&&(s=l.fastClickScrollParent,s&&s.fastClickLastScrollTop!==s.scrollTop)?!0:(this.needsClick(l)||(t.preventDefault(),this.sendClick(l,t)),!1)},t.prototype.onTouchCancel=function(){this.trackingClick=!1,this.targetElement=null},t.prototype.onMouse=function(t){return this.targetElement?t.forwardedTouchEvent?!0:t.cancelable&&(!this.needsClick(this.targetElement)||this.cancelNextClick)?(t.stopImmediatePropagation?t.stopImmediatePropagation():t.propagationStopped=!0,t.stopPropagation(),t.preventDefault(),!1):!0:!0},t.prototype.onClick=function(t){var e;return this.trackingClick?(this.targetElement=null,this.trackingClick=!1,!0):"submit"===t.target.type&&0===t.detail?!0:(e=this.onMouse(t),e||(this.targetElement=null),e)},t.prototype.destroy=function(){var t=this.layer;n&&(t.removeEventListener("mouseover",this.onMouse,!0),t.removeEventListener("mousedown",this.onMouse,!0),t.removeEventListener("mouseup",this.onMouse,!0)),t.removeEventListener("click",this.onClick,!0),t.removeEventListener("touchstart",this.onTouchStart,!1),t.removeEventListener("touchmove",this.onTouchMove,!1),t.removeEventListener("touchend",this.onTouchEnd,!1),t.removeEventListener("touchcancel",this.onTouchCancel,!1)},t.notNeeded=function(t){var e,o,i,r;if("undefined"==typeof window.ontouchstart)return!0;if(o=+(/Chrome\/([0-9]+)/.exec(navigator.userAgent)||[,0])[1]){if(!n)return!0;if(e=document.querySelector("meta[name=viewport]")){if(-1!==e.content.indexOf("user-scalable=no"))return!0;if(o>31&&document.documentElement.scrollWidth<=window.outerWidth)return!0}}if(a&&(i=navigator.userAgent.match(/Version\/([0-9]*)\.([0-9]*)/),i[1]>=10&&i[2]>=3&&(e=document.querySelector("meta[name=viewport]")))){if(-1!==e.content.indexOf("user-scalable=no"))return!0;if(document.documentElement.scrollWidth<=window.outerWidth)return!0}return"none"===t.style.msTouchAction||"manipulation"===t.style.touchAction?!0:(r=+(/Firefox\/([0-9]+)/.exec(navigator.userAgent)||[,0])[1],r>=27&&(e=document.querySelector("meta[name=viewport]"),e&&(-1!==e.content.indexOf("user-scalable=no")||document.documentElement.scrollWidth<=window.outerWidth))?!0:"none"===t.style.touchAction||"manipulation"===t.style.touchAction?!0:!1)},t.attach=function(e,n){return new t(e,n)},"function"==typeof define&&"object"==typeof define.amd&&define.amd?define(function(){return t}):"undefined"!=typeof module&&module.exports?(module.exports=t.attach,module.exports.FastClick=t):window.FastClick=t}(),jQuery(function(){FastClick.attach(document.body)});;
// Browser selector <html> tag
function css_browser_selector(u){var ua=u.toLowerCase(),is=function(t){return ua.indexOf(t)>-1},g='gecko',w='webkit',s='safari',o='opera',m='mobile',h=document.documentElement,b=[(!(/opera|webtv/i.test(ua))&&/msie\s(\d)/.test(ua))?('ie ie'+RegExp.$1):is('firefox/2')?g+' ff2':is('firefox/3.5')?g+' ff3 ff3_5':is('firefox/3.6')?g+' ff3 ff3_6':is('firefox/3')?g+' ff3':is('gecko/')?g:is('opera')?o+(/version\/(\d+)/.test(ua)?' '+o+RegExp.$1:(/opera(\s|\/)(\d+)/.test(ua)?' '+o+RegExp.$2:'')):is('konqueror')?'konqueror':is('blackberry')?m+' blackberry':is('android')?m+' android':is('chrome')?w+' chrome':is('iron')?w+' iron':is('applewebkit/')?w+' '+s+(/version\/(\d+)/.test(ua)?' '+s+RegExp.$1:''):is('mozilla/')?g:'',is('j2me')?m+' j2me':is('iphone')?m+' iphone':is('ipod')?m+' ipod':is('ipad')?m+' ipad':is('mac')?'mac':is('darwin')?'mac':is('webtv')?'webtv':is('win')?'win'+(is('windows nt 6.0')?' vista':''):is('freebsd')?'freebsd':(is('x11')||is('linux'))?'linux':'','js']; c = b.join(' '); h.className += ' '+c; return c;}; css_browser_selector(navigator.userAgent);
;
(function(){var A,l,q,n,r,t,I,B,J,C,K,D,L,E,M,F,N,x,k,p,y,v,G,H,w,z,h,u;D=function(a){var b;1<a.length?"radio"===a[0].type||"checkbox"===a[0].type?(b=a,a=[],Object.keys(b).forEach(function(c){if(!isNaN(parseFloat(c)))return a.push(b[c])})):(u("onlyOneDOMElement"),a=a[0]):a=a[0];return a};K=function(a){w.jQuery&&a instanceof jQuery&&(a=D(a),a.length&&(a=a[0]));return a};I=function(){var a;a=document.createEvent("Event");a.initEvent("change",!0,!1);a.fromSimplyBind=!0;return a};L=function(){return"sb_"+
Math.floor(1E12*(1+Math.random())).toString(16)};N=function(a){a=typeof a;return"string"===a||"number"===a};F=function(a){return a instanceof l};t={object:{set:function(a){var b,c;c="Event"===a.type?a.property+"#"+a.eventName:a.property;b=n.objects.indexOf(a.object);return-1===b?(b={},b[c]=a.ID,n.objects.push(a.object),n.props.push(b)):n.props[b][c]=a.ID},get:function(a){var b;b="Event"===a.type?a.property+"#"+a.eventName:a.property;a=n.objects.indexOf(a.object);if(-1!==a&&(a=n.props[a],null!=a[b]))return r[a[b]]}},
"function":{set:function(a){n.fns.push(a.object);return n.fnIDs.push(a.ID)},get:function(a){a=n.fns.indexOf(a.object);if(-1!==a)return r[n.fnIDs[a]]}},external:{set:function(a){n.external.push(a.object+":"+a.property+"#"+JSON.stringify(a.reqOptions));return n.externalOpts.push(a.ID)},get:function(a){a=n.external.indexOf(a.object+":"+a.property+"#"+JSON.stringify(a.reqOptions));if(-1!==a)return r[n.externalOpts[a]]}},textNodes:{nodes:[],nodeValues:[],set:function(a,b,c){if(-1===this.nodes.indexOf(a))return this.nodes.push(a),
this.nodeValues.push([b,c])},get:function(a){a=this.nodes.indexOf(a);if(-1!==a)return this.nodeValues[a]}}};y=null;H=function(){return y=new RegExp(v.start+"([^"+v.end+"]+)"+v.end,"g")};z=function(a,b){var c,d;d=E();c=b?a:C[a];throw Error("SimplyBind: "+(c+("\n\nCall Source:\n"+d)));};u=function(a){var b;if(!p.silent)return b=E(),a=C[a],console.log("SimplyBind: "+(a+("\n\nCall Source:\n"+b)))};h=function(a){return z("You can't use/invoke ."+a+"() at this stage",!0)};E=function(){return Error().stack.split("\n").slice(3,
10).map(function(a){return a.replace(J,function(a,c,d){return"@ "+d})}).join("\n")};J=/[@(?:\wat\s)](.*)\/(.+)$/;C={invalidParamName:"SimplyBind() and .to() only accept a function, a bound object, a string, or a number.",transformFn:"You can only pass a function to the .tranform/All() method",badObject:"You can only pass a non-primitive object to .of()",badEventArg:"Invalid argument number in .ofEvent()",onlyOneDOMElement:"You can only pass 1 DOM element to SimplyBind unless it's a collection of radio/checkbox inputs",
emptyElList:"You can't bind an empty element list to anything..."};w={jQuery:"undefined"!==typeof jQuery&&null!==jQuery};p={silent:!1,liveProps:!0,dispatchEvents:!1,updateEvenIfUndefined:!1,updateEvenIfSame:!1,invokeOnBind:!0,mutateInherited:!1,mutateArrayMethods:!0,cacheRequests:!0,ignoreCase:!1,placeholderStart:"{{",placeholderEnd:"}}"};v={start:"\\{\\{",end:"\\}\\}"};H();n={objects:[],props:[],fns:[],fnIDs:[],external:[],externalOpts:[]};r={};G={};q=function(a,b){if(!a&&0!==a||!N(a)&&"function"!==
typeof a)F(a)||z("invalidParamName");return"object"===typeof a?new l(a._,1,a.placeholder):new A(a,b)};A=function(a,b){var c,d;this.ID=this.type=null;this.selector=this.property=a;this.value=this.valueOriginal=null;this.deps=[];this.depsBothWays=[];this.depsPholders={};this.transforms={};this.attachedEvents=[];this.customEventMethod={};if("function"===typeof a){this.setType("Func");c=this.setObject("function",a,b);if(c instanceof l)return c;d=1}else"number"===typeof this.selector&&(this.selector=this.selector.toString()),
p.ignoreCase&&(this.selector=this.property=this.selector.toLowerCase(),"textcontent"===this.selector&&(this.selector=this.property="textContent")),-1!==this.selector.indexOf(":")&&(c=this.property.split(":"),this.descriptor=c[0],this.property=c[1]),-1!==this.selector.indexOf(".")&&(c=this.property.split("."),this.property=c[0],this.placeholder=c.slice(1).join("."));return new l(this,d,this.placeholder)};l=function(a,b,c,d,e,g){var f;this.placeholder=c;this.stage=b||0;this.proxied=d;this.proxies=e&&
e.length?e:d?[d]:[];this.has=g?g:{tf:!1,massTf:!1,initBind:!1,interval:!1,event:!1};f=this;return Object.defineProperties(this,{ID:{get:function(){return a.ID}},value:{get:function(){return a.value}},original:{get:function(){return a.objects||a.object}},dependents:{get:function(){return a.deps.slice().map(function(a){return a.original})}},"new":{value:function(b,c,d){return new l(a,b,f.placeholder,c||f.proxied,d||f.proxies,f.has)}},_:{value:a}})};A.prototype={setObject:function(a,b,c,d,e){var g,f,
m,k,h;h=1;F(b)&&(b=b.original);if(w.jQuery&&b instanceof jQuery&&(f=!0,this.object=b=D(b),!b))return this.stage=0,u("emptyElList");if(b instanceof NodeList||b instanceof HTMLCollection||f&&Array.isArray(b)){if(0===b.length)return this.stage=0,u("emptyElList");this.object=null;k=this.objects=[].slice.call(b);b=0;for(f=k.length;b<f;b++)m=k[b],m.checked&&(this.object=m);this.object||(this.object=this.objects[0]);b=this.object}this.object=b;if("external"===a){this.type="Ajax";b={method:d};if(e)for(g in e)f=
e[g],b[g]=f;this.reqOptions=b;"POST"===d&&(h=3)}if(d=t[a].get(this))return this.placeholder&&!d.values&&(d.valueOriginal=d.fetchDirectValue(),d.scanForPholders()),new l(d,h,this.placeholder);this.isDom=this.object.nodeName&&1===this.object.nodeType;"Event"!==this.type&&(c=this.fetchDirectValue(null,c),this.isDom&&"value"!==this.property&&"textContent"!==this.property&&!this.descriptor&&(c=this.fetchDirectValue("DOMAttr")),"undefined"===typeof c&&"object"===a&&(this.object[this.property]=c=null),this.value=
this.valueOriginal=c,this.placeholder&&"object"===a&&!this.values&&this.scanForPholders());this.setID();this.setType();this.makePropertyLive();this.attachEvents();return t[a].set(this)},setEvent:function(a,b,c){isNaN(parseInt(this.property))&&u("badEventArg");this.type="Event";this.eventName=a;b&&(this.customEventMethod["in"]=b);if(c)return this.customEventMethod.out=c},processTransformCall:function(a,b){var c,d,e;if("function"!==typeof a)return u("transformFn");c=0;for(d=b.length;c<d;c++)e=b[c],
e=e._,this.addTransform(e.ID,a),-1!==this.depsBothWays.indexOf(e)&&e.addTransform(this.ID,a);this.updateDeps(this.ID,!0,!0);return!0},destroy:function(){var a,b,c,d,e;delete r[this.ID];if("Object"===this.type||"DOMProp"===this.type||"DOMText"===this.type)return Object.defineProperty(this.object,this.property,{value:this.value});if("Event"===this.type){d=this.attachedEvents;e=[];b=0;for(c=d.length;b<c;b++)a=d[b],e.push(this.unRegisterEvent(a,this.customEventMethod.remove));return e}},setID:function(){this.ID=
L();return r[this.ID]=this},setType:function(a){if(!this.type&&(this.type=a||"Object",this.isDom))return"value"===this.property?this.type="DOMValue":"textContent"===this.property?this.type="DOMText":"prop"===this.descriptor?this.type="DOMProp":this.type="DOMAttr"},scanForPholders:function(){this.values||(this.values={});this.regEx||(this.regEx=y);this.value=this.valueOriginal.replace(y,function(a){return function(b,c){return a.values[c]=""}}(this));if(this.isDom&&"textContent"===this.property)return this.scanTextNodesPlaceholders()},
attachEvents:function(){var a,b,c;if("Event"===this.type)return this.registerEvent(this.eventName,this.customEventMethod["in"]);if("DOMValue"===this.type||"DOMText"===this.type)if(a=this,b=function(b){if(!b.fromSimplyBind)return a.setValue(b.target.value)},c=this.objects?this.objects[0].nodeName.toUpperCase():this.object.nodeName.toUpperCase(),"INPUT"===c||"TEXTAREA"===c||"SELECT"===c){if("radio"===this.object.type||"checkbox"===this.object.type)return this.objects.forEach(function(a){return a.addEventListener("change",
b,!1)});this.object.addEventListener("input",b,!1);return this.object.addEventListener("change",b,!1)}},scanTextNodesPlaceholders:function(a){var b,c,d,e,g,f,m;null==a&&(a=this.object);f=a.childNodes;a=0;for(d=f.length;a<d;a++)e=f[a],3!==e.nodeType?this.scanTextNodesPlaceholders(e):t.textNodes.get(e)||(g=e.textContent,c=!1,m={},b=this,g.replace(this.regEx,function(a,d){c=!0;return m[d]=b.values[d]}),c||(m=null),t.textNodes.set(e,g,m))},getNodeFullValue:function(a,b,c){var d;return(a=t.textNodes.get(a))?
(d=a[1],a=a[0],d?(d[b]=c,a.replace(this.regEx,function(a,b){return d[b]})):a):!1},fetchDirectValue:function(a,b){null==a&&(a=this.type);switch(a){case "Func":if(!b)return this.object();break;case "Ajax":if(!b)return this.networkReq();break;case "DOMAttr":return this.object.getAttribute(this.property)||"";default:return this.object[this.property]}},applyTextContentReplace:function(a,b,c){var d,e,g,f,m;if(this.placeholder){f=a.childNodes;m=[];a=0;for(d=f.length;a<d;a++)g=f[a],3!==g.nodeType?m.push(this.applyTextContentReplace(g,
b,c)):(e=this.getNodeFullValue(g,b,c))?m.push(g.textContent=e):m.push(void 0);return m}return a.textContent=this.value},setValue:function(a,b,c,d,e){var g,f;g=b?this.values[b]:this.value;if(c!==this.ID&&(a!==g||p.updateEvenIfSame)){c||(c=this.ID);if("undefined"!==typeof a||p.updateEvenIfUndefined)b?(this.values[b]=f=a,this.value=a=this.applyPlaceholders()):this.value=a,this.arrayMethodsMutated?this.setArrayMethods():this.needsManualUpdate&&"Object"===this.type?this.object[this.property]=a:"Func"===
this.type?(b=this.valuePassed,this.valuePassed=a,this.value=this.object(a,b)):"Ajax"===this.type?(this.reqOptions.data=a,this.networkReq(c,d)):"Event"===this.type?e||(this.emitCauser=c,this.emitEvent(a),this.emitCauser=null):"DOMValue"===this.type?this.objects?this.objects.forEach(function(b){return b.value===a?b.checked=!0:b.checked=!1}):(this.object.value=this.value,p.dispatchEvents&&this.object.dispatchEvent(I())):"DOMProp"===this.type?this.inheritedOverriden||(this.object[this.property]=this.value):
"DOMAttr"===this.type?this.object.setAttribute(this.property,this.value):"DOMText"===this.type&&this.applyTextContentReplace(this.object,b,f);if("Ajax"!==this.type)return this.updateDeps(c,d)}},updateDeps:function(a,b,c){var d,e,g,f,m,k,h;if(this.deps.length&&("Event"!==this.type||null!==this.value))for(h=this.deps,m=0,k=h.length;m<k;m++)e=h[m],b&&-1!==this.depsBothWays.indexOf(e)||e.ID===this.emitCauser||(d=(g=e.depsPholders[this.ID])?this.values[g]:this.value,f=(g=this.depsPholders[e.ID])?e.values[g]:
e.value,d=this.applyTransform(e,d,f),c&&"Func"===e.type&&!p.invokeOnBind||e.setValue(d,g,a||this.ID,!0))},applyPlaceholders:function(){var a;a=this;return this.valueOriginal.replace(this.regEx,function(b,c){return a.values[c]})},applyTransform:function(a,b,c){return null!=this.transforms[a.ID]?this.transforms[a.ID](b,c):b},makePropertyLive:function(){var a,b,c,d,e,g,f;if(("Object"===this.type||"DOMProp"===this.type)&&p.liveProps)return b=this.object.propertyIsEnumerable(this.property),e=p.mutateInherited||
b,a=this,e?(e=Object.getOwnPropertyDescriptor(this.object,this.property),c=(null!=e?null!=(g=e.get)?g.bind(this.object):void 0:void 0)||function(){return a.value},d=(null!=e?null!=(f=e.set)?f.bind(this.object):void 0:void 0)||function(){},Object.defineProperty(this.object,this.property,{configurable:!0,enumerable:null!=e?e.enumerable:void 0,get:function(){return c()},set:function(b){a.setValue(b);return d(b)}}),b||(this.inheritedOverriden=!0)):this.needsManualUpdate=!0,this.setArrayMethods()},setArrayMethods:function(){var a;
if(p.mutateArrayMethods&&Array.isArray(this.value))return this.arrayMethodsMutated=!0,a=this,["push","pop","shift","unshift","splice"].forEach(function(b){return Object.defineProperty(a.value,b,{configurable:!0,value:function(){var c;c=Array.prototype[b].apply(a.value,arguments);a.updateDeps();return c}})})},invokeEventMethod:function(a,b,c){var d;d=this.object;if(this.isDom&&w.jQuery&&"on"===b||"off"===b)d=jQuery(this.object);d[b]||(b=c);this.eventHandler||(this.eventHandler=M.bind(this));return"function"===
typeof d[b]?d[b](a,this.eventHandler):void 0},emitEvent:function(a){var b,c;c=this.object;b=this.customEventMethod.out||"dispatchEvent";this.isDom&&w.jQuery&&"trigger"===b&&(c=jQuery(this.object));c[b]||(b="dispatchEvent");return"dispatchEvent"===b?(this.eventObject||(this.eventObject=document.createEvent("Event"),this.eventObject.initEvent(this.eventName,!0,!0)),a!==this.eventObject&&(this.eventObject.boundData=a),c[b](this.eventObject)):c[b](this.eventName,a)},networkReq:function(a,b){var c,d,e,
g,f,h,k,l;k=this.object+":"+this.selector+"#"+this.reqOptions.method;f=G[k];h=null!=f?f.date:void 0;d=function(c){return function(){return c.updateDeps(a,b)}}(this);if(h&&h!==this.lastReq&&p.cacheRequests)this.value=f.data,"*"!==this.property&&(this.value=this.value[this.property]),d();else try{this.lastReq=Date.now();this.reqOptions.data&&(c=JSON.stringify(this.reqOptions.data));this.xhr=new XMLHttpRequest;this.xhr.open(this.reqOptions.method.toUpperCase(),this.object,!0);g=this.reqOptions.headers;
for(e in g)l=g[e],this.xhr.setRequestHeader(e,l);this.xhr.onreadystatechange=function(a){return function(){var b;if(4===a.xhr.readyState){if(a.value=b=a.xhr.responseText)try{a.value=JSON.parse(b),"*"!==a.property&&(a.value=a.value[a.property])}catch(c){}G[k]={date:a.lastReq,data:a.value};return d()}}}(this);this.xhr.send(c)}catch(n){}},addDep:function(a,b,c){-1===this.deps.indexOf(a._)&&this.deps.push(a._);a.placeholder&&(this.depsPholders[a.ID]=a.placeholder);c?-1===this.depsBothWays.indexOf(a._)&&
this.depsBothWays.push(a._):-1!==a._.deps.indexOf(this)&&(a._.addDep(b,a,!0),this.addDep(a,b,!0));return this},removeDep:function(a,b){var c;c=this.deps.indexOf(a);-1!==c&&(this.deps.splice(c,1),delete this.depsPholders[a.ID]);if(b&&(a.removeDep(this),c=this.depsBothWays.indexOf(a),-1!==c))return this.depsBothWays.splice(c,1)},removeAllDeps:function(a){var b,c,d,e;e=this.deps.slice();c=0;for(d=e.length;c<d;c++)b=e[c],this.removeDep(b,a);if(a)return this.destroy()},addTransform:function(a,b){return this.transforms[a]=
b},registerEvent:function(a,b){if(-1===this.attachedEvents.indexOf(a))return this.attachedEvents.push(a),this.invokeEventMethod(a,b||"addEventListener","addEventListener")},unRegisterEvent:function(a,b){var c;c=this.attachedEvents.indexOf(a);if(-1!==c)return this.attachedEvents.splice(c,1),this.invokeEventMethod(a,b||"removeEventListener","removeEventListener")},addPollInterval:function(a){return this.pollInterval=setInterval(function(a){return function(){var c;c=a.fetchDirectValue();if(c!==a.value)return a.setValue(c)}}(this),
a)},removePollInterval:function(){clearInterval(this.pollInterval);return this.pollInterval=null}};M=function(){var a;a="Event"===this.type?arguments[this.property]:this.fetchDirectValue();return this.setValue(a,null,null,null,!0)};l.prototype={of:function(a){var b,c;0!==this.stage&&2!==this.stage&&h(k[0]);"object"!==typeof a&&"function"!==typeof a&&z("badObject");0===this.stage?c=this._.setObject("object",a):(b=this.proxies.indexOf(this.proxied),this.proxied=this.proxied.of(a),this.proxies[b]=this.proxied,
this.has.initBind=!0,this.has.tf=!1,this._.addDep(this.proxied,this),x(this));return c instanceof l?c:this["new"](this.stage+1)},ofEvent:function(a,b,c){(0!==this.stage||this.has.event)&&h(k[1]);if(!a||"string"!==typeof a)return this;this._.setEvent(a,b,c);this.has.event=!0;return this["new"](0)},ofExternal:function(a,b,c){(0!==this.stage||this.has.event)&&h(k[2]);if(b&&"object"!==typeof b||!a||"string"!==typeof a)return this;a=this._.setObject("external",a,c,c?"POST":"GET",b);return a instanceof
l?a:this["new"](1)},to:function(a){(1!==this.stage||this.has.initBind)&&h(k[3]);if(null==a)return this;this.proxied=B(this,a);0===this.proxied.stage?a=2:(a=3,this.has.initBind=!0);return this["new"](a)},and:function(a){3===this.stage&&this.has.initBind&&!this.has.massTf||h(k[4]);if(null==a)return this;this.proxied=B(this,a);this.proxies=this.proxies.concat(this.proxied);0===this.proxied.stage?a=2:(a=3,this.has.tf=!1);return this["new"](a)},toExternal:function(a,b){1!==this.stage&&h(k[5]);if(b&&"object"!==
typeof b||!a||"string"!==typeof a)return this;this.proxied=q("*").ofExternal(a,b,!0);this._.addDep(this.proxied,this);this.has.initBind=!0;x(this);return this["new"](3,this.proxied)},toEvent:function(a,b,c){1!==this.stage&&h(k[1]);if(!a||"string"!==typeof a)return this;this.proxied=q(0).ofEvent(a,c,b);this._.addDep(this.proxied,this);return this["new"](2)},set:function(a){0!==this.stage&&2!==this.stage||h(k[6]);this._.setValue(a,this.placeholder);return this},get:function(){0!==this.stage&&2!==this.stage||
h(k[7]);return this.placeholder?this._.values[this.placeholder]:this._.value},transform:function(a){(3!==this.stage||this.has.tf||this.has.massTf)&&h(k[8]);this.has.tf=this._.processTransformCall(a,[this.proxied])||!1;return this["new"](3)},transformAll:function(a){(3!==this.stage||this.has.tf||this.has.massTf)&&h(k[9]);this.has.massTf=this._.processTransformCall(a,this.proxies)||!1;return this["new"](3)},bothWays:function(a){var b,c;(3!==this.stage||this.has.massTf)&&h(k[10]);b=this.proxied._.addDep(this,
this.proxied,!0);((c=this._.transforms[this.proxied.ID])||a)&&(c="function"===typeof a?a:c)&&!1!==a&&b.addTransform(this.ID,c);this._.addDep(this.proxied,this,!0);return this},unBind:function(a){3!==this.stage&&h(k[11]);this._.removeDep(this.proxied._,a);return this},chainTo:function(a){3!==this.stage&&h(k[12]);return q(this.proxied).to(a)},pollEvery:function(a){(3!==this.stage||"Event"===this._.type||this.has.interval)&&h(k[13]);this._.addPollInterval(a);this.has.interval=!0;return this["new"](3)},
stopPolling:function(){3===this.stage&&this.has.interval||h(k[14]);this._.removePollInterval();return this["new"](3)},updateDepsOnEvent:function(a,b){3!==this.stage&&h(k[15]);this._.registerEvent(a,b);return this},removeEvent:function(a,b){3!==this.stage&&h(k[16]);this._.unRegisterEvent(a,b);return this}};l.prototype.update=l.prototype.set;l.prototype.twoWay=l.prototype.bothWays;l.prototype.pipe=l.prototype.chainTo;k=Object.keys(l.prototype);B=function(a,b){var c;a.proxied=c=q(b,!0);0!==c.stage&&
(a._.addDep(c,a),x(a));return c};x=function(a){if("Func"!==a.proxied._.type||p.invokeOnBind)return a._.updateDeps(a.ID,!0)};Object.defineProperty(q,"options",{get:function(){return p}});q.setOption=function(a,b){var c;if(-1!==Object.keys(p).indexOf(a)&&(-1!==a.indexOf("place")&&(c=!0,v[a.slice(11).toLowerCase()]=b.replace(/(.)/g,"\\$1")),p[a]=b,c))return H()};q.setOptions=function(a){var b;b=Object.keys(a);if(b.length)return b.forEach(function(b){return q.setOption(b,a[b])})};q.unBindAll=function(a,
b){var c,d,e;if(a&&("object"===typeof a||"function"===typeof a)&&(a=K(a),c=n.objects.indexOf(a),-1!==c))for(e in d=n.props[c],d)c=d[e],r[c].removeAllDeps(b)};return window.SimplyBind=q})();
;
function Util(){
	

	/* ==========================================================================
	   Function Helpers
	   ========================================================================== */
	
	// ==== Debounce =================================================================================
	/**
	 * Returns a function, that, as long as it continues to be invoked, will not
	 * be triggered. The function will be called after it stops being called for
	 * N milliseconds. If 'immediate' is passed, trigger the function on the
	 * leading edge, instead of the trailing.
	 *
	 *	Usage:
	 *		var myEfficientFn = debounce(function() {
	 *			// All the taxing stuff you do
	 *		}, 250);
	 *		window.addEventListener('resize', myEfficientFn);
	 *
	 * @param  {Function} func     	 Function to perform debouncing on.
	 * @param  {number} wait     	 Time in ms to wait before executing the function.
	 * @param  {bool} immediate 	 Indicate if the function should be triggered on the leading (true) or trailing (false) edge.
	 */
	this.debounce = function(func, wait, immediate) {
		var timeout;
		return function() {
			var context = this, args = arguments;
			var later = function() {
				timeout = null;
				if (!immediate) func.apply(context, args);
			};
			var callNow = immediate && !timeout;
			clearTimeout(timeout);
			timeout = setTimeout(later, wait);
			if (callNow) func.apply(context, args);
		};
	};




	// ==== Once =================================================================================
	/**
	 * Trigger a function only once and don't trigger when called after the first time.
	 *
	 *	Usage
	 *		var canOnlyFireOnce = once(function() {
	 *			console.log('Fired!');
	 *		});
	 *		canOnlyFireOnce(); // "Fired!"
	 *		canOnlyFireOnce(); // nada
	 *
	 * @param  {Function} fn      Function to trigger once.
	 * @param  {object}   context Optional context to set 'this' to.
	 */
	this.once = function(fn, context) { 
		var result;

		return function() { 
			if(fn) {
				result = fn.apply(context || this, arguments);
				fn = null;
			}

			return result;
		};
	}
































	/* ==========================================================================
	   Performance Test Utilities
	   ========================================================================== */
	this.perf = {
		/**
		 * Triggers an action repeatedly for a given time and returns the number of times the function completed.
		 * 
		 * @param  {Function} fn           Function to trigger.
		 * @param  {number}   milliSeconds The time that the function should trigger for.
		 * @return {number}                The number of times the function was triggered.
		 */
		count: function(fn, milliSeconds) {
			var startTime = performance.now(),
				endTime = 0,
				i = 0;

			if (typeof milliSeconds == 'undefined') {
				milliSeconds = 1000;
			}

			while ( endTime - startTime < milliSeconds ) {
				fn();
				i++;
				endTime = performance.now();
			}

			return i;
		},

		/**
		 * Triggers an action a given number of times and returns the average time it took for the function to complete.
		 * 
		 * @param  {Function} fn           Function to trigger.
		 * @param  {number}   times		   The number of times to trigger the functions.
		 * @return {number}                The times it took for the function to trigger under the given timeframe.
		 */
		average: function(fn) {
			var	startTime, endTime,
				i = 0;

			startTime = performance.now();
			while (i < 10000) {
				fn();
				i++;
			}
			endTime = performance.now();
		
			return (endTime - startTime)/10;
		},

		compare: function(fn1, fn2) {
			var fn1Time = this.average(fn1),
				fn2Time = this.average(fn2),
				difference;

			if (fn1Time > fn2Time) {
				difference = Math.round((fn1Time/fn2Time) * 100)/100;
				return 'Second is faster by '+difference+' times.';
			} else {
				difference = Math.round((fn2Time/fn1Time) * 100)/100;
				return 'First is faster by '+difference+' times.';
			}
		},



		'old': {
			count: function(fn, milliSeconds) {
				var startTime = new Date().getTime(),
					endTime = 0,
					repeatFunction = true,
					i = 0;

				if (typeof milliSeconds == 'undefined') {
					var milliSeconds = 5000;
				}

				while ( repeatFunction ) {
					fn.apply(this, arguments);
					i++

					if (endTime - startTime < milliSeconds) {
						endTime = new Date().getTime();
					} else {
						console.log('Completed function ' + i + ' times');
						repeatFunction = false;
					}

				}
			},
			time: function(fn, times) {
				var startTime = new Date().getTime();
				var i = 0;

				if (typeof times == 'undefined') {
					var times = 100000;
				}

				while (i < (times + 1)) {
					fn.apply(this, arguments);

					if (i === times) {
						var endTime = new Date().getTime(),
							finishTime = endTime - startTime;
						console.log(finishTime);
					}

					i++;
				}

			}
		}
	}





















	// ==========================================================================
	// Animation
	// ========================================================================== 
	// var animationFrame = (function(win, t) {
	//   return win["r" + t] || win["webkitR" + t] || win["mozR" + t] || win["msR" + t] || function(fn) { setTimeout(fn, 60); };
	// })(window, "equestAnimationFrame");

	// heightHistory = {'elements': [], 'heights': [], 'displays': []};

	// this.animateHeight = function(el, duration, height, customWidth, targetDisplay){
	// 	var	whenToEnd = Date.now() + duration,
	// 		remaining, startingHeight, targetHeight, currentProgress, inc, indexInHistory, display, onStart, onEnd;
		
	// 	if (typeof height === 'string') {
	// 		startingHeight = el.offsetHeight;
	// 		indexInHistory = heightHistory.elements.indexOf(el);
			
	// 		if (indexInHistory === -1) {
	// 			targetHeight = util.getHiddenElementHeight(el, customWidth);
	// 			display = targetDisplay || getComputedStyle(el).display;
	// 			display = display === 'none' && targetDisplay !== 'none' ? 'block' : display;
			
	// 			heightHistory.elements.push(el);
	// 			heightHistory.heights.push(targetHeight);
	// 			heightHistory.displays.push(display);
	// 		} else {
	// 			targetHeight = heightHistory.heights[indexInHistory];
	// 			display = heightHistory.displays[indexInHistory];
	// 		}


	// 		if (height === 'down') {
	// 			onStart = function(){el.style.overflow = 'hidden'; el.style.display = display;};
	// 			onEnd = function(){};
	// 		} else if (height === 'up') {
	// 			targetHeight = 0;
	// 			onStart = function(){el.style.overflow = 'hidden';};
	// 			onEnd = function(){el.style.display = 'none';};
	// 		}

	// 		// targetHeight = targetHeight - startingHeight;
	// 	}

	// 	return new Promise(function(resolve) {
	// 		currentProgress = startingHeight;
	// 		onStart();
	// 		console.log(startingHeight, targetHeight);

	// 		function step(){
	// 			remaining = whenToEnd - Date.now();
	// 			currentProgress = targetHeight - (remaining/duration)*(targetHeight-startingHeight);

	// 			if(remaining < 60) {
	// 				el.style.height = targetHeight+'px';
	// 				onEnd();
	// 				return resolve();

	// 			} else {
	// 				el.style.height = currentProgress+'px';
	// 			}

	// 			animationFrame(step);
	// 		}
	// 		animationFrame(step);
	// 	});
	// };
























	/* ==========================================================================
	   Object & Array helpers.
	   ========================================================================== */
	
	// ==== Form values to Object coversion for submission =================================================================================
	/**
	 * Finds all field values under a given form and converts the values intro a key:value pair format object for ajax submission.
	 * 
	 * @param  {object} $form jQuery Object that contains the form to be converted.
	 * @return {object}       Data object containing all form values.
	 */
	this.convertFormToObject = function($form, enableFormFields){
		if (enableFormFields) {
			var $inputFields = $form.find('input:disabled').not('disabled_forever');
			$inputFields.prop('disabled', false);
		}
		var fieldData = $form.serializeArray(),
			arrayRegEx = /\[\]$/;
			data = {};

		fieldData.forEach(function(item){
			if (!item.name.includes('_xyz_')) {
				if ( arrayRegEx.test(item.name) ) { // Check if the name of the field is an array
					item.name = item.name.replace('[]', '');
					if (data[item.name]) { // Check if array exists in the new data object.
						data[item.name].push(item.value); // If it does, just push the next value into that array.
					} else {
						if (item.value !== '') {
							data[item.name] = [item.value]; // If not, create a new array and append the first value to it.
						}
					}
				} else {
					data[item.name] = item.value; // If the name of the field isn't an array, just push it as a regular value to the data object.
				}
			}
		});
		if (enableFormFields) $inputFields.prop('disabled', true);
		return data;
	};



	// ==== Convert object to array. =================================================================================
	/**
	 * Converts objects that are number-indexed to an array.
	 * 
	 * @param  {object} object  object to convert to an array.
	 * @return {array}          Newly formed array.
	 */
	this.convertObjectToArray = function(object){
		return Object.keys(object).map(function(key) { return object[key] });
	};

































	/* ==========================================================================
	   Various
	   ========================================================================== */

	// ==== Get Object Length =================================================================================
	/**
	 * Iterites through each direct property in an object and increments an eventually-returned length var;
	 * @param  {obejct} object Object to iterate through
	 * @return {number}        Length of the given object
	 */
	this.objectLength = function(object){
		var length = 0;
		for (i in object) {
			length++;
		}
		return length;
	};

	// ==== String finder =================================================================================
	/**
	 * Searches a given string to see if it contains another string.
	 * @param  {string} haystack String to search in.
	 * @param  {string} needle   String to search for.
	 * @return {bool}         	 Indicator for whether or not the string was found.
	 */
	this.stringContains = function(haystack, needle){
		if (haystack.indexOf(needle) !== -1) {
			return true;
		} else {
			return false;
		}
	};


	// ==== Get the height of a hidden element =================================================================================
	/**
	 * Quickly displays the hidden element and takes it out of context in order to grab its dimensions and then returns it back to the original form.
	 * 
	 * @param  {element} $element       Hidden DOM element.
	 * @param  {string} setCustomWidth Optional width string to set the object to before grabbing the dimentions.
	 * @return {number}                Element's height.
	 */
	this.getHiddenElementHeight = function(el, setCustomWidth){
		var initialStyles = {
			position: 	el.style.position,
			visibility: el.style.visibility,
			display: 	el.style.display,
			width: 	el.style.width
		};
		el.style.position = 'absolute';
		el.style.visibility = 'hidden';
		el.style.display = 'block';
		if (setCustomWidth) {
			el.style.width = setCustomWidth;
		}
		var height = el.offsetHeight;
		
		el.style.position = initialStyles.position;
		el.style.visibility = initialStyles.visibility;
		el.style.display = initialStyles.display;
		if (setCustomWidth) {
			el.style.width = initialStyles.width;
		}

		return height;
	};





	// ==== Clone Node safely (preserving values) =================================================================================
	this.cloneSafe = function(el, returnJquery){
		if (el.constructor === jQuery) {
			el = el[0];
		}
		var cloned, 
			type = el.nodeName;
		
		cloned = el.cloneNode(false);
		if (type === 'TEXTAREA' || type === 'SELECT') {
			cloned.value = el.value;
		}
		if (el.childNodes.length) {
			[].slice.call(el.childNodes).forEach(function(child){
				cloned.appendChild( util.cloneSafe(child) );
			});
		}
		return returnJquery ? jQuery(cloned) : cloned;
	};
	this.cloneNode = this.cloneSafe;




	// ==== Random Number Generator =================================================================================
	this.random = function(decimals){
		var multiplier;
		if (!decimals) {
			multiplier = 10000000;
		} else {
			multiplier = 10;
			for (var i = 1; i < decimals; i++) {
				multiplier = multiplier * 10;
			}
		}

		return Math.floor(Math.random() * multiplier);
	};



	// ==== Get Keycode =================================================================================
	/**
	 * Goes through a given event object and returns the keycode from the property that's supported by the browser.
	 * 
	 * @param  {object} event 					Event Object
	 * @param  {bool} 	returnKeyType			Optional argument to indicate what should be returned form the func.
	 * @return {number || string || bool}       The event's keycode.
	 */
	this.getKeycode = function(event, returnKeyType){
		var keyPressed, explicitKey = false;

		if (event.charCode !== undefined && event.charCode !== 0) {
			keyPressed = event.charCode;
		} else if (event.keyCode !== undefined && event.keyCode !== 0) {
			keyPressed = event.keyCode;
		} else if (event.which !== undefined && event.which !== 0) {
			keyPressed = event.which;
		} else {
			explicitKey = true;
			if (event.key !== undefined) {
				keyPressed = event.key;
			} else if (event.keyIdentifier !== undefined) {
				keyPressed = event.keyIdentifier;
			}
		}
		if (returnKeyType) {
			return explicitKey;
		} else {
			return keyPressed;
		}
	};
	// Alias
	this.getKeyCode = function(event, returnKeyType){ return util.getKeycode(event, returnKeyType); };



	// ==== Capitalize a set of words =================================================================================
	this.capitalize = function(string, delimiter){
		delimiter = delimiter || ' ';
		string = string.split(delimiter)

		string = string.map(function(word){
			return word[0].toUpperCase() + word.slice(1);
		});
		
		return string.join(' ');
	}




	// ==== RegEx =================================================================================
	this.regEx = {
		whiteSpace: /^\s+|\s+$/g,
		email: new RegExp(/^(("[\w-\s]+")|([\w-]+(?:\.[\w-]+)*)|("[\w-\s]+")([\w-]+(?:\.[\w-]+)*))(@((?:[\w-]+\.)*\w[\w-]{0,66})\.([a-z]{2,6}(?:\.[a-z]{2})?)$)|(@\[?((25[0-5]\.|2[0-4][0-9]\.|1[0-9]{2}\.|[0-9]{1,2}\.))((25[0-5]|2[0-4][0-9]|1[0-9]{2}|[0-9]{1,2})\.){2}(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[0-9]{1,2})\]?$)/i),
		phone: /^[\W\d\s\-\(\)]+$/,
		fullName: /\w+\s+\w+/
	};






























	/* ==========================================================================
	   Date Helpers
	   ========================================================================== */
	// this.date = {};
	// 	// ==== Months =================================================================================
	// 	this.date.getMonthArray = function(){
	// 		return ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];
	// 	};
	// 	this.date.getMonthShortArray = function(){
	// 		return ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
	// 	};
	// 	this.date.getMonthName = function(index){
	// 		if (typeof index !== 'number') var index = parseFloat(index) - 1;
	// 		var monthNames = util.date.getMonthArray();
	// 		return monthNames[index];
	// 	};
	// 	this.date.getMonthShortName = function(index){
	// 		if (typeof index !== 'number') var index = parseFloat(index) - 1;
	// 		var monthNames = util.date.getMonthShortArray();
	// 		return monthNames[index];
	// 	};
	// 	this.date.getMonthDaysLimit = function(index){
	// 		if (typeof index !== 'number') var index = parseFloat(index) - 1;
	// 		var monthDays = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
	// 		return monthDays[index];
	// 	};
		
	// 	// ==== Days =================================================================================
	// 	this.date.getDayArray = function(){
	// 		return ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'];
	// 	};
	// 	this.date.getDayShortArray = function(){
	// 		return ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'];
	// 	};
	// 	this.date.getDayName = function(index){
	// 		if (typeof index !== 'number') var index = parseFloat(index);
	// 		var dayNames = util.date.getDayArray();
	// 		return dayNames[index];
	// 	};
	// 	this.date.getDayShortName = function(index){
	// 		if (typeof index !== 'number') var index = parseFloat(index);
	// 		var dayNames = util.date.getDayShortArray();
	// 		return dayNames[index];
	// 	};


	// 	this.date.getWeekSegment = function(date, month){
	// 		var date = parseFloat(date),
	// 			index;
			
	// 		if (date <= 31)	index = '4';
	// 		if (date <= 21)	index = '3';
	// 		if (date <= 14)	index = '2';
	// 		if (date <= 7) 	index = '1';

	// 		if (month) {
	// 			var weekName = util.date.getMonthShortName(month) + ' ' + index;
	// 		} else {
	// 			var weekName = 'Week ' + index;
	// 		}
	// 		return weekName;
	// 	};

	// 	this.date.goBack = function(date, range){
	// 		var dateBreakdown = date.match(/(\d+)(?:-|\/| |\.)(\d+)(?:-|\/| |\.)(\d+)/),
	// 			day = dateBreakdown[3],
	// 			month = dateBreakdown[2],
	// 			year = dateBreakdown[1];

	// 		if (typeof range === 'number') {
	// 			day = parseFloat(day) - range;
	// 			if (day < 1) { // Check if day is 0 or lower, which indicates that we must go to the previous month.
	// 				day = util.date.getMonthDaysLimit(parseFloat(month) - 2) + day;
	// 				month = parseFloat(month) - 1;
	// 				if (month < 1) { // Check if month is 0 or lower, which indicates that we must go to the previous year.
	// 					month = 12;
	// 					year = parseFloat(year) - 1;
	// 				}
	// 			}
	// 		}
	// 		if (range === 'week') {
	// 			day = parseFloat(day) - 6;
	// 			if (day < 1) { // Check if day is 0 or lower, which indicates that we must go to the previous month.
	// 				day = util.date.getMonthDaysLimit(parseFloat(month) - 2) + day;
	// 				month = parseFloat(month) - 1;
	// 				if (month < 1) { // Check if month is 0 or lower, which indicates that we must go to the previous year.
	// 					month = 12;
	// 					year = parseFloat(year) - 1;
	// 				}
	// 			}
	// 		}
	// 		if (range === 'month') {
	// 			month = parseFloat(month) - 1;
	// 			if (month < 1) { // Check if month is 0 or lower, which indicates that we must go to the previous year.
	// 				month = 12;
	// 				year = parseFloat(year) - 1;
	// 			}
	// 		}
	// 		if (range === 'year') {
	// 			year = parseFloat(year) - 1;
	// 			month = parseFloat(month) + 1;
	// 			day = 1;
	// 		}

	// 		month = month.toString().length < 2 ? '0'+month : month;

	// 		return year +'-'+ month +'-'+ day;
	// 	};





}; var util = new Util(); var utils = util;



// ==== Log =================================================================================
function log() {
  try {
    console.log.apply( console, arguments );
  } catch(e) {
    try {
      opera.postError.apply( opera, arguments );
    } catch(e){
      alert( Array.prototype.join.call( arguments, " " ) );
    }
  }
}





;
/* ==========================================================================
   Input event polyfill
   ========================================================================== */
!function(e){function t(e){var t=e.nodeName.toUpperCase();return"TEXTAREA"===t||"INPUT"===t}function n(e){m={el:e,value:e.value},d=Object.getOwnPropertyDescriptor(e.constructor.prototype,"value"),Object.defineProperty(m.el,"value",p),m.el.attachEvent("onpropertychange",o)}function u(){m.el&&(delete m.el.value,m.el.detachEvent("onpropertychange",o),m={el:null,value:null},d=null)}function c(t){a?t.fireEvent("on"+e,i()):t.dispatchEvent(i())}function o(e){if("value"===e.propertyName){var t=e.srcElement.value;t!==m.value&&(m.value=t,c(m.el))}}function l(){m.el&&m.el.value!==m.value&&(m.value=m.el.value,c(m.el))}var a="undefined"==typeof document.dispatchEvent,r=document.createElement("input"),v="oninput"in r&&(!("documentMode"in document)||document.documentMode>9),i=function(){var t;return a?(t=document.createEventObject(),t.type="change",t.bubbles=!0,t.cancelable=!1):(t=document.createEvent("CustomEvent"),t.initCustomEvent(e,!0,!1,{})),t},d=null,p={get:function(){return d.get.call(this)},set:function(e){m.value=e,d.set.call(this,e)}},m={el:null,value:null};v?"input"!==e&&document.addEventListener("input",function(e){c(e.target)},!1):(document.attachEvent("onfocusin",function(e){t(e.srcElement)&&(u(),n(e.srcElement))}),document.attachEvent("onfocusout",function(){u()}),document.attachEvent("onselectionchange",l),document.attachEvent("onkeyup",l),document.attachEvent("onkeydown",l))}("input");


/* ==========================================================================
   Placeholder Polyfill
   ========================================================================== */
!function(e,t,l){function n(e){function t(){return i=h(e)}function l(){setTimeout(function(){var l=i,n=t();l!==n&&e.__placeholder&&(e.value=n),e.__placeholder&&e.value!==n&&(e.__placeholder=!1)},0)}function n(){e.value?c():a()}function a(){e.__placeholder||e.value||r()}function r(){e.__placeholder=!0,e.value=t(),d(e,"-placeholder")}function c(){e.__placeholder&&(e.__placeholder=!1,e.value="",p(e,"-placeholder"))}if(null!=e.__placeholder)return void(e.__placeholder&&(e.value=t()));var i=h(e);e.value?(e.__placeholder=!1,e.value===t()&&r()):a(),o(e,"keyup",n),o(e,"keyDown",n),o(e,"blur",n),o(e,"focus",c),o(e,"click",c),e.addEventListener?o(e,"DOMAttrModified",l):e.attachEvent&&"onpropertychange"in e&&o(e,"propertychange",l)}function a(){var e=[];return c(arguments,function(t){"number"!=typeof t.length&&(t=[t]),e.push.apply(e,i(t,r))}),e}function r(e){var t=(e.nodeName||"").toLowerCase();return"textarea"===t||"input"===t&&("text"===e.type||"password"===e.type)}function o(e,t,l){e.addEventListener?e.addEventListener(t,l,!1):e.attachEvent&&e.attachEvent("on"+t,l)}function c(e,t){if(e.forEach)return e.forEach(t);for(var l=0,n=e.length;n>l;l++)t.call(null,e[l],l,e)}function i(e,t){if(e.filter)return e.filter(t);for(var l=[],n=0,a=e.length;a>n;n++)t.call(null,e[n],n,e)&&l.push(e[n]);return l}function u(e){return y[e]||(y[e]=new RegExp("(^|\\s)+"+e+"(\\s|$)+","g")),y[e]}function d(e,t){e.className+=" "+t}function p(e,t){e.className=e.className.replace(u(t)," ")}function h(e){return e.getAttribute("placeholder")||e.attributes.placeholder&&e.attributes.placeholder.nodeValue}function f(){var e=t.styleSheets&&t.styleSheets[0];if(!e){var l=(t.head||t.getElementsByTagName("head")[0],t.createElement("style"));l.appendChild(t.createTextNode("")),t.head.appendChild(l),e=l.sheet}return e}if("placeholder"in t.createElement("input"))return t.placeholderPolyfill=function(){},void(t.placeholderPolyfill.active=!1);var s=t.getElementsByTagName("input"),v=t.getElementsByTagName("textarea");t.placeholderPolyfill=function(e){e=e?a(e):a(s,v),c(e,n)},t.placeholderPolyfill.active=!0,t.placeholderPolyfill(),t.addEventListener?(t.addEventListener("DOMAttrModified",t.placeholderPolyfill),t.addEventListener("DOMNodeInserted",t.placeholderPolyfill)):t.attachEvent&&"onpropertychange"in t&&t.attachEvent("onpropertychange",t.placeholderPolyfill),f().addRule(".-placeholder","color: #888;",0);var y={}}(window,document);





/* ==========================================================================
   Collections polyfill
   ========================================================================== */
(function(e){function f(a,c){function b(a){if(!this||this.constructor!==b)return new b(a);this._keys=[];this._values=[];this._itp=[];this.objectOnly=c;a&&v.call(this,a)}c||w(a,"size",{get:x});a.constructor=b;b.prototype=a;return b}function v(a){this.add?a.forEach(this.add,this):a.forEach(function(a){this.set(a[0],a[1])},this)}function d(a){this.has(a)&&(this._keys.splice(b,1),this._values.splice(b,1),this._itp.forEach(function(a){b<a[0]&&a[0]--}));return-1<b}function m(a){return this.has(a)?this._values[b]:void 0}function n(a,c){if(this.objectOnly&&c!==Object(c))throw new TypeError("Invalid value used as weak collection key");if(c!=c||0===c)for(b=a.length;b--&&!y(a[b],c););else b=a.indexOf(c);return-1<b}function p(a){return n.call(this,this._values,a)}function q(a){return n.call(this,this._keys,a)}function r(a,c){this.has(a)?this._values[b]=c:this._values[this._keys.push(a)-1]=c;return this}function t(a){this.has(a)||this._values.push(a);return this}function h(){(this._keys||0).length=this._values.length=0}function z(){return k(this._itp,this._keys)}function l(){return k(this._itp,this._values)}function A(){return k(this._itp,this._keys,this._values)}function B(){return k(this._itp,this._values,this._values)}function k(a,c,b){var g=[0],e=!1;a.push(g);return{next:function(){var f,d=g[0];!e&&d<c.length?(f=b?[c[d],b[d]]:c[d],g[0]++):(e=!0,a.splice(a.indexOf(g),1));return{done:e,value:f}}}}function x(){return this._values.length}function u(a,c){for(var b=this.entries();;){var d=b.next();if(d.done)break;a.call(c,d.value[1],d.value[0],this)}}var b,w=Object.defineProperty,y=function(a,b){return isNaN(a)?isNaN(b):a===b};"undefined"==typeof WeakMap&&(e.WeakMap=f({"delete":d,clear:h,get:m,has:q,set:r},!0));"undefined"!=typeof Map&&"function"===typeof(new Map).values&&(new Map).values().next||(e.Map=f({"delete":d,has:q,get:m,set:r,keys:z,values:l,entries:A,forEach:u,clear:h}));"undefined"!=typeof Set&&"function"===typeof(new Set).values&&(new Set).values().next||(e.Set=f({has:p,add:t,"delete":d,clear:h,keys:l,values:l,entries:B,forEach:u}));"undefined"==typeof WeakSet&&(e.WeakSet=f({"delete":d,add:t,clear:h,has:p},!0))})("undefined"!=typeof exports&&"undefined"!=typeof global?global:window);




/* ==========================================================================
   Array.find()
   ========================================================================== */
if (!Array.prototype.find) {
	Array.prototype.find = function (callback, thisArg) {
		var val;
		this.forEach(function (elmVal, i, arr) {
			if (callback.call(thisArg, elmVal, i, arr)) {if (!val) val=elmVal;}
		});
		return val;
	};
}




/* ==========================================================================
   Array.findIndex()
   ========================================================================== */
// if (!Array.prototype.findIndex) {
//   Array.prototype.findIndex = function(predicate) {
//     if (this === null) {
//       throw new TypeError('Array.prototype.findIndex called on null or undefined');
//     }
//     if (typeof predicate !== 'function') {
//       throw new TypeError('predicate must be a function');
//     }
//     var list = Object(this),
//       length = list.length >>> 0;
//       thisArg = arguments[1];
//       value;

//     for (var i = 0; i < length; i++) {
//       value = list[i];
//       if (predicate.call(thisArg, value, i, list)) {
//         return i;
//       }
//     }
//     return -1;
//   };
// }



/* ==========================================================================
   Array.isArray()
   ========================================================================== */
if (!Array.prototype.isArray) {
	Array.prototype.isArray = function(arg) {
		return Object.prototype.toString.call(arg) === '[object Array]';
	};
}


/* ==========================================================================
   Array.includes()
   ========================================================================== */
if (!Array.prototype.includes) {
	Array.prototype.includes = function(searchElement) {return this.indexOf(searchElement);};
}



/* ==========================================================================
   Array.forEach()
   ========================================================================== */
if (!Array.prototype.forEach) {
	Array.prototype.forEach = function (fn, arg) {
		var arr = this,
			len = arr.length,
			thisArg = arg ? arg : undefined,
			i;
		for (i = 0; i < len; i += 1) {
			if (arr.hasOwnProperty(i)) {
				fn.call(thisArg, arr[i], i, arr);
			}
		}
		return undefined;
	};
}



/* ==========================================================================
   Array.from()
   ========================================================================== */
if (!Array.prototype.from) {
    Array.prototype.from = function (object){return [].slice.call(object);};
}








/* ==========================================================================
   String.includes()
   ========================================================================== */
if (!String.prototype.includes) {
	String.prototype.includes = function(str, start) {
		return String.prototype.indexOf(str, start||0) !== -1;
	};
}



/* ==========================================================================
   String.endsWith()
   ========================================================================== */
if (!String.prototype.endsWith) {
	String.prototype.endsWith = function(str) {
		return this.indexOf(str, this.length - str.length) !== -1;
	};
}


/* ==========================================================================
   String.startsWith()
   ========================================================================== */
if (!String.prototype.startsWith) {
	String.prototype.startsWith = function(str, pos) {
		return this.indexOf(str, pos||0) === 0;
	};
}



/* ==========================================================================
   String.repeat()
   ========================================================================== */
if (!String.prototype.repeat) {
	String.prototype.repeat = function(n) {
		var rpt = '', i;
		for (i = 0; i < n; i++) {
			rpt += str;
		}
		return rpt;
	}
}



/* ==========================================================================
   ClassList polyfill
   ========================================================================== */
(function () {
	if (typeof window.Element === "undefined" || "classList" in document.documentElement) return;

	var prototype = Array.prototype,
			push = prototype.push,
			splice = prototype.splice,
			join = prototype.join;

	function DOMTokenList(el) {
		this.el = el;
		// The className needs to be trimmed and split on whitespace
		// to retrieve a list of classes.
		var classes = el.className.replace(/^\s+|\s+$/g,'').split(/\s+/);
		for (var i = 0; i < classes.length; i++) {
			push.call(this, classes[i]);
		}
	};

	DOMTokenList.prototype = {
		add: function(token) {
			if(this.contains(token)) return;
			push.call(this, token);
			this.el.className = this.toString();
		},
		contains: function(token) {
			return this.el.className.indexOf(token) != -1;
		},
		item: function(index) {
			return this[index] || null;
		},
		remove: function(token) {
			if (!this.contains(token)) return;
			for (var i = 0; i < this.length; i++) {
				if (this[i] == token) break;
			}
			splice.call(this, i, 1);
			this.el.className = this.toString();
		},
		toString: function() {
			return join.call(this, ' ');
		},
		toggle: function(token) {
			if (!this.contains(token)) {
				this.add(token);
			} else {
				this.remove(token);
			}

			return this.contains(token);
		}
	};

	window.DOMTokenList = DOMTokenList;

	function defineElementGetter (obj, prop, getter) {
			if (Object.defineProperty) {
					Object.defineProperty(obj, prop,{
							get : getter
					});
			} else {
					obj.__defineGetter__(prop, getter);
			}
	}

	defineElementGetter(Element.prototype, 'classList', function () {
		return new DOMTokenList(this);
	});
})();






/* ==========================================================================
   Promises
   ========================================================================== */
(function(){'use strict';var f,g=[];function l(a){g.push(a);1==g.length&&f()}function m(){for(;g.length;)g[0](),g.shift()}f=function(){setTimeout(m)};function n(a){this.a=p;this.b=void 0;this.f=[];var b=this;try{a(function(a){q(b,a)},function(a){r(b,a)})}catch(c){r(b,c)}}var p=2;function t(a){return new n(function(b,c){c(a)})}function u(a){return new n(function(b){b(a)})}function q(a,b){if(a.a==p){if(b==a)throw new TypeError;var c=!1;try{var d=b&&b.then;if(null!=b&&"object"==typeof b&&"function"==typeof d){d.call(b,function(b){c||q(a,b);c=!0},function(b){c||r(a,b);c=!0});return}}catch(e){c||r(a,e);return}a.a=0;a.b=b;v(a)}}
function r(a,b){if(a.a==p){if(b==a)throw new TypeError;a.a=1;a.b=b;v(a)}}function v(a){l(function(){if(a.a!=p)for(;a.f.length;){var b=a.f.shift(),c=b[0],d=b[1],e=b[2],b=b[3];try{0==a.a?"function"==typeof c?e(c.call(void 0,a.b)):e(a.b):1==a.a&&("function"==typeof d?e(d.call(void 0,a.b)):b(a.b))}catch(h){b(h)}}})}n.prototype.g=function(a){return this.c(void 0,a)};n.prototype.c=function(a,b){var c=this;return new n(function(d,e){c.f.push([a,b,d,e]);v(c)})};
function w(a){return new n(function(b,c){function d(c){return function(d){h[c]=d;e+=1;e==a.length&&b(h)}}var e=0,h=[];0==a.length&&b(h);for(var k=0;k<a.length;k+=1)u(a[k]).c(d(k),c)})}function x(a){return new n(function(b,c){for(var d=0;d<a.length;d+=1)u(a[d]).c(b,c)})};window.Promise||(window.Promise=n,window.Promise.resolve=u,window.Promise.reject=t,window.Promise.race=x,window.Promise.all=w,window.Promise.prototype.then=n.prototype.c,window.Promise.prototype["catch"]=n.prototype.g);}());
;
// Generated by CoffeeScript 1.10.0
(function() {
  (function($) {
    var $window, Field, defaultFns, defaultOptions, fixWidth, messages, parseWidth, regEx, textChangeEvent;
    $window = $(window);
    textChangeEvent = 'input';
    messages = {
      'error': '<div class="results-message error">An unknown error has occured on the server, please contact customer support for help.</div>',
      'loading': '<div class="loading"><div class="loading-title">Processing your information...</div><div class="loading-gif"></div></div>'
    };
    defaultOptions = {
      'submitUrl': '/ajax',
      'stepClosedHeight': 39,
      'heightTransitions': false,
      'validateOnTyping': false,
      'preserveValuesAfterRefresh': true,
      'hasLoadingStep': true,
      'forceAjaxSubmit': false,
      'submitOnEnter': true,
      'dontDisableFields': false,
      'uniqueSteps': false,
      'customTransition': false,
      'heightToggleAnimation': true,
      'customNext': false,
      'customBack': false,
      'customSubmit': false,
      'callbackOnPrepare': function() {},
      'callbackOnResults': function() {},
      'callbackOnValidate': function() {},
      'callbackOnNextStep': function() {},
      'callbackOnBackStep': function() {},
      'callbackOnEventAttachment': function() {}
    };
    window.Form = function($formEl, options) {
      this.options = $.extend({}, defaultOptions, options);
      this.window = $window;
      this.skippedAStep = false;
      this.disabled = false;
      this.step = {
        'current': null,
        'prev': null,
        'next': null
      };
      this.action = $formEl.data('action');
      if (this.action) {
        this.form = $formEl;
      } else {
        this.form = $formEl.find('form').first();
        this.action = this.form.data('action');
        if (!this.action) {
          this.form = $formEl;
        }
      }
      this.fields = [];
      this.fieldsByName = {};
      this.fieldsRequired = [];
      this.fieldsInSteps = [];
      this.stepIndexOffset = this.form.find('.step').first().index();
      if (this.stepIndexOffset < 0) {
        this.stepIndexOffset = 0;
      }
      this.resultsPlaceholder = this.form.find('.results');
      this.multiStep = this.form.find('.step').length > 1;
      this.focused_atleast_once = false;
      if (!this.form.data('Form')) {
        this.form.data('Form', this);
      }
      this.Prepare(true);
      if (this.options.heightTransitions && this.multiStep) {
        this.manageStepHeight(this.options.stepClosedHeight);
      }
      return this;
    };
    Field = function($field, formInstance, customFns) {
      var customMethod, instance, method, name, ref, ref1;
      if (customFns == null) {
        customFns = {};
      }
      $field.data('Field', this);
      instance = this;
      this.form = formInstance;
      this.step = $field.parents('.step').first();
      this.field = $field;
      this.data = this.field.data();
      this.input = this.field.find('.input');
      this.type = this.data.type;
      this.name = this.data.realname || this.data.name;
      this.nameReal = this.data.name;
      if (this.data.pattern) {
        this.pattern = new RegExp(this.data.pattern);
      }
      if (this.data.force_pattern) {
        this.forcePattern = this.data.force_pattern;
      }
      if (this.data.force_live) {
        this.forceLive = this.data.force_live;
      }
      if (this.data.comments) {
        this.comments = this.data.comments;
      }
      if (this.data.desc) {
        this.desc = this.data.desc;
      }
      if (this.data.error) {
        this.errorMsg = this.data.error;
      }
      this["default"] = this.data.default_value;
      this.required = this.data.required === '1' || this.data.required === 1;
      if (this.data.minimum != null) {
        this.minimum = this.data.minimum;
      }
      if (this.data.maximum != null) {
        this.maximum = this.data.maximum;
      }
      this.collapsed = !!this.data.collapsed;
      this.disabled = this.data.disabled_forever === '1' || false;
      if (this.data.disabled_forever) {
        this.disabledForever = this.disabled;
      }
      if (this.data.height) {
        this.height = this.data.height;
      }
      if (this.data.depends_on) {
        this.dependsOn = this.data.depends_on;
      }
      if (this.data.condition_scope) {
        this.conditionScope = this.data.condition_scope;
      }
      if (this.data.depends_on) {
        this.comparison = this.data.comparison || '=';
      }
      if (this.data.depends_on) {
        this.condition = this.data.condition;
      }
      if (this.data.conditional_values) {
        this.conditionalValues = this.data.conditional_values;
      }
      if (this.data.depends_on) {
        this.revealed = null;
      }
      this.value = this["default"] || null;
      this.valid = false;
      this.conditionalDeps = {};
      this.conditionalDeps.cbs = {
        'deps': [],
        'callbacks': []
      };
      if (this.name.includes('password' && (this.minimum == null))) {
        this.minimum = 6;
      }
      if (this.disabled) {
        this.disable();
      }
      if (this.forcePattern) {
        switch (this.forcePattern) {
          case 'slug':
            this.forceSpecial = true;
            break;
          case 'name':
            this.forceSpecial = true;
            break;
          case 'lower':
            this.forceSpecial = true;
            break;
          case 'upper':
            this.forceSpecial = true;
            break;
          default:
            if (this.forcePattern) {
              this.forcePattern = new RegExp(this.forcePattern);
            }
        }
      }
      ref = Form.prototype.fieldProtos[this.type];
      for (name in ref) {
        method = ref[name];
        if (name === 'prepareConditional') {
          if (this.dependsOn) {
            this[name] = method;
          }
        } else {
          this[name] = method;
        }
      }
      if (customFns[this.type] != null) {
        ref1 = customFns[this.type];
        for (name in ref1) {
          customMethod = ref1[name];
          this[name] = customMethod;
        }
      }
      if (this.prepare != null) {
        this.prepare();
      } else {
        throw new Error("Invalid field type! Type: " + this.type + ", Name: " + this.name);
      }
      if (this.dependsOn) {
        if (this.required) {
          this.requiredOriginally = true;
        }
        setTimeout(this.prepareConditional.bind(this), 0);
      }
      if (this.conditionalValues) {
        setTimeout(this.prepareConditionalValues.bind(this), 0);
      }
      return this;
    };
    Form.prototype.Field = Field;
    regEx = {
      'slug': /^[a-z0-9-]+$/,
      'name': /^[a-z0-9_]+$/,
      'lower': /^[a-z]+$/,
      'upper': /^[A-Z]+$/
    };
    Field.prototype = {
      'constructor': Field,
      prepareConditional: function() {
        var $context;
        $context = (function() {
          switch (this.conditionScope) {
            case 'form':
              return this.form.form;
            case 'step':
              if (this.step.length) {
                return this.step;
              } else {
                return this.field.parents('.step').first();
              }
            case 'repeater':
              return this.field.parents('.fieldset').last();
            case 'repeater-1':
              return this.field.parents('.fieldset').eq(1);
            case 'repeater-2':
              return this.field.parents('.fieldset').eq(2);
            case 'sibling':
              return this.field.parent();
            default:
              return this.form.form;
          }
        }).call(this);
        this.masterField = $context.find('[data-realname*="' + this.dependsOn + '"]').first();
        this.masterInstance = this.masterField.data('Field');
        if (this.masterInstance == null) {
          return console.log("Conditional field '" + this.name + "' has no matching master field.", this);
        }
        return this.masterInstance.subscribe(this, this.condition, this.comparison);
      },
      prepareConditionalValues: function() {
        var callbacksOnMasterChange, label, masterChangeCallback, masterFields, optionsLabels;
        if (this.type !== 'select' && (typeof SimplyBind === "undefined" || SimplyBind === null)) {
          return;
        }
        masterFields = [];
        callbacksOnMasterChange = [];
        this.options = [];
        optionsLabels = {};
        label = this.input.children()[0].label;
        masterChangeCallback = (function(_this) {
          return function(passedTest, option) {
            var index, optionValue;
            optionValue = option.value;
            if (passedTest) {
              if (!_this.options.includes(optionValue)) {
                return _this.options.push(optionValue);
              }
            } else {
              index = _this.options.indexOf(optionValue);
              return _this.options.splice(index, 1);
            }
          };
        })(this);
        this.input.children().each((function(_this) {
          return function(i, opt) {
            if (i === 0) {
              return;
            }
            _this.options.push(opt.value);
            return optionsLabels[opt.value] = opt.label;
          };
        })(this));
        SimplyBind('options').of(this).to('prop:innerHTML').of(this.input).transform((function(_this) {
          return function(options) {
            var currentValue, optList;
            currentValue = _this.value;
            optList = "<option value=''>" + label + "</option>";
            options.sort(function(a, b) {
              if (a === '') {
                return -1;
              }
              if (optionsLabels[a] === optionsLabels[b]) {
                return 0;
              } else if (optionsLabels[a] < optionsLabels[b]) {
                return -1;
              } else {
                return 1;
              }
            });
            options.forEach(function(option) {
              return optList += "<option value='" + option + "'>" + optionsLabels[option] + "</option>";
            });
            setTimeout(function() {
              _this.input[0].value = currentValue;
              return _this.input.trigger('change');
            }, 50);
            return optList;
          };
        })(this));
        return this.conditionalValues.forEach((function(_this) {
          return function(option) {
            var $context, currentlyShown, element, masterField, masterInstance;
            currentlyShown = true;
            element = _this.input.children("option[value='" + option.value + "']")[0];
            if (!element) {
              return;
            }
            $context = (function() {
              switch (option.conditionScope) {
                case 'form':
                  return this.form.form;
                case 'step':
                  if (this.step.length) {
                    return this.step;
                  } else {
                    return this.field.parents('.step').first();
                  }
                case 'repeater':
                  return this.field.parents('.fieldset').last();
                case 'repeater-1':
                  return this.field.parents('.fieldset').eq(1);
                case 'repeater-2':
                  return this.field.parents('.fieldset').eq(2);
                case 'sibling':
                  return this.field.parent();
                default:
                  return this.form.form;
              }
            }).call(_this);
            masterField = $context.find('[data-realname*="' + option.depends_on + '"]').first();
            masterInstance = masterField.data('Field');
            if (masterInstance == null) {
              return console.log("Conditional value '" + _this.name + " (" + option.value + ")' has no matching master field.", _this);
            }
            return masterInstance.subscribe(element, option.condition, option.comparison, masterChangeCallback);
          };
        })(this));
      },
      showError: function() {
        return this.field.addClass('error');
      },
      hideError: function() {
        return this.field.removeClass('error');
      },
      checkOn: function($button) {
        var $input;
        $button.addClass('checked');
        $input = $button.find('.input');
        if ($input.length) {
          $input[0].checked = true;
        }
        if ((this.type != null) && this.type === 'radio') {
          return this.checkOff($button.siblings());
        }
      },
      checkOff: function($button) {
        var $input;
        $button.removeClass('checked');
        $input = $button.find('.input');
        if ($input.length) {
          return $input[0].checked = false;
        }
      },
      makeValid: function() {
        this.field.addClass('valid').removeClass('invalid error show_error_msg');
        return this.valid = true;
      },
      makeInvalid: function(error) {
        var classesToAdd;
        classesToAdd = error ? 'invalid error' : 'invalid';
        this.field.addClass(classesToAdd).removeClass('valid');
        this.valid = false;
        if (this.errorMsg && error) {
          return this.field.addClass('show_error_msg');
        }
      },
      makeFilled: function() {
        return this.field.addClass('filled animate');
      },
      makeNotFilled: function() {
        return this.field.removeClass('filled animate');
      },
      makeRequired: function() {
        if (this.requiredOriginally) {
          this.required = true;
        }
        this.field.addClass('required');
        if (this.form.fieldsRequired.indexOf(this) !== -1) {
          return this.form.fieldsRequired.push(this);
        }
      },
      makeNotRequired: function() {
        this.required = false;
        this.field.removeClass('required');
        if (this.form.fieldsRequired.indexOf(this) !== -1) {
          return this.form.fieldsRequired.splice(this.form.fieldsRequired.indexOf(this), 1);
        }
      },
      reveal: function() {
        this.field.addClass('reveal_dependant').trigger('reveal_dependant');
        this.makeRequired();
        this.enable();
        return this.revealed = true;
      },
      unreveal: function() {
        this.field.removeClass('reveal_dependant').trigger('hide_dependant');
        this.makeNotRequired();
        this.disable();
        return this.revealed = false;
      },
      blur: function() {
        return this.input.trigger('blur');
      },
      focus: function() {
        return this.input.trigger('focus');
      },
      subscribe: function(dep, condition, comparison, callback) {
        if (condition == null) {
          condition = '*';
        }
        if (comparison == null) {
          comparison = '=';
        }
        if (!dep) {
          return;
        }
        if (this.conditionalDeps[comparison] == null) {
          this.conditionalDeps[comparison] = {};
          this.conditionalDeps[comparison][condition] = [dep];
        } else {
          if (this.conditionalDeps[comparison][condition] == null) {
            this.conditionalDeps[comparison][condition] = [dep];
          } else {
            if (!this.conditionalDeps[comparison][condition].includes(dep)) {
              this.conditionalDeps[comparison][condition].push(dep);
            }
          }
        }
        if (callback) {
          if (!this.conditionalDeps.cbs.deps.includes(dep)) {
            this.conditionalDeps.cbs.deps.push(dep);
            this.conditionalDeps.cbs.callbacks.push(callback);
          }
        }
        return this.updateDeps();
      },
      updateDeps: function() {
        var thisPassedTest;
        if (!(util.objectLength(this.conditionalDeps) >= 1)) {
          return;
        }
        clearTimeout(this.depsUpdateTimeout);
        thisPassedTest = this.test();
        return this.depsUpdateTimeout = setTimeout((function(_this) {
          return function() {
            var caseMatched, cases, comparison, conditionCase, conditionCases, deps, passed, ref, results;
            ref = _this.conditionalDeps;
            results = [];
            for (comparison in ref) {
              cases = ref[comparison];
              if (comparison !== 'cbs') {
                results.push((function() {
                  var results1;
                  results1 = [];
                  for (conditionCase in cases) {
                    deps = cases[conditionCase];
                    caseMatched = false;
                    if (conditionCase.constructor === RegExp || conditionCase[0] === '/') {
                      if (conditionCase[0] === '/') {
                        conditionCase = new RegExp(conditionCase);
                      }
                      if (Array.isArray(this.value)) {
                        passed = false;
                        this.value.forEach((function(_this) {
                          return function(val) {
                            if (!passed) {
                              return caseMatched = conditionCase.test(val);
                            }
                          };
                        })(this));
                        caseMatched = passed;
                      } else {
                        caseMatched = conditionCase.test(this.value);
                      }
                    }
                    if (conditionCase === '*') {
                      caseMatched = thisPassedTest;
                    } else {
                      conditionCases = conditionCase.split(/,\s?/);
                      conditionCases.forEach((function(_this) {
                        return function(conditionCase) {
                          if (!caseMatched) {
                            return caseMatched = Array.isArray(_this.value) ? _this.value.includes(conditionCase) : _this.value === conditionCase;
                          }
                        };
                      })(this));
                    }
                    if (comparison === '!=') {
                      caseMatched = !caseMatched;
                    }
                    results1.push(deps.forEach((function(_this) {
                      return function(dep) {
                        var index, siblingFields;
                        if (dep.constructor === Field) {
                          if (caseMatched) {
                            dep.reveal();
                          } else {
                            dep.unreveal();
                          }
                          if (dep.data.width !== '1-1') {
                            siblingFields = [];
                            dep.field.parent().children('.fieldset').each(function() {
                              var instance;
                              instance = $(this).data('Field');
                              if (instance) {
                                if (!(instance.dependsOn && !instance.revealed)) {
                                  return siblingFields.push(instance);
                                }
                              }
                            });
                            setTimeout(function() {
                              if (siblingFields.length) {
                                return fixWidth(siblingFields);
                              }
                            }, 50);
                          }
                        }
                        if (_this.conditionalDeps.cbs.deps.includes(dep)) {
                          index = _this.conditionalDeps.cbs.deps.indexOf(dep);
                          return _this.conditionalDeps.cbs.callbacks[index](caseMatched, dep);
                        }
                      };
                    })(this)));
                  }
                  return results1;
                }).call(_this));
              } else {
                results.push(void 0);
              }
            }
            return results;
          };
        })(this), 75);
      },
      destroy: function(stepIndex) {
        var ref;
        this.form.fields.splice(this.form.fields.indexOf(this), 1);
        delete this.form.fieldsByName[this.name];
        if (this.form.fieldsRequired.includes(this)) {
          this.form.fieldsRequired.splice(this.form.fieldsRequired.indexOf(this), 1);
        }
        if (stepIndex) {
          if ((ref = this.form.fieldsInSteps[stepIndex]) != null ? ref.includes(this) : void 0) {
            this.form.fieldsInSteps[stepIndex].splice(this.form.fieldsInSteps[stepIndex].indexOf(this), 1);
          }
          return this.field.remove();
        }
      }
    };
    defaultFns = {
      'prepare': {
        input: function() {
          this.input.on("change " + textChangeEvent + " blur", (function(_this) {
            return function() {
              return _this.field.trigger('value_changed');
            };
          })(this));
          if (!!this.form.options.preserveValuesAfterRefresh) {
            this.value = this.input[0].value.replace(util.regEx.whiteSpace, '');
          } else {
            if (!this["default"]) {
              this.value = '';
            }
          }
          this.input.val(this.value);
          if (this.value) {
            this.makeFilled();
          }
          this.attachState();
          if (this.height != null) {
            this.input.css('height', this.height);
          }
          if (this.desc) {
            this.field.addClass('has_desc');
          }
          if (this.required) {
            this.attachValidation();
            if (this.test()) {
              return this.makeValid();
            } else {
              return this.makeInvalid();
            }
          } else {
            return this.makeValid();
          }
        },
        button: function() {
          var $checkedInputs, fieldInstance, values;
          fieldInstance = this;
          this.input = this.field.find('.input-button');
          this.input.on("click", (function(_this) {
            return function(event) {
              return _this.field.trigger('value_changed', $(event.currentTarget));
            };
          })(this));
          if (!!this.form.options.preserveValuesAfterRefresh) {
            $checkedInputs = this.field.find('[checked]');
            if ($checkedInputs.length === 0) {
              $checkedInputs = this.field.find(':checked');
            }
            if (this.type === 'radio') {
              $checkedInputs.each((function(_this) {
                return function(i, el) {
                  _this.value = el.value;
                  return _this.checkOn($(el).parents('.input-button'));
                };
              })(this));
            } else if (this.type === 'checkbox_single') {
              this.value = $checkedInputs ? true : false;
              if (this.value) {
                this.checkOn(this.input);
              }
            } else {
              values = [];
              $checkedInputs.each((function(_this) {
                return function(i, el) {
                  values.push(el.value);
                  return _this.checkOn($(el).parents('.input-button'));
                };
              })(this));
              this.value = values;
            }
          } else {
            if (this["default"]) {
              values = this.value.split(/,\s?/);
              if (values.length) {
                this.input.each((function(_this) {
                  return function(i, el) {
                    if (values.includes($(el).find('.input').value)) {
                      return _this.checkOn($(el));
                    } else {
                      return _this.checkOff($(el));
                    }
                  };
                })(this));
              }
            } else {
              this.value = this.type === 'radio' ? null : this.type === 'checkbox_single' ? false : [];
              this.input.each((function(_this) {
                return function(i, el) {
                  return _this.checkOff($(el));
                };
              })(this));
            }
          }
          if (this.type === 'radio' || this.type === 'checkbox_single') {
            if (this.value) {
              this.makeFilled();
            }
          } else {
            if (this.value.length) {
              this.makeFilled();
            }
          }
          if (this.height != null) {
            this.input.css('height', this.height);
          }
          if (this.desc) {
            this.field.addClass('has_desc');
          }
          this.attachState();
          if (this.required) {
            this.attachValidation();
            if (this.test()) {
              return this.makeValid();
            } else {
              return this.makeInvalid();
            }
          } else {
            return this.makeValid();
          }
        }
      },
      'attachValidation': {
        input: function() {
          return this.field.on('value_changed', (function(_this) {
            return function() {
              if (_this.test()) {
                _this.makeValid();
              } else {
                _this.makeInvalid();
              }
              return _this.form.form.trigger('field_filled');
            };
          })(this));
        },
        button: function() {
          return this.field.on('value_changed', (function(_this) {
            return function(event, $button) {
              if ($button.constructor !== jQuery) {
                $button = $($button);
              }
              if (!$button.hasClass('checked')) {
                _this.makeValid();
              } else if (!$button.siblings().hasClass('checked')) {
                _this.makeInvalid();
              } else {
                _this.makeValid();
              }
              return _this.form.form.trigger('field_filled');
            };
          })(this));
        }
      },
      'attachState': {
        input: function() {
          var allowedKeys;
          this.input.on('focus', (function(_this) {
            return function() {
              _this.field.addClass('focus');
              if (!(!_this.form.options.submitOnEnter || _this.type === 'textarea')) {
                return $window.on('keypress.field_focused', function(event) {
                  if (event.which === 13) {
                    return _this.form.form.trigger('submit_current_step');
                  }
                });
              }
            };
          })(this));
          this.input.on('blur', (function(_this) {
            return function() {
              _this.field.removeClass('focus');
              if (!(!_this.form.options.submitOnEnter || _this.type === 'textarea')) {
                return $window.off('keypress.field_focused');
              }
            };
          })(this));
          if (this.forcePattern) {
            if (this.forceSpecial) {
              this.input.on('change', (function(_this) {
                return function(event) {
                  var value;
                  value = _this.input[0].value;
                  if (!regEx[_this.forcePattern].test(value)) {
                    switch (_this.forcePattern) {
                      case 'slug':
                        value = value.replace(/\s/g, '-').toLowerCase();
                        break;
                      case 'name':
                        value = value.replace(/\s/g, '_').toLowerCase();
                        break;
                      case 'lower':
                        value = value.toLowerCase();
                        break;
                      case 'upper':
                        value = value.toUpperCase();
                    }
                  }
                  _this.input[0].value = value;
                  return _this.value = value;
                };
              })(this));
            }
          }
          if (this.maximum) {
            allowedKeys = [8, 37, 38, 39, 40];
            this.input.on('keydown', (function(_this) {
              return function(event) {
                var ref, selectEnd, selectStart;
                if (((ref = _this.input[0].value) != null ? ref.length : void 0) >= _this.maximum) {
                  selectStart = _this.input[0].selectionStart || 0;
                  selectEnd = _this.input[0].selectionEnd || 0;
                  if (!(event.ctrlKey || event.metaKey || allowedKeys.includes(event.which) || (selectStart - selectEnd > 0))) {
                    event.preventDefault();
                    _this.field.addClass('has_warning').attr('data-warning', "Maximum # of characters allowed is " + _this.maximum);
                    return setTimeout(function() {
                      return _this.field.removeClass('has_warning');
                    }, 2000);
                  }
                }
              };
            })(this));
          }
          return this.field.on('value_changed', (function(_this) {
            return function() {
              var ref;
              if (_this.maximum && ((ref = _this.input[0].value) != null ? ref.length : void 0) > _this.maximum) {
                _this.input[0].value = _this.input[0].value.slice(0, _this.maximum);
                return _this.input.trigger('change');
              } else {
                _this.value = _this.input[0].value;
                if (_this.value) {
                  _this.makeFilled();
                } else {
                  _this.makeNotFilled();
                }
                return _this.updateDeps();
              }
            };
          })(this));
        },
        button: function() {
          this.field.on('value_changed', (function(_this) {
            return function(event, $button) {
              var buttonValue;
              if ($button) {
                if ($button.constructor !== jQuery) {
                  $button = $($button);
                }
                buttonValue = $button.find('input').val();
                if (!$button.hasClass('checked')) {
                  _this.checkOn($button);
                  if (_this.type === 'checkbox_single') {
                    _this.value = true;
                  } else {
                    _this.value.push(buttonValue);
                  }
                } else {
                  _this.checkOff($button);
                  if (_this.type === 'checkbox_single') {
                    _this.value = false;
                  } else {
                    _this.value.splice(_this.value.indexOf(buttonValue), 1);
                  }
                }
                if (_this.value.length) {
                  _this.makeFilled();
                } else {
                  _this.makeNotFilled();
                }
                return _this.updateDeps();
              }
            };
          })(this));
          return this.field.find('label').on('click', function(event) {
            event.preventDefault();
            return $(this).parents('.input-button').trigger('click');
          });
        }
      },
      'detach': {
        input: function() {
          this.field.off();
          return this.input.off();
        },
        button: function() {
          this.field.off();
          this.input.off();
          return this.input.find('label').off();
        }
      },
      'disable': {
        input: function() {
          this.input.prop('disabled', true);
          return this.disabled = true;
        },
        button: function() {
          return this.disabled = true;
        }
      },
      'enable': {
        input: function() {
          this.input.prop('disabled', false);
          return this.disabled = false;
        },
        button: function() {
          return this.disabled = false;
        }
      },
      'fetchValue': {
        input: function() {
          if (!this.value || typeof this.value === 'boolean') {
            return this.value;
          }
          if (this.value.toLowerCase() === 'true') {
            return true;
          } else if (this.value.toUpperCase() === 'false') {
            return false;
          } else {
            return this.value;
          }
        },
        button: function() {
          if (!this.value || typeof this.value === 'boolean' || (typeof this.value === 'object' && this.value.constructor === Array)) {
            return this.value;
          }
          if (this.value.toLowerCase() === 'true') {
            return true;
          } else if (this.value.toUpperCase() === 'false') {
            return false;
          } else {
            return this.value;
          }
        }
      },
      'setValue': {
        input: function(value) {
          if (!(value == null)) {
            this.value = value;
          }
          this.input[0].value = value;
          if (value) {
            this.makeFilled();
            if (this.test()) {
              this.makeValid();
            } else {
              this.makeInvalid();
            }
          }
          return this.input.trigger('change');
        },
        button: function(value) {
          if (this.type === 'checkbox_single') {
            if (value) {
              this.value = true;
              this.checkOn(this.input);
              this.makeFilled();
              return this.makeValid();
            } else {
              this.value = false;
              return this.checkOff(this.input);
            }
          } else {
            if (!Array.isArray(value)) {
              value = [value];
            }
            this.value = value;
            value.forEach((function(_this) {
              return function(subValue) {
                var $matchedButton, $matchedInput;
                $matchedInput = _this.field.find("input[value='" + subValue + "']");
                if ($matchedInput.length) {
                  $matchedButton = $matchedInput.parents('.input-button').first();
                  return checkOn($matchedButton);
                } else {
                  return _this.value.splice(_this.value.indexOf(subValue), 1);
                }
              };
            })(this));
            if (this.value.length) {
              this.makeFilled();
              if (this.test()) {
                return this.makeValid();
              }
            }
          }
        }
      },
      'empty': {
        input: function() {
          this.field.removeClass('filled valid error blur focus');
          this.value = '';
          return this.input.val(this.value);
        },
        button: function() {
          this.field.removeClass('filled valid error blur focus');
          this.value = this.type === 'radio' ? '' : this.type === 'checkbox_single' ? false : [];
          return this.input.filter(function() {
            return $(this).hasClass('checked');
          }).each((function(_this) {
            return function(i, el) {
              return _this.checkOff($(el));
            };
          })(this));
        }
      },
      'test': {
        input: function() {
          var inputValue, passedTest, ref;
          inputValue = typeof this.input[0].value === 'boolean' ? this.input[0].value : (ref = this.input[0].value) != null ? ref.replace(util.regEx.whiteSpace, '') : void 0;
          passedTest = this.pattern ? this.pattern.test(inputValue) : inputValue;
          if (this.value !== inputValue) {
            this.value = inputValue;
          }
          if (this.disabledForever) {
            passedTest = true;
          }
          if (passedTest) {
            return true;
          } else {
            return false;
          }
        },
        button: function() {
          if (this.field.find('[checked]').length) {
            return true;
          } else {
            if (this.field.find(':checked').length) {
              return true;
            } else {
              if (this.type === 'radio' && (this.value != null)) {
                return true;
              } else {
                return false;
              }
            }
          }
        }
      }
    };
    Form.prototype.fieldProtos = {
      'text': {
        prepare: defaultFns.prepare.input,
        attachValidation: defaultFns.attachValidation.input,
        attachState: defaultFns.attachState.input,
        detach: defaultFns.detach.input,
        disable: defaultFns.disable.input,
        enable: defaultFns.enable.input,
        fetchValue: defaultFns.fetchValue.input,
        setValue: defaultFns.setValue.input,
        empty: defaultFns.empty.input,
        test: defaultFns.test.input
      },
      'full_name': {
        prepare: defaultFns.prepare.input,
        attachValidation: defaultFns.attachValidation.input,
        attachState: defaultFns.attachState.input,
        detach: defaultFns.detach.input,
        disable: defaultFns.disable.input,
        enable: defaultFns.enable.input,
        fetchValue: defaultFns.fetchValue.button,
        setValue: defaultFns.setValue.button,
        empty: defaultFns.empty.input,
        test: function() {
          var inputValue, passedTest, ref;
          inputValue = (ref = this.input[0].value) != null ? ref.replace(util.regEx.whiteSpace, '') : void 0;
          if (this.value !== inputValue) {
            this.value = inputValue;
          }
          if (this.disabledForever) {
            passedTest = true;
          }
          return inputValue !== '' && util.regEx.fullName.test(inputValue);
        }
      },
      'password': {
        prepare: defaultFns.prepare.input,
        attachValidation: defaultFns.attachValidation.input,
        attachState: defaultFns.attachState.input,
        detach: defaultFns.detach.input,
        disable: defaultFns.disable.input,
        enable: defaultFns.enable.input,
        fetchValue: defaultFns.fetchValue.button,
        setValue: defaultFns.setValue.button,
        empty: defaultFns.empty.input,
        test: function() {
          var $passwordOrig, inputValue, passedTest, passwordOrigValue, ref, ref1;
          inputValue = (ref = this.input[0].value) != null ? ref.replace(util.regEx.whiteSpace, '') : void 0;
          passedTest = inputValue;
          if (this.value !== inputValue) {
            this.value = inputValue;
          }
          if (this.name.includes('password_confirm')) {
            $passwordOrig = this.form.form.find('.fieldset.fieldtype_password');
            passwordOrigValue = $passwordOrig.find('input').val();
            passedTest = inputValue === passwordOrigValue;
          }
          if (this.minimum && ((ref1 = this.value) != null ? ref1.length : void 0) < this.minimum) {
            passedTest = false;
          }
          return passedTest;
        }
      },
      'email': {
        prepare: defaultFns.prepare.input,
        attachValidation: defaultFns.attachValidation.input,
        attachState: defaultFns.attachState.input,
        detach: defaultFns.detach.input,
        disable: defaultFns.disable.input,
        enable: defaultFns.enable.input,
        fetchValue: defaultFns.fetchValue.button,
        setValue: defaultFns.setValue.button,
        empty: defaultFns.empty.input,
        test: function() {
          var inputValue, passedTest, ref;
          inputValue = (ref = this.input[0].value) != null ? ref.replace(util.regEx.whiteSpace, '') : void 0;
          if (this.value !== inputValue) {
            this.value = inputValue;
          }
          if (this.disabledForever) {
            passedTest = true;
          }
          return inputValue && util.regEx.email.test(inputValue);
        }
      },
      'tel': {
        prepare: defaultFns.prepare.input,
        attachValidation: defaultFns.attachValidation.input,
        attachState: defaultFns.attachState.input,
        detach: defaultFns.detach.input,
        disable: defaultFns.disable.input,
        enable: defaultFns.enable.input,
        fetchValue: defaultFns.fetchValue.button,
        setValue: defaultFns.setValue.button,
        empty: defaultFns.empty.input,
        test: function() {
          var inputValue, passedTest, ref;
          inputValue = (ref = this.input[0].value) != null ? ref.replace(util.regEx.whiteSpace, '') : void 0;
          if (this.value !== inputValue) {
            this.value = inputValue;
          }
          if (this.disabledForever) {
            passedTest = true;
          }
          return inputValue && inputValue.length >= 7 && util.regEx.phone.test(inputValue);
        }
      },
      'textarea': {
        prepare: defaultFns.prepare.input,
        attachValidation: defaultFns.attachValidation.input,
        attachState: defaultFns.attachState.input,
        detach: defaultFns.detach.input,
        disable: defaultFns.disable.input,
        enable: defaultFns.enable.input,
        fetchValue: defaultFns.fetchValue.input,
        setValue: defaultFns.setValue.input,
        empty: defaultFns.empty.input,
        test: defaultFns.test.input
      },
      'select': {
        prepare: function() {
          var $pseudoInput, setPseudoInputValue;
          if (!!this.form.options.preserveValuesAfterRefresh) {
            this.value = this.input[0].value;
          } else {
            if (!this["default"]) {
              this.value = '';
            }
          }
          this.input.val(this.value);
          if (this.value) {
            this.makeFilled();
          }
          this.input.on("change keypress blur", (function(_this) {
            return function() {
              return _this.field.trigger('value_changed');
            };
          })(this));
          if (this.height != null) {
            this.input.css('height', this.height);
          }
          this.attachState();
          if (this.required) {
            this.attachValidation();
            if (this.test()) {
              this.makeValid();
            } else {
              this.makeInvalid();
            }
          } else {
            this.makeValid();
          }
          this.label = this.field.children('label').html();
          $pseudoInput = this.input.next();
          setPseudoInputValue = (function(_this) {
            return function() {
              var inputValue, ref, ref1;
              inputValue = ((ref = _this.input.children('option[selected]')[0]) != null ? ref.innerHTML : void 0) || ((ref1 = _this.input.children('option:selected')[0]) != null ? ref1.innerHTML : void 0);
              return $pseudoInput.html(inputValue || _this.value || _this.label);
            };
          })(this);
          setPseudoInputValue();
          return this.input.on('change keyup blur', (function(_this) {
            return function() {
              _this.input.children(':selected').attr('selected', '').siblings().removeAttr('selected');
              return setPseudoInputValue();
            };
          })(this));
        },
        attachValidation: defaultFns.attachValidation.input,
        attachState: defaultFns.attachState.input,
        detach: defaultFns.detach.input,
        disable: defaultFns.disable.input,
        enable: defaultFns.enable.input,
        fetchValue: defaultFns.fetchValue.input,
        setValue: defaultFns.setValue.input,
        empty: defaultFns.empty.input,
        test: defaultFns.test.input
      },
      'file': {
        prepare: function() {
          this.input.on("change " + textChangeEvent + " blur", (function(_this) {
            return function() {
              return _this.field.trigger('value_changed');
            };
          })(this));
          this.preview = this.field.find('.file-preview');
          this.value = this["default"] || null;
          this.base64 = this.value;
          if (this.value) {
            this.makeFilled();
          }
          this.attachState();
          this.input.trigger('change');
          if (this.height != null) {
            this.input.css('height', this.height);
          }
          if (this.desc) {
            this.field.addClass('has_desc');
          }
          if (this.required) {
            this.attachValidation();
            if (this.test()) {
              return this.makeValid();
            } else {
              return this.makeInvalid();
            }
          } else {
            return this.makeValid();
          }
        },
        attachValidation: defaultFns.attachValidation.input,
        attachState: function() {
          return this.field.add(this.input).on('value_changed change', (function(_this) {
            return function() {
              var uploadedFile;
              _this.value = _this.input[0].value;
              if (_this.value) {
                _this.makeFilled();
              } else {
                _this.makeNotFilled();
              }
              _this.updateDeps();
              uploadedFile = _this.input[0].files[0];
              if (!uploadedFile) {
                return;
              }
              return _this.checkDimensions(uploadedFile).then(function() {
                var fileReader;
                fileReader = new FileReader();
                fileReader.onload = function() {
                  _this.base64 = fileReader.result;
                  if (_this.preview.length && _this.base64) {
                    return _this.preview.addClass('show').html("<img src=\"" + _this.base64 + "\">");
                  }
                };
                if (uploadedFile) {
                  return fileReader.readAsDataURL(uploadedFile);
                }
              }, function(reason) {
                if (reason === 'max') {
                  return alert("Image too large! Maximum allowed dimensions are " + _this.maximum.width + "x" + _this.maximum.height);
                } else {
                  return alert("Image too small! Minimum dimensions are " + _this.minimum.width + "x" + _this.minimum.height);
                }
              });
            };
          })(this));
        },
        detach: defaultFns.detach.input,
        disable: defaultFns.disable.input,
        enable: defaultFns.enable.input,
        fetchValue: function(regular) {
          if (!regular) {
            return this.base64;
          } else {
            return null;
          }
        },
        setValue: function(value) {
          if (value) {
            this.base64 = value;
          }
          if (this.preview.length) {
            return this.preview.addClass('show').html("<img src=\"" + this.base64 + "\">");
          }
        },
        empty: defaultFns.empty.input,
        test: defaultFns.test.input,
        checkDimensions: function(file) {
          if (!file) {
            return;
          }
          return new Promise((function(_this) {
            return function(resolve, reject) {
              var testImg;
              if (!_this.minimum && !_this.maximum) {
                resolve();
              }
              testImg = new Image();
              testImg.src = URL.createObjectURL(file);
              return testImg.onload = function() {
                var dimensions;
                if (_this.maximum) {
                  if (_this.maximum.constructor === String) {
                    dimensions = _this.maximum.split('x');
                    if (dimensions.length === 1) {
                      dimensions[1] = dimensions[0];
                    }
                    _this.maximum = {
                      width: dimensions[0],
                      height: dimensions[1]
                    };
                  }
                  if (_this.maximum.constructor === Number) {
                    _this.maximum = {
                      width: _this.maximum,
                      height: _this.maximum
                    };
                  }
                  if (testImg.width > _this.maximum.width || testImg.height > _this.maximum.height) {
                    reject('max');
                  } else {
                    if (_this.minimum == null) {
                      resolve();
                    }
                  }
                }
                if (_this.minimum) {
                  if (_this.minimum.constructor === String) {
                    dimensions = _this.minimum.split('x');
                    if (dimensions.length === 1) {
                      dimensions[1] = dimensions[0];
                    }
                    _this.minimum = {
                      width: dimensions[0],
                      height: dimensions[1]
                    };
                  }
                  if (_this.minimum.constructor === Number) {
                    _this.minimum = {
                      width: _this.minimum,
                      height: _this.minimum
                    };
                  }
                  if (testImg.width < _this.minimum.width || testImg.height < _this.minimum.height) {
                    return reject('min');
                  } else {
                    return resolve();
                  }
                }
              };
            };
          })(this));
        }
      },
      'radio': {
        prepare: defaultFns.prepare.button,
        attachValidation: function() {
          return this.field.on('value_changed', (function(_this) {
            return function() {
              _this.makeValid();
              return _this.form.form.trigger('field_filled');
            };
          })(this));
        },
        attachState: function() {
          this.field.on('value_changed', (function(_this) {
            return function(event, $button) {
              var newValue;
              if ($button.constructor !== jQuery) {
                $button = $($button);
              }
              newValue = $button.find('input').val();
              if (newValue != null) {
                _this.value = newValue;
              }
              _this.checkOn($button);
              _this.makeFilled();
              return _this.updateDeps();
            };
          })(this));
          return this.field.find('label').on('click', function(event) {
            event.preventDefault();
            return $(this).parents('.input-button').trigger('click');
          });
        },
        detach: defaultFns.detach.button,
        disable: defaultFns.disable.button,
        enable: defaultFns.enable.button,
        fetchValue: defaultFns.fetchValue.button,
        setValue: function(value) {
          var $matchedButton, $matchedInput;
          $matchedInput = this.field.find("input[value='" + value + "']");
          if ($matchedInput.length) {
            this.value = value;
            $matchedButton = $matchedInput.parents('.input-button').first();
            this.checkOn($matchedButton);
            this.makeFilled();
            if (this.test()) {
              return this.makeValid();
            }
          }
        },
        empty: defaultFns.empty.button,
        test: defaultFns.test.button
      },
      'radio_hybrid': {
        prepare: defaultFns.prepare.button,
        attachValidation: defaultFns.attachValidation.button,
        attachState: defaultFns.attachState.button,
        detach: defaultFns.detach.button,
        disable: defaultFns.disable.button,
        enable: defaultFns.enable.button,
        fetchValue: defaultFns.fetchValue.button,
        setValue: defaultFns.setValue.button,
        empty: defaultFns.empty.button,
        test: defaultFns.test.button
      },
      'checkbox': {
        prepare: defaultFns.prepare.button,
        attachValidation: defaultFns.attachValidation.button,
        attachState: defaultFns.attachState.button,
        detach: defaultFns.detach.button,
        disable: defaultFns.disable.button,
        enable: defaultFns.enable.button,
        fetchValue: defaultFns.fetchValue.button,
        setValue: defaultFns.setValue.button,
        empty: defaultFns.empty.button,
        test: defaultFns.test.button
      },
      'checkbox_single': {
        prepare: defaultFns.prepare.button,
        attachValidation: defaultFns.attachValidation.button,
        attachState: defaultFns.attachState.button,
        detach: defaultFns.detach.button,
        disable: defaultFns.disable.button,
        enable: defaultFns.enable.button,
        fetchValue: defaultFns.fetchValue.input,
        setValue: defaultFns.setValue.button,
        empty: defaultFns.empty.input,
        test: defaultFns.test.button
      },
      'group': {
        prepare: function() {
          this.toggle = this.field.children('.group-toggle');
          this.container = this.field.children('.group-container');
          this.fieldsets = this.container.children('.fieldset');
          this.fields = [];
          this.fieldsRequired = [];
          this.fieldsets.each((function(_this) {
            return function(i, el) {
              var newField;
              newField = new Field($(el), _this.form);
              _this.fields.push(newField);
              if (newField.required) {
                _this.fieldsRequired.push(newField);
              }
              return newField.insideGroup = true;
            };
          })(this));
          if (this.collapsed && this.toggle.length) {
            this.field.addClass('collapsed');
            if (this.container[0].offsetHeight === 0) {
              this.container[0].style.display = 'none';
            }
          }
          this.attachState();
          if (this.required) {
            this.attachValidation();
            if (this.test()) {
              this.makeValid();
            } else {
              this.makeInvalid();
            }
          } else {
            this.makeValid();
          }
          return fixWidth(this.fields);
        },
        attachValidation: function() {
          var $required, j, len, ref, results;
          ref = this.fieldsRequired;
          results = [];
          for (j = 0, len = ref.length; j < len; j++) {
            $required = ref[j];
            results.push($required.field.on('value_changed.for_group', (function(_this) {
              return function() {
                if (_this.test()) {
                  return _this.makeValid();
                } else {
                  return _this.makeInvalid();
                }
              };
            })(this)));
          }
          return results;
        },
        attachState: function() {
          if (this.toggle.length) {
            return this.toggle.on('click', (function(_this) {
              return function() {
                if (_this.collapsed) {
                  _this.field.removeClass('collapsed');
                  if (_this.form.options.heightToggleAnimation) {
                    _this.container.slideDown(300);
                  } else {
                    _this.container.css('display', 'block');
                  }
                } else {
                  _this.field.addClass('collapsed');
                  if (_this.form.options.heightToggleAnimation) {
                    _this.container.slideUp(300);
                  } else {
                    _this.container.css('display', 'none');
                  }
                }
                return _this.collapsed = !_this.collapsed;
              };
            })(this));
          }
        },
        detach: function() {
          this.fields.forEach(function(field) {
            return field.detach();
          });
          return this.toggle.off();
        },
        disable: function() {
          this.disabled = true;
          return this.fields.forEach(function(field) {
            return field.disable();
          });
        },
        enable: function() {
          this.disabled = false;
          return this.fields.forEach(function(field) {
            return field.enable();
          });
        },
        fetchValue: function(asArray) {
          var field, fieldKeyValPair, j, len, ref, values;
          values = asArray ? [] : {};
          ref = this.fields;
          for (j = 0, len = ref.length; j < len; j++) {
            field = ref[j];
            if (asArray) {
              fieldKeyValPair = {};
              fieldKeyValPair[field.name] = field.fetchValue();
              values.push(fieldKeyValPair);
            } else {
              values[field.name] = field.fetchValue();
            }
          }
          return values;
        },
        setValue: function(values) {
          if (!values || (values.constructor !== Object && values.constructor !== Array)) {
            return;
          }
          if (values.constructor === Array) {
            return values.forEach((function(_this) {
              return function(value, subIndex) {
                return _this.fieldsets.eq(subIndex).data('Field').setValue(value);
              };
            })(this));
          } else if (values.constructor === Object) {
            return this.fieldsets.each(function() {
              var fieldInstance, valueToSet;
              fieldInstance = $(this).data('Field');
              valueToSet = values[fieldInstance.name];
              if ((valueToSet != null) && fieldInstance) {
                return fieldInstance.setValue(valueToSet);
              }
            });
          } else {
            return this.fieldsets.first().data('Field').setValue(values);
          }
        },
        empty: function() {
          return this.fields.forEach(function(field) {
            return field.empty();
          });
        },
        test: function(showErrors, logBadFields) {
          var badFields, problem, showErrorsAsPassed;
          problem = false;
          badFields = [];
          showErrorsAsPassed = showErrors;
          this.fieldsRequired = this.fields.filter(function(field) {
            return field.required;
          });
          this.fieldsRequired.forEach((function(_this) {
            return function(field) {
              var isValid, validateByClass;
              validateByClass = field.field.hasClass('validate_by_class');
              if (field.field.hasClass('dont-error')) {
                showErrors = false;
              }
              isValid = validateByClass ? field.field.hasClass('valid') : field.test(showErrorsAsPassed, logBadFields);
              if (isValid) {
                return field.hideError();
              } else {
                if (showErrors) {
                  field.showError();
                }
                problem = true;
                return badFields.push(field);
              }
            };
          })(this));
          if (logBadFields) {
            console.log(badFields);
          }
          if (problem) {
            if (showErrors) {
              this.showError();
            }
            return false;
          } else {
            this.hideError();
            return true;
          }
        }
      },
      'repeater': {
        prepare: function() {
          this.toggle = this.field.children('.repeater-toggle');
          this.container = this.field.children('.repeater-container');
          this.placeholder = this.container.children('.repeater-placeholder');
          this.button = this.container.children('.repeater-button');
          this.repeaterItemsContainer = this.container.children('.repeater-items');
          this.repeaterTemplate = {
            'html': this.container.children('.repeater-template').html(),
            'el': this.container.children('.repeater-template').children()
          };
          this.collectFields(true);
          if (this.collapsed && this.toggle.length) {
            this.field.addClass('collapsed');
            if (this.container[0].offsetHeight === 0) {
              this.container[0].style.display = 'none';
            }
          }
          this.attachState();
          if (this.required) {
            this.attachValidation();
            if (this.test()) {
              this.makeValid();
            } else {
              this.makeInvalid();
            }
          } else {
            this.makeValid();
          }
          if (this.repeaterItems.length === 0) {
            this.hideButton();
          } else {
            this.showButton();
          }
          return fixWidth(this.fields);
        },
        collectFields: function(firstTime) {
          this.repeaterItems = [];
          this.repeaterItemsContainer.children('.repeater-item').each((function(_this) {
            return function(i, el) {
              return _this.repeaterItems.push(el);
            };
          })(this));
          this.repeaterIndex = this.repeaterItems.length;
          this.fields = [];
          this.repeaterItems.forEach((function(_this) {
            return function(repeaterItem) {
              var $additionalFieldsets;
              $additionalFieldsets = $(repeaterItem).children('.repeater-item-fields').children('.dynamic_block').children('.fieldset');
              return $(repeaterItem).children('.repeater-item-fields').children('.fieldset').add($additionalFieldsets).each(function(i, el) {
                var newField;
                newField = firstTime ? new Field($(el), _this.form) : $(el).data('Field');
                _this.fields.push(newField);
                return newField.insideRepeater = true;
              });
            };
          })(this));
          return this.fieldsRequired = this.fields.filter(function(field) {
            return field.required;
          });
        },
        attachValidation: function() {
          var $required, j, len, ref, results;
          ref = this.fieldsRequired;
          results = [];
          for (j = 0, len = ref.length; j < len; j++) {
            $required = ref[j];
            results.push($required.field.on('value_changed.for_repeater', (function(_this) {
              return function() {
                if (_this.test()) {
                  return _this.makeValid();
                } else {
                  return _this.makeInvalid();
                }
              };
            })(this)));
          }
          return results;
        },
        attachState: function() {
          this.repeaterTemplate.el.find('.input').prop('disabled', true);
          if (this.repeaterIndex) {
            this.field.addClass('has_fields');
          }
          this.field.on('click', '.repeater-delete', (function(_this) {
            return function(event) {
              var $deleteButton, $repeaterItem;
              $deleteButton = $(event.target);
              if ($deleteButton.parents('.repeater-container').first()[0] === _this.container[0]) {
                if (_this.repeaterItems.length !== _this.minimum) {
                  $repeaterItem = $deleteButton.parents('.repeater-item').first();
                  _this["delete"]($repeaterItem);
                  if (_this.repeaterIndex === 0) {
                    _this.field.removeClass('has_fields');
                  }
                  if (!(_this.repeaterItems.length >= _this.maximum)) {
                    _this.enableButton();
                  }
                }
                if (_this.repeaterItems.length === 0) {
                  return _this.hideButton();
                }
              }
            };
          })(this));
          this.field.on('click', '.repeater-clone', (function(_this) {
            return function(event) {
              var $cloneButton, $repeaterItem;
              $cloneButton = $(event.target);
              if ($cloneButton.parents('.repeater-container').first()[0] === _this.container[0]) {
                if (!(_this.repeaterItems.length >= _this.maximum)) {
                  $repeaterItem = $cloneButton.parents('.repeater-item').first();
                  return _this.clone($repeaterItem);
                } else {
                  return _this.disableButton();
                }
              }
            };
          })(this));
          this.button.add(this.placeholder).on('click', (function(_this) {
            return function() {
              _this.showButton();
              if (!(_this.repeaterItems.length >= _this.maximum)) {
                _this.add();
                return _this.field.addClass('has_fields');
              } else {
                return _this.disableButton();
              }
            };
          })(this));
          if (this.toggle.length) {
            return this.toggle.on('click', (function(_this) {
              return function() {
                if (_this.collapsed) {
                  _this.field.removeClass('collapsed');
                  if (_this.form.options.heightToggleAnimation) {
                    _this.container.slideDown(300);
                  } else {
                    _this.container.css('display', 'block');
                  }
                } else {
                  _this.field.addClass('collapsed');
                  if (_this.form.options.heightToggleAnimation) {
                    _this.container.slideUp(300);
                  } else {
                    _this.container.css('display', 'none');
                  }
                }
                return _this.collapsed = !_this.collapsed;
              };
            })(this));
          }
        },
        detach: function() {
          this.fields.forEach(function(field) {
            return field.detach();
          });
          this.button.off();
          this.placeholder.off();
          this.toggle.off();
          this.field.find('.repeater-delete').off();
          return this.field.find('.repeater-clone').off();
        },
        disable: function() {
          this.disabled = true;
          return this.fields.forEach(function(field) {
            return field.disable();
          });
        },
        enable: function() {
          this.disabled = false;
          return this.fields.forEach(function(field) {
            return field.enable();
          });
        },
        fetchValue: function() {
          var $additionalFieldsets, $repeaterItem, j, len, ref, repeaterItem, repeaterItemIndex, values;
          values = [];
          ref = this.repeaterItems;
          for (repeaterItemIndex = j = 0, len = ref.length; j < len; repeaterItemIndex = ++j) {
            repeaterItem = ref[repeaterItemIndex];
            $repeaterItem = $(repeaterItem);
            if (this.type === 'repeater') {
              $repeaterItem.find('.fieldset').each(function() {
                var fieldsetInstance;
                fieldsetInstance = $(this).data('Field');
                return values.push(fieldsetInstance.fetchValue());
              });
            } else {
              values[repeaterItemIndex] = {};
              $additionalFieldsets = $repeaterItem.children('.repeater-item-fields').children('.dynamic_block').children('.fieldset');
              $repeaterItem.children('.repeater-item-fields').children('.fieldset').add($additionalFieldsets).each(function() {
                var fieldsetInstance, fieldsetName;
                fieldsetInstance = $(this).data('Field');
                fieldsetName = fieldsetInstance.name;
                fieldsetName = fieldsetName.replace('[]', '');
                return values[repeaterItemIndex][fieldsetName] = fieldsetInstance.fetchValue();
              });
            }
          }
          return values;
        },
        setValue: function(values) {
          if (!values) {
            return;
          }
          if (this.type === 'repeater_group' && !Array.isArray(values)) {
            values = [values];
          }
          values.forEach((function(_this) {
            return function(itemValues, index) {
              var $extraFields, $fields;
              if (_this.type === 'repeater_group') {
                if (itemValues.constructor !== Object && itemValues.constructor !== Array) {
                  return;
                }
              }
              if (index >= _this.repeaterItems.length) {
                _this.add();
              }
              $extraFields = $(_this.repeaterItems[index]).children('.repeater-item-fields').children('.dynamic_block').children('.fieldset');
              $fields = $(_this.repeaterItems[index]).children('.repeater-item-fields').children('.fieldset').add($extraFields);
              if (itemValues.constructor === Array) {
                return itemValues.forEach(function(value, subIndex) {
                  return $fields.eq(subIndex).data('Field').setValue(value);
                });
              } else if (itemValues.constructor === Object) {
                return $fields.each(function() {
                  var fieldInstance, fieldName, valueToSet;
                  fieldInstance = $(this).data('Field');
                  fieldName = fieldInstance.name;
                  valueToSet = itemValues[fieldName];
                  if ((valueToSet != null) && fieldInstance) {
                    return fieldInstance.setValue(valueToSet);
                  }
                });
              } else {
                return $fields.first().data('Field').setValue(itemValues);
              }
            };
          })(this));
          if (this.repeaterIndex) {
            this.showButton();
            return this.field.addClass('has_fields');
          }
        },
        empty: function() {
          return this.fields.forEach(function(field) {
            return field.empty();
          });
        },
        test: function(showErrors, logBadFields) {
          var badFields, problem, showErrorsAsPassed;
          problem = false;
          badFields = [];
          showErrorsAsPassed = showErrors;
          this.fieldsRequired = this.fields.filter(function(field) {
            return field.required;
          });
          this.fieldsRequired.forEach((function(_this) {
            return function(field) {
              var isValid, validateByClass;
              validateByClass = field.field.hasClass('validate_by_class');
              if (field.field.hasClass('dont-error')) {
                showErrors = false;
              }
              isValid = validateByClass ? field.field.hasClass('valid') : field.test(showErrorsAsPassed, logBadFields);
              if (isValid) {
                return field.hideError();
              } else {
                if (showErrors) {
                  field.showError();
                }
                problem = true;
                return badFields.push(field);
              }
            };
          })(this));
          if (logBadFields) {
            console.log(badFields);
          }
          if (problem) {
            if (showErrors) {
              this.showError();
            }
            return false;
          } else {
            this.hideError();
            return true;
          }
        },
        add: function() {
          var $newField, newFieldHTML;
          this.repeaterIndex++;
          $newField = $(document.createElement('div'));
          newFieldHTML = this.repeaterTemplate.html.replace(/xyz/g, (function(_this) {
            return function() {
              return _this.repeaterIndex;
            };
          })(this));
          $newField.html(newFieldHTML);
          $newField.find('.disabled_forever').removeClass('disabled_forever').data('disabled_forever', false);
          $newField.children().children('.repeater-item-fields').children('.fieldset').each((function(_this) {
            return function(i, el) {
              return _this.addChildField($(el));
            };
          })(this));
          this.repeaterItems.push($newField[0].children[0]);
          this.repeaterItemsContainer.append($newField[0].children[0]);
          return this.step.trigger('height_changed');
        },
        "delete": function($repeaterItem) {
          var $extraFields, $repeaterItemFields, indexOfLastField, indexOfRepeaterItem;
          this.repeaterIndex--;
          $extraFields = $repeaterItem.children('.repeater-item-fields').children('.dynamic_block').children('.fieldset');
          $repeaterItemFields = $repeaterItem.children('.repeater-item-fields').children('.fieldset').add($extraFields);
          indexOfRepeaterItem = $repeaterItem.index();
          indexOfLastField = $(this.repeaterItems[this.repeaterItems.length - 1]).index();
          this.repeaterItems.splice(this.repeaterItems.indexOf($repeaterItem[0]), 1);
          $repeaterItemFields.each((function(_this) {
            return function(i, el) {
              return _this.removeChildField($(el));
            };
          })(this));
          $repeaterItem.addClass('delete-started').animate({
            height: 0,
            opacity: 0
          }, 350, 'swing', function() {
            return $repeaterItem.remove();
          });
          if (indexOfRepeaterItem < indexOfLastField) {
            this.repeaterItems.forEach((function(_this) {
              return function(item, index) {
                if ($(item).index() >= indexOfRepeaterItem) {
                  return _this.resetIndex($(item), true);
                }
              };
            })(this));
          }
          return setTimeout((function(_this) {
            return function() {
              return _this.step.trigger('height_changed');
            };
          })(this), 400);
        },
        clone: function($repeaterItem) {
          var $cloned, $extraFields, indexOfLastField, indexOfRepeaterItem;
          this.repeaterIndex++;
          indexOfRepeaterItem = $repeaterItem.index();
          indexOfLastField = $(this.repeaterItems[this.repeaterItems.length - 1]).index();
          $cloned = util.cloneSafe($repeaterItem, true);
          $extraFields = $cloned.children('.repeater-item-fields').children('.dynamic_block').children('.fieldset');
          $cloned.insertAfter($repeaterItem);
          this.repeaterItems.splice(this.repeaterItems.indexOf($repeaterItem) + 2, 0, $cloned[0]);
          $cloned.children('.repeater-item-fields').children('.fieldset').add($extraFields).each((function(_this) {
            return function(i, el) {
              return _this.addChildField($(el));
            };
          })(this));
          if (indexOfRepeaterItem < indexOfLastField) {
            this.repeaterItems.forEach((function(_this) {
              return function(item) {
                if ($(item).index() >= indexOfRepeaterItem) {
                  return _this.resetIndex($(item));
                }
              };
            })(this));
          } else {
            this.resetIndex($cloned, false);
          }
          return this.step.trigger('height_changed');
        },
        resetIndex: function($repeaterItem, subtracted) {
          var $fieldsets, $title, newIndex, prevIndex;
          if (subtracted == null) {
            subtracted = false;
          }
          prevIndex = subtracted ? $repeaterItem.index() + 1 : $repeaterItem.index();
          newIndex = subtracted ? prevIndex - 1 : prevIndex + 1;
          $fieldsets = $repeaterItem.children('.repeater-item-fields').children('.fieldset');
          $title = $repeaterItem.children('.repeater-item-title');
          if ($title.length) {
            $title.html($title.html().replace(/\d$/, newIndex));
          }
          return $fieldsets.each(function() {
            var $fieldset, $inputs, $labels, currentID, newID;
            $fieldset = $(this);
            $labels = $fieldset.children('label');
            $inputs = $fieldset.children('input');
            if ($labels.length === 0) {
              $labels = $fieldset.children('.input-button').children('label');
            }
            if ($inputs.length === 0) {
              $inputs = $fieldset.children('.input-button').children('input');
            }
            currentID = $fieldset.data('id');
            newID = currentID.replace("_" + prevIndex + "_", "_" + newIndex + "_");
            $fieldset.data('id', newID);
            $labels.each(function() {
              var $label, currentLabel, newLabel;
              $label = $(this);
              currentLabel = $label.attr('for');
              newLabel = currentLabel.replace(currentID, newID);
              return $label.attr('for', newLabel);
            });
            return $inputs.each(function() {
              var $input;
              $input = $(this);
              currentID = $input.attr('id');
              newID = currentID.replace(currentID, newID);
              return $input.attr('id', newID);
            });
          });
        },
        enableButton: function() {
          return this.button.removeClass('disabled');
        },
        disableButton: function() {
          return this.button.addClass('disabled');
        },
        showButton: function() {
          this.button.addClass('show');
          return this.placeholder.removeClass('show');
        },
        hideButton: function() {
          this.button.removeClass('show');
          return this.placeholder.addClass('show');
        },
        addChildField: function($el) {
          var newField;
          newField = new Field($el, this.form);
          newField.enable();
          this.fields.push(newField);
          if (newField.required) {
            this.fieldsRequired.push(newField);
            return newField.field.on('value_changed.for_repeater', (function(_this) {
              return function() {
                if (_this.test()) {
                  return _this.makeValid();
                } else {
                  return _this.makeInvalid();
                }
              };
            })(this));
          }
        },
        removeChildField: function($el) {
          var fieldEl, fieldInstance;
          if ($el.constructor === Field) {
            fieldInstance = $el;
            fieldEl = fieldInstance.field;
          } else {
            fieldInstance = $el.data('Field');
            fieldEl = $el;
          }
          this.fields.splice(this.fields.indexOf(fieldInstance), 1);
          if (this.fieldsRequired.includes(fieldInstance)) {
            this.fieldsRequired.splice(this.fieldsRequired.indexOf(fieldInstance), 1);
          }
          return fieldInstance.detach();
        }
      }
    };
    Form.prototype.fieldProtos.repeater_group = Form.prototype.fieldProtos.repeater;
    Form.Field = Field;
    parseWidth = function(string) {
      var delim, split;
      delim = string.includes('/') ? '/' : '-';
      split = string.split(delim);
      return parseFloat(split[0]) / parseFloat(split[1]);
    };
    fixWidth = function(fields) {
      var isLast, rowPercentage;
      rowPercentage = 0;
      isLast = function(fieldsetWidth) {
        rowPercentage += parseWidth(fieldsetWidth);
        if (rowPercentage >= 1) {
          rowPercentage = 0;
          return true;
        } else {
          return false;
        }
      };
      return fields.forEach(function(field) {
        var width;
        if (field.field.index() === 0) {
          rowPercentage = 0;
        }
        width = field.field.data('width');
        if (isLast(width)) {
          return field.field.addClass('is_last');
        } else {
          return field.field.removeClass('is_last');
        }
      });
    };

    /*==========================================================================
    		 Initial Preparation
    	==========================================================================
     */
    Form.prototype.Prepare = function(firstTime) {
      var formClassName;
      if (this.form.length === 0) {
        return;
      }
      if (this.form.find('.step').length === 0) {
        formClassName = this.form[0].className.split(' ')[1];
        this.form.wrapInner("<div class=\"" + formClassName + " step show\"></div>");
      }
      if (firstTime) {
        this.form.find('.step').each((function(_this) {
          return function(i, el) {
            var $fieldsets, $step, stepIndex;
            _this.fieldsInSteps.push([]);
            stepIndex = _this.fieldsInSteps.length - 1;
            $step = $(el);
            $fieldsets = $step.children('.fieldset');
            if ($fieldsets.length === 0) {
              $fieldsets = $step.find('.step-innerwrap').children('.fieldset');
            }
            return $fieldsets.each(function(i, el) {
              return _this.addField($(el), stepIndex);
            });
          };
        })(this));
        this.form.find('.step').first().addClass('show');
        this.setCurrentStepTo('visible');
      }
      this.disableFields(this.form);
      if (this.options.dontDisableFields) {
        this.enableFields(this.form);
      } else {
        this.enableFields(this.step.current);
      }
      this.attachFormEvents();
      this.attachButtonEvents();
      this.attachExtraEvents();
      return this.options.callbackOnPrepare(this);
    };
    Form.prototype.AddStep = function($step) {
      var $fieldsets, stepIndex;
      this.fieldsInSteps.push([]);
      stepIndex = this.fieldsInSteps.length - 1;
      $fieldsets = $step.children('.fieldset');
      if ($fieldsets.length === 0) {
        $fieldsets = $step.find('.step-innerwrap').children('.fieldset');
      }
      $fieldsets.each((function(_this) {
        return function(i, el) {
          return _this.addField($(el), stepIndex);
        };
      })(this));
      return this.multiStep = true;
    };
    Form.prototype.RemoveStep = function(index) {
      var stepFields;
      if (this.fieldsInSteps[index] == null) {
        return 'Specified index wasn\'t found.';
      }
      stepFields = this.fieldsInSteps[index];
      stepFields.forEach((function(_this) {
        return function(field) {
          _this.fields.splice(_this.fields.indexOf(field), 1);
          if (field.required) {
            return _this.fieldsRequired.splice(_this.fieldsRequired.indexOf(field), 1);
          }
        };
      })(this));
      return this.fieldsInSteps.splice(index, 1);
    };
    Form.prototype.Reset = function(resetStep) {
      if (resetStep == null) {
        resetStep = true;
      }
      if (resetStep) {
        this.form.find('.step.show, .results.show').removeClass('show').end().find('.step').first().addClass('show');
        return this.setCurrentStepTo('visible');
      }
    };
    Form.prototype.ReInit = function(rePrepare, resetInputFields) {
      if (rePrepare == null) {
        rePrepare = true;
      }
      if (resetInputFields) {
        this.Reset();
      }
      this.form.off().find('.step').off().end().find('.next, .back, .submit').off();
      this.fields.forEach(function(field) {
        return field.empty();
      });
      if (rePrepare) {
        return this.Prepare();
      }
    };
    Form.prototype.Restart = Form.prototype.ReInit;

    /*==========================================================================
    		 Validation
    	==========================================================================
     */

    /**
    	 * Validation Engine
    	 * 
    	 * @param {bool} showErrors        Indicates whether or not the fields should be marked with errors if the fail to pass the validaiton.
    	 * @param {bool} showErrorMessages Indicates if we should reveal the error messages (if present) for each failed field.
     */
    Form.prototype.Validate = function(showErrors, showErrorMessages, logBadFields) {
      var badFields, fieldsToCheck, numberOfErrors, problem, stepFields, stepIndex;
      if (showErrors == null) {
        showErrors = true;
      }
      problem = false;
      badFields = [];
      numberOfErrors = 0;
      if (this.skippedAStep || !this.multiStep) {
        fieldsToCheck = this.fieldsRequired;
      } else {
        stepIndex = this.step.current.index() - this.stepIndexOffset;
        stepFields = this.fieldsInSteps[stepIndex];
        if (!stepFields) {
          return true;
        }
        fieldsToCheck = this.fieldsInSteps[stepIndex].filter(function(field) {
          return field.required;
        });
      }
      fieldsToCheck.forEach((function(_this) {
        return function(field) {
          var isValid, showErrorsAsPassed, validateByClass;
          validateByClass = field.field.hasClass('validate_by_class');
          showErrorsAsPassed = showErrors;
          if (field.field.hasClass('dont-error')) {
            showErrors = false;
          }
          isValid = validateByClass ? field.field.hasClass('valid') : field.test(showErrorsAsPassed, logBadFields);
          if (isValid) {
            return field.hideError();
          } else {
            if (logBadFields) {
              badFields.push(field);
            }
            if (showErrors) {
              field.showError();
            }
            problem = true;
            numberOfErrors++;
            if (_this.skippedAStep && numberOfErrors === 1 && field.step[0] !== _this.step.current[0]) {
              _this.revealSection(field.step);
              return _this.setCurrentStepTo(field.step);
            }
          }
        };
      })(this));
      if (logBadFields) {
        console.log(badFields, fieldsToCheck);
      }
      this.options.callbackOnValidate(this);
      if (problem) {
        this.step.current.trigger('notvalid');
        return false;
      } else {
        this.step.current.trigger('valid');
        return true;
      }
    };

    /*==========================================================================
    		 Events
    	==========================================================================
     */
    Form.prototype.attachFormEvents = function() {
      this.form.on('submit', function(event) {
        return event.preventDefault();
      });
      this.form.on('submit_current_step', util.debounce(((function(_this) {
        return function() {
          var $button;
          if (_this.step.current.hasClass('results')) {
            return;
          }
          $button = _this.step.current.find('.next');
          $button = $button.length ? $button : _this.step.current.find('.submit');
          if ($button.length) {
            return $button.trigger('click');
          } else {
            return _this.Next();
          }
        };
      })(this)), 100));
      if (this.options.validateOnTyping) {
        return this.form.on('field_filled', (function(_this) {
          return function() {
            var allFieldsAreValid;
            allFieldsAreValid = _this.Validate(false);
            if (allFieldsAreValid) {
              _this.step.current.addClass('step_filled');
              return _this.form.addClass('form_filled').trigger('form_filled');
            } else {
              _this.form.removeClass('form_filled');
              return _this.step.current.removeClass('step_filled');
            }
          };
        })(this));
      }
    };
    Form.prototype.attachButtonEvents = function() {
      this.form.find('.next').on('click', (function(_this) {
        return function() {
          return _this.Next();
        };
      })(this));
      this.form.find('.back').on('click', (function(_this) {
        return function() {
          return _this.Back();
        };
      })(this));
      this.form.find('.submit').on('click', (function(_this) {
        return function() {
          return _this.Submit();
        };
      })(this));
      this.form.find('.next, .submit').on('focusin', function() {
        var $button;
        $button = $(this);
        return $window.on('keypress.button_focused', function(event) {
          var isEnterKey, isSpaceKey, isTabKey;
          isTabKey = event.which === 9;
          isEnterKey = event.which === 13;
          isSpaceKey = event.which === ' ' || event.which === 32;
          if (isTabKey) {
            $button.trigger('focusout');
          }
          if (isEnterKey || isSpaceKey) {
            return $button.trigger('focusout').trigger('click');
          }
        });
      });
      return this.form.find('.next, .submit').on('focusout', function() {
        return $window.off('keypress.button_focused');
      });
    };
    Form.prototype.attachExtraEvents = function() {
      return this.form.find('.step_toggle').on('click', (function(_this) {
        return function(event) {
          var $step;
          $step = $(event.target).parents('.step').first();
          _this.revealSection($step);
          _this.setCurrentStepTo($step);
          return _this.skippedAStep = true;
        };
      })(this));
    };

    /*==========================================================================
    		 Form Actions
    	==========================================================================
     */
    Form.prototype.Next = function() {
      if (!this.disabled) {
        if (this.options.customNext) {
          this.options.customNext();
        } else {
          if (this.Validate()) {
            this.revealSection(this.step.next);
            this.setCurrentStepTo('next');
          } else {
            this.focusOnFirstErrorField();
          }
        }
        return this.options.callbackOnNextStep(this);
      }
    };
    Form.prototype.Back = function() {
      if (!this.disabled) {
        if (this.options.customPrev) {
          this.options.customPrev();
        } else {
          this.revealSection(this.step.prev);
          this.setCurrentStepTo('prev');
        }
        return this.options.callbackOnBackStep(this);
      }
    };
    Form.prototype.Submit = function() {
      var formData;
      if (!this.disabled) {
        if (this.Validate()) {
          if (this.options.customSubmit) {
            return this.options.customSubmit();
          } else {
            this.form.addClass('loading final');
            if (this.action || this.options.forceAjaxSubmit) {
              formData = this.fetchValues();
              if (this.action) {
                formData.action = this.action;
              }
              if (!formData.url) {
                formData.url = window.location.href;
              }
              if (!formData.referrer) {
                formData.referrer = document.referrer;
              }
              if (this.options.hasLoadingStep) {
                if (this.resultsPlaceholder.length) {
                  this.resultsPlaceholder.html(messages.loading).addClass('show');
                }
                this.revealSection(this.resultsPlaceholder);
                this.setCurrentStepTo(this.resultsPlaceholder);
              }
              return $.post(this.options.submitUrl, formData, ((function(_this) {
                return function(response) {
                  var type;
                  if (!response) {
                    return _this.showGeneralErrorMessage();
                  } else {
                    type = response.success === true ? 'success' : 'error';
                    _this.options.callbackOnResults(response, _this);
                    _this.form.trigger('submitted').removeClass('loading');
                    if (_this.resultsPlaceholder.length && response.message) {
                      return _this.resultsPlaceholder.html("<div class=\"results-message " + type + "\">" + response.message + "</div>").addClass('show');
                    }
                  }
                };
              })(this)), 'JSON').fail((function(_this) {
                return function() {
                  return _this.showGeneralErrorMessage();
                };
              })(this));
            }
          }
        } else {
          return this.focusOnFirstErrorField();
        }
      }
    };

    /*========================================
    	=            Helper Functions            =
    	========================================
     */
    Form.prototype.addField = function($field, stepIndex) {
      var $parentStep, fieldInstance;
      fieldInstance = new Field($field, this);
      if (stepIndex == null) {
        $parentStep = $field.parents('.step').first();
        if ($parentStep.length) {
          stepIndex = $parentStep.index() - this.stepIndexOffset;
        }
      }
      if (!(stepIndex == null)) {
        this.fieldsInSteps[stepIndex].push(fieldInstance);
      }
      this.fields.push(fieldInstance);
      if (fieldInstance.required) {
        this.fieldsRequired.push(fieldInstance);
      }
      return this.fieldsByName[fieldInstance.name] = fieldInstance;
    };
    Form.prototype.removeFields = function(stepIndex, indexToStopAt) {
      if (stepIndex == null) {
        return false;
      }
      return this.fieldsInSteps[stepIndex].slice().forEach(function(field, fieldIndex) {
        if (fieldIndex !== indexToStopAt) {
          return field.destroy(stepIndex);
        }
      });
    };
    Form.prototype.fetchValues = function() {
      var values;
      if (this.options.uniqueSteps) {
        values = [];
        this.fieldsInSteps.forEach(function(step, stepIndex) {
          var stepValues;
          stepValues = {};
          step.forEach(function(field) {
            if (!(field.dependsOn && !field.revealed)) {
              return stepValues[field.name] = field.fetchValue();
            }
          });
          return values.push(stepValues);
        });
      } else {
        values = {};
        this.fields.forEach(function(field) {
          if (!(field.dependsOn && !field.revealed)) {
            return values[field.name] = field.fetchValue();
          }
        });
        this.form.find('input[type="hidden"]').each(function() {
          return values[this.name] = this.value;
        });
      }
      return values;
    };
    Form.prototype.disable = function() {
      this.disabled = true;
      this.form.addClass('disabled');
      return this.disableFields(this.form, true);
    };
    Form.prototype.enable = function() {
      this.disabled = false;
      this.form.removeClass('disabled');
      return this.enableFields(this.form);
    };
    Form.prototype.disableFields = function($step, force) {
      if (this.options.dontDisableFields && !force) {
        return;
      }
      if (!$step || $step === this.form || !this.multiStep) {
        return this.fields.forEach(function(field) {
          return field.disable();
        });
      } else {
        return $step.each((function(_this) {
          return function(i, el) {
            var stepIndex;
            stepIndex = $(el).index() - _this.stepIndexOffset;
            if (_this.fieldsInSteps[stepIndex]) {
              return _this.fieldsInSteps[stepIndex].forEach(function(field) {
                return field.disable();
              });
            }
          };
        })(this));
      }
    };
    Form.prototype.enableFields = function($step) {
      if (!$step || $step === this.form || !this.multiStep) {
        return this.fields.forEach(function(field) {
          return field.enable();
        });
      } else {
        return $step.each((function(_this) {
          return function(i, el) {
            var stepIndex;
            stepIndex = $(el).index() - _this.stepIndexOffset;
            if (_this.fieldsInSteps[stepIndex]) {
              return _this.fieldsInSteps[stepIndex].forEach(function(field) {
                return field.enable();
              });
            }
          };
        })(this));
      }
    };
    Form.prototype.unRequireFields = function($step) {
      if (!$step || $step === this.form || !this.multiStep) {
        return this.fields.forEach(function(field) {
          return field.makeNotRequired();
        });
      } else {
        return $step.each((function(_this) {
          return function(i, el) {
            var stepIndex;
            stepIndex = $(el).index() - _this.stepIndexOffset;
            if (_this.fieldsInSteps[stepIndex]) {
              return _this.fieldsInSteps[stepIndex].forEach(function(field) {
                return field.makeNotRequired();
              });
            }
          };
        })(this));
      }
    };
    Form.prototype.requireFields = function($step) {
      if (!$step || $step === this.form || !this.multiStep) {
        return this.fields.forEach(function(field) {
          return field.makeRequired();
        });
      } else {
        return $step.each((function(_this) {
          return function(i, el) {
            var stepIndex;
            stepIndex = $(el).index() - _this.stepIndexOffset;
            if (_this.fieldsInSteps[stepIndex]) {
              return _this.fieldsInSteps[stepIndex].forEach(function(field) {
                return field.makeRequired();
              });
            }
          };
        })(this));
      }
    };
    Form.prototype.setCurrentStepTo = function(stepToSet) {
      var current, next, prev, visibleStep;
      if (stepToSet == null) {
        stepToSet = 'visible';
      }
      current = this.step.current;
      prev = this.step.prev;
      next = this.step.next;
      switch (stepToSet) {
        case 'next':
          this.step = {
            'current': next,
            'prev': current,
            'next': next.next()
          };
          break;
        case 'prev':
          this.step = {
            'current': prev,
            'prev': prev.prev(),
            'next': current
          };
          break;
        case 'visible':
          visibleStep = this.form.find('.step.show');
          this.step = {
            'current': visibleStep,
            'prev': visibleStep.prev(),
            'next': visibleStep.next()
          };
          break;
        default:
          this.step = {
            'current': stepToSet,
            'prev': stepToSet.prev(),
            'next': stepToSet.next()
          };
      }
    };
    Form.prototype.revealSection = function($step) {
      if (this.options.customTransition) {
        this.options.customTransition($step, this);
      } else {
        this.enableFields($step);
        this.disableFields($step.siblings('.step'));
        $step.addClass('show').siblings('.show').removeClass('show');
        Form.utils.scrollTo($step);
        if (this.options.heightTransitions) {
          Form.utils.setSectionHeight($step, true);
        }
      }
    };
    Form.prototype.manageStepHeight = function(stepClosedHeight) {
      var $steps;
      if (stepClosedHeight == null) {
        stepClosedHeight = 39;
      }
      $steps = this.form.find('.step');
      Form.utils.saveSectionHeights($steps);
      $steps.first().addClass('show').each(function() {
        return $(this).height($(this).data('height'));
      }).siblings('.step').height(stepClosedHeight);
      $steps.on('height_changed', function() {
        var currentlyOpen;
        currentlyOpen = $(this).height() > stepClosedHeight + 5;
        return Form.utils.setSectionHeight($(this), false, true, stepClosedHeight, currentlyOpen);
      });
      return $window.on('resize', util.debounce(function() {
        Form.utils.saveSectionHeights($steps);
        return $steps.trigger('height_changed');
      }, 250));
    };
    Form.prototype.showGeneralErrorMessage = function() {
      this.form.removeClass('loading');
      this.options.callbackOnResults();
      if (this.resultsPlaceholder.length) {
        return this.resultsPlaceholder.html(messages.error);
      }
    };
    Form.prototype.focusOnFirstErrorField = function() {
      return this.step.current.find('.fieldset.error').not('.fieldtype_radio').not('.fieldtype_radio_hybrid').not('.fieldtype_checkbox').not('.fieldtype_checkbox_single').first().find('input').trigger('focus');
    };

    /*==================================
    	=            Form Utils            =
    	==================================
     */
    Form.utils = {
      setSectionHeight: function($section, hideOthers, setNewHeight, hiddenHeight, applyNewHeight) {
        if (hideOthers == null) {
          hideOthers = true;
        }
        if (setNewHeight == null) {
          setNewHeight = true;
        }
        if (hiddenHeight == null) {
          hiddenHeight = 40;
        }
        if (applyNewHeight == null) {
          applyNewHeight = true;
        }
        if (setNewHeight) {
          $section.data('height', $section.children('.step-innerwrap').height() + 70);
        }
        if (applyNewHeight) {
          $section.height($section.data('height'));
        }
        if (hideOthers) {
          return $section.siblings('.step').css('height', hiddenHeight + "px");
        }
      },
      saveSectionHeights: function($steps) {
        return $steps.each(function() {
          var $step, $stepInnerwrap, stepHeight;
          $step = $(this);
          $stepInnerwrap = $step.children('.step-innerwrap');
          $stepInnerwrap = $stepInnerwrap.length ? $stepInnerwrap : $step;
          stepHeight = $stepInnerwrap.height() + 70;
          return $step.data('height', stepHeight);
        });
      },
      scrollTo: function($openSection) {
        var dimensions;
        if ($openSection && $openSection.length) {
          dimensions = $openSection.offset();
          if (window.pageYOffset > dimensions.top) {
            return $$('html, body').animate({
              scrollTop: dimensions.top - 70
            }, 300);
          }
        }
      }
    };
  })(jQuery);

}).call(this);
;
var $window, isLeadManagement, isMobile, isMobileWidth, isPageManagement, isPostManagement, isSettingsManagement;

(function($) {
  var ensureFullHeight;
  ensureFullHeight = function() {
    var $ctaDivider, $footer, $header, $hero, combinedHeight, ctaDividerHeight, footerHeight, headerHeight, heroHeight, pageHeight, windowHeight;
    windowHeight = window.innerHeight;
    pageHeight = document.getElementById('page').offsetHeight;
    $header = $$('header');
    $footer = $$('footer');
    $hero = $$('.hero');
    $ctaDivider = $$('.cta_divider');
    headerHeight = $header.length ? $header[0].offsetHeight : 0;
    footerHeight = $footer.length ? $footer[0].offsetHeight : 0;
    heroHeight = $hero.length ? $hero[0].offsetHeight : 0;
    ctaDividerHeight = $ctaDivider.length ? $ctaDivider[0].offsetHeight : 0;
    combinedHeight = headerHeight + footerHeight + heroHeight + ctaDividerHeight;
    return $$('.page_innerwrap, .page').css('min-height', windowHeight - combinedHeight);
  };
  $$(document).ready(ensureFullHeight);
  return $$(window).on('resize', util.debounce(ensureFullHeight, 200));
})(jQuery);

(function() {
  var $mobileNav, $mobileNavItems, $mobileNavTrigger, HEADERHEIGHT, SAFETYMARGIN, lockPage, revealItems, setMobileNavHeight, unlockPage;
  $mobileNav = $$('.header-mobile_nav');
  $mobileNavItems = $$('.header-mobile_nav-list-item');
  $mobileNavTrigger = $$('.header-mobile_nav-trigger');
  HEADERHEIGHT = 98;
  SAFETYMARGIN = 20;
  setMobileNavHeight = function() {
    return $mobileNav[0].style.height = ((window.innerHeight - HEADERHEIGHT) + SAFETYMARGIN) + 'px';
  };
  lockPage = function() {
    if (window.pageYOffset > 0) {
      $$('html, body').animate({
        scrollTop: 0
      }, 250);
    }
    return $$('body')[0].style.overflow = 'hidden';
  };
  unlockPage = function() {
    return $$('body')[0].style.overflow = '';
  };
  revealItems = function() {
    var iteration;
    iteration = 1;
    return $mobileNavItems.each(function() {
      return setTimeout((function(_this) {
        return function() {
          return $(_this).addClass('reveal');
        };
      })(this), 150 * iteration++);
    });
  };
  $mobileNavTrigger.on('click', function() {
    var open;
    open = $mobileNavTrigger.data('open');
    if (open) {
      unlockPage();
      $mobileNav[0].style.height = '';
      $mobileNavTrigger.add($mobileNav).removeClass('active rotate');
      setTimeout(function() {
        return $mobileNavItems.removeClass('reveal');
      }, 350);
    } else {
      lockPage();
      setMobileNavHeight();
      $mobileNavTrigger.add($mobileNav).addClass('active');
      revealItems();
      setTimeout(function() {
        return $mobileNavTrigger.addClass('rotate');
      }, 250);
    }
    return $mobileNavTrigger.data('open', !open);
  });
  return $$(window).on('resize', function() {
    if ($mobileNav.hasClass('active')) {
      return setMobileNavHeight();
    }
  });
})();

(function() {
  return $$('.header-nav-item.button, .hero-button').on('click', function(event) {
    if ($$('.cta_with_faqs').length) {
      event.preventDefault();
      return $$('html, body').animate({
        scrollTop: $$('.cta_with_faqs').offset().top + 60
      }, 500);
    }
  });
})();

/*! Sortable 1.4.2 - MIT | git://github.com/rubaxa/Sortable.git */
!function(a){"use strict";"function"==typeof define&&define.amd?define(a):"undefined"!=typeof module&&"undefined"!=typeof module.exports?module.exports=a():"undefined"!=typeof Package?Sortable=a():window.Sortable=a()}(function(){"use strict";function a(a,b){if(!a||!a.nodeType||1!==a.nodeType)throw"Sortable: 'el' must be HTMLElement, and not "+{}.toString.call(a);this.el=a,this.options=b=r({},b),a[L]=this;var c={group:Math.random(),sort:!0,disabled:!1,store:null,handle:null,scroll:!0,scrollSensitivity:30,scrollSpeed:10,draggable:/[uo]l/i.test(a.nodeName)?"li":">*",ghostClass:"sortable-ghost",chosenClass:"sortable-chosen",ignore:"a, img",filter:null,animation:0,setData:function(a,b){a.setData("Text",b.textContent)},dropBubble:!1,dragoverBubble:!1,dataIdAttr:"data-id",delay:0,forceFallback:!1,fallbackClass:"sortable-fallback",fallbackOnBody:!1};for(var d in c)!(d in b)&&(b[d]=c[d]);V(b);for(var f in this)"_"===f.charAt(0)&&(this[f]=this[f].bind(this));this.nativeDraggable=b.forceFallback?!1:P,e(a,"mousedown",this._onTapStart),e(a,"touchstart",this._onTapStart),this.nativeDraggable&&(e(a,"dragover",this),e(a,"dragenter",this)),T.push(this._onDragOver),b.store&&this.sort(b.store.get(this))}function b(a){v&&v.state!==a&&(h(v,"display",a?"none":""),!a&&v.state&&w.insertBefore(v,s),v.state=a)}function c(a,b,c){if(a){c=c||N,b=b.split(".");var d=b.shift().toUpperCase(),e=new RegExp("\\s("+b.join("|")+")(?=\\s)","g");do if(">*"===d&&a.parentNode===c||(""===d||a.nodeName.toUpperCase()==d)&&(!b.length||((" "+a.className+" ").match(e)||[]).length==b.length))return a;while(a!==c&&(a=a.parentNode))}return null}function d(a){a.dataTransfer&&(a.dataTransfer.dropEffect="move"),a.preventDefault()}function e(a,b,c){a.addEventListener(b,c,!1)}function f(a,b,c){a.removeEventListener(b,c,!1)}function g(a,b,c){if(a)if(a.classList)a.classList[c?"add":"remove"](b);else{var d=(" "+a.className+" ").replace(K," ").replace(" "+b+" "," ");a.className=(d+(c?" "+b:"")).replace(K," ")}}function h(a,b,c){var d=a&&a.style;if(d){if(void 0===c)return N.defaultView&&N.defaultView.getComputedStyle?c=N.defaultView.getComputedStyle(a,""):a.currentStyle&&(c=a.currentStyle),void 0===b?c:c[b];b in d||(b="-webkit-"+b),d[b]=c+("string"==typeof c?"":"px")}}function i(a,b,c){if(a){var d=a.getElementsByTagName(b),e=0,f=d.length;if(c)for(;f>e;e++)c(d[e],e);return d}return[]}function j(a,b,c,d,e,f,g){var h=N.createEvent("Event"),i=(a||b[L]).options,j="on"+c.charAt(0).toUpperCase()+c.substr(1);h.initEvent(c,!0,!0),h.to=b,h.from=e||b,h.item=d||b,h.clone=v,h.oldIndex=f,h.newIndex=g,b.dispatchEvent(h),i[j]&&i[j].call(a,h)}function k(a,b,c,d,e,f){var g,h,i=a[L],j=i.options.onMove;return g=N.createEvent("Event"),g.initEvent("move",!0,!0),g.to=b,g.from=a,g.dragged=c,g.draggedRect=d,g.related=e||b,g.relatedRect=f||b.getBoundingClientRect(),a.dispatchEvent(g),j&&(h=j.call(i,g)),h}function l(a){a.draggable=!1}function m(){R=!1}function n(a,b){var c=a.lastElementChild,d=c.getBoundingClientRect();return(b.clientY-(d.top+d.height)>5||b.clientX-(d.right+d.width)>5)&&c}function o(a){for(var b=a.tagName+a.className+a.src+a.href+a.textContent,c=b.length,d=0;c--;)d+=b.charCodeAt(c);return d.toString(36)}function p(a){var b=0;if(!a||!a.parentNode)return-1;for(;a&&(a=a.previousElementSibling);)"TEMPLATE"!==a.nodeName.toUpperCase()&&b++;return b}function q(a,b){var c,d;return function(){void 0===c&&(c=arguments,d=this,setTimeout(function(){1===c.length?a.call(d,c[0]):a.apply(d,c),c=void 0},b))}}function r(a,b){if(a&&b)for(var c in b)b.hasOwnProperty(c)&&(a[c]=b[c]);return a}var s,t,u,v,w,x,y,z,A,B,C,D,E,F,G,H,I,J={},K=/\s+/g,L="Sortable"+(new Date).getTime(),M=window,N=M.document,O=M.parseInt,P=!!("draggable"in N.createElement("div")),Q=function(a){return a=N.createElement("x"),a.style.cssText="pointer-events:auto","auto"===a.style.pointerEvents}(),R=!1,S=Math.abs,T=([].slice,[]),U=q(function(a,b,c){if(c&&b.scroll){var d,e,f,g,h=b.scrollSensitivity,i=b.scrollSpeed,j=a.clientX,k=a.clientY,l=window.innerWidth,m=window.innerHeight;if(z!==c&&(y=b.scroll,z=c,y===!0)){y=c;do if(y.offsetWidth<y.scrollWidth||y.offsetHeight<y.scrollHeight)break;while(y=y.parentNode)}y&&(d=y,e=y.getBoundingClientRect(),f=(S(e.right-j)<=h)-(S(e.left-j)<=h),g=(S(e.bottom-k)<=h)-(S(e.top-k)<=h)),f||g||(f=(h>=l-j)-(h>=j),g=(h>=m-k)-(h>=k),(f||g)&&(d=M)),(J.vx!==f||J.vy!==g||J.el!==d)&&(J.el=d,J.vx=f,J.vy=g,clearInterval(J.pid),d&&(J.pid=setInterval(function(){d===M?M.scrollTo(M.pageXOffset+f*i,M.pageYOffset+g*i):(g&&(d.scrollTop+=g*i),f&&(d.scrollLeft+=f*i))},24)))}},30),V=function(a){var b=a.group;b&&"object"==typeof b||(b=a.group={name:b}),["pull","put"].forEach(function(a){a in b||(b[a]=!0)}),a.groups=" "+b.name+(b.put.join?" "+b.put.join(" "):"")+" "};return a.prototype={constructor:a,_onTapStart:function(a){var b=this,d=this.el,e=this.options,f=a.type,g=a.touches&&a.touches[0],h=(g||a).target,i=h,k=e.filter;if(!("mousedown"===f&&0!==a.button||e.disabled)&&(h=c(h,e.draggable,d))){if(D=p(h),"function"==typeof k){if(k.call(this,a,h,this))return j(b,i,"filter",h,d,D),void a.preventDefault()}else if(k&&(k=k.split(",").some(function(a){return a=c(i,a.trim(),d),a?(j(b,a,"filter",h,d,D),!0):void 0})))return void a.preventDefault();(!e.handle||c(i,e.handle,d))&&this._prepareDragStart(a,g,h)}},_prepareDragStart:function(a,b,c){var d,f=this,h=f.el,j=f.options,k=h.ownerDocument;c&&!s&&c.parentNode===h&&(G=a,w=h,s=c,t=s.parentNode,x=s.nextSibling,F=j.group,d=function(){f._disableDelayedDrag(),s.draggable=!0,g(s,f.options.chosenClass,!0),f._triggerDragStart(b)},j.ignore.split(",").forEach(function(a){i(s,a.trim(),l)}),e(k,"mouseup",f._onDrop),e(k,"touchend",f._onDrop),e(k,"touchcancel",f._onDrop),j.delay?(e(k,"mouseup",f._disableDelayedDrag),e(k,"touchend",f._disableDelayedDrag),e(k,"touchcancel",f._disableDelayedDrag),e(k,"mousemove",f._disableDelayedDrag),e(k,"touchmove",f._disableDelayedDrag),f._dragStartTimer=setTimeout(d,j.delay)):d())},_disableDelayedDrag:function(){var a=this.el.ownerDocument;clearTimeout(this._dragStartTimer),f(a,"mouseup",this._disableDelayedDrag),f(a,"touchend",this._disableDelayedDrag),f(a,"touchcancel",this._disableDelayedDrag),f(a,"mousemove",this._disableDelayedDrag),f(a,"touchmove",this._disableDelayedDrag)},_triggerDragStart:function(a){a?(G={target:s,clientX:a.clientX,clientY:a.clientY},this._onDragStart(G,"touch")):this.nativeDraggable?(e(s,"dragend",this),e(w,"dragstart",this._onDragStart)):this._onDragStart(G,!0);try{N.selection?N.selection.empty():window.getSelection().removeAllRanges()}catch(b){}},_dragStarted:function(){w&&s&&(g(s,this.options.ghostClass,!0),a.active=this,j(this,w,"start",s,w,D))},_emulateDragOver:function(){if(H){if(this._lastX===H.clientX&&this._lastY===H.clientY)return;this._lastX=H.clientX,this._lastY=H.clientY,Q||h(u,"display","none");var a=N.elementFromPoint(H.clientX,H.clientY),b=a,c=" "+this.options.group.name,d=T.length;if(b)do{if(b[L]&&b[L].options.groups.indexOf(c)>-1){for(;d--;)T[d]({clientX:H.clientX,clientY:H.clientY,target:a,rootEl:b});break}a=b}while(b=b.parentNode);Q||h(u,"display","")}},_onTouchMove:function(b){if(G){a.active||this._dragStarted(),this._appendGhost();var c=b.touches?b.touches[0]:b,d=c.clientX-G.clientX,e=c.clientY-G.clientY,f=b.touches?"translate3d("+d+"px,"+e+"px,0)":"translate("+d+"px,"+e+"px)";I=!0,H=c,h(u,"webkitTransform",f),h(u,"mozTransform",f),h(u,"msTransform",f),h(u,"transform",f),b.preventDefault()}},_appendGhost:function(){if(!u){var a,b=s.getBoundingClientRect(),c=h(s),d=this.options;u=s.cloneNode(!0),g(u,d.ghostClass,!1),g(u,d.fallbackClass,!0),h(u,"top",b.top-O(c.marginTop,10)),h(u,"left",b.left-O(c.marginLeft,10)),h(u,"width",b.width),h(u,"height",b.height),h(u,"opacity","0.8"),h(u,"position","fixed"),h(u,"zIndex","100000"),h(u,"pointerEvents","none"),d.fallbackOnBody&&N.body.appendChild(u)||w.appendChild(u),a=u.getBoundingClientRect(),h(u,"width",2*b.width-a.width),h(u,"height",2*b.height-a.height)}},_onDragStart:function(a,b){var c=a.dataTransfer,d=this.options;this._offUpEvents(),"clone"==F.pull&&(v=s.cloneNode(!0),h(v,"display","none"),w.insertBefore(v,s)),b?("touch"===b?(e(N,"touchmove",this._onTouchMove),e(N,"touchend",this._onDrop),e(N,"touchcancel",this._onDrop)):(e(N,"mousemove",this._onTouchMove),e(N,"mouseup",this._onDrop)),this._loopId=setInterval(this._emulateDragOver,50)):(c&&(c.effectAllowed="move",d.setData&&d.setData.call(this,c,s)),e(N,"drop",this),setTimeout(this._dragStarted,0))},_onDragOver:function(a){var d,e,f,g=this.el,i=this.options,j=i.group,l=j.put,o=F===j,p=i.sort;if(void 0!==a.preventDefault&&(a.preventDefault(),!i.dragoverBubble&&a.stopPropagation()),I=!0,F&&!i.disabled&&(o?p||(f=!w.contains(s)):F.pull&&l&&(F.name===j.name||l.indexOf&&~l.indexOf(F.name)))&&(void 0===a.rootEl||a.rootEl===this.el)){if(U(a,i,this.el),R)return;if(d=c(a.target,i.draggable,g),e=s.getBoundingClientRect(),f)return b(!0),void(v||x?w.insertBefore(s,v||x):p||w.appendChild(s));if(0===g.children.length||g.children[0]===u||g===a.target&&(d=n(g,a))){if(d){if(d.animated)return;r=d.getBoundingClientRect()}b(o),k(w,g,s,e,d,r)!==!1&&(s.contains(g)||(g.appendChild(s),t=g),this._animate(e,s),d&&this._animate(r,d))}else if(d&&!d.animated&&d!==s&&void 0!==d.parentNode[L]){A!==d&&(A=d,B=h(d),C=h(d.parentNode));var q,r=d.getBoundingClientRect(),y=r.right-r.left,z=r.bottom-r.top,D=/left|right|inline/.test(B.cssFloat+B.display)||"flex"==C.display&&0===C["flex-direction"].indexOf("row"),E=d.offsetWidth>s.offsetWidth,G=d.offsetHeight>s.offsetHeight,H=(D?(a.clientX-r.left)/y:(a.clientY-r.top)/z)>.5,J=d.nextElementSibling,K=k(w,g,s,e,d,r);if(K!==!1){if(R=!0,setTimeout(m,30),b(o),1===K||-1===K)q=1===K;else if(D){var M=s.offsetTop,N=d.offsetTop;q=M===N?d.previousElementSibling===s&&!E||H&&E:N>M}else q=J!==s&&!G||H&&G;s.contains(g)||(q&&!J?g.appendChild(s):d.parentNode.insertBefore(s,q?J:d)),t=s.parentNode,this._animate(e,s),this._animate(r,d)}}}},_animate:function(a,b){var c=this.options.animation;if(c){var d=b.getBoundingClientRect();h(b,"transition","none"),h(b,"transform","translate3d("+(a.left-d.left)+"px,"+(a.top-d.top)+"px,0)"),b.offsetWidth,h(b,"transition","all "+c+"ms"),h(b,"transform","translate3d(0,0,0)"),clearTimeout(b.animated),b.animated=setTimeout(function(){h(b,"transition",""),h(b,"transform",""),b.animated=!1},c)}},_offUpEvents:function(){var a=this.el.ownerDocument;f(N,"touchmove",this._onTouchMove),f(a,"mouseup",this._onDrop),f(a,"touchend",this._onDrop),f(a,"touchcancel",this._onDrop)},_onDrop:function(b){var c=this.el,d=this.options;clearInterval(this._loopId),clearInterval(J.pid),clearTimeout(this._dragStartTimer),f(N,"mousemove",this._onTouchMove),this.nativeDraggable&&(f(N,"drop",this),f(c,"dragstart",this._onDragStart)),this._offUpEvents(),b&&(I&&(b.preventDefault(),!d.dropBubble&&b.stopPropagation()),u&&u.parentNode.removeChild(u),s&&(this.nativeDraggable&&f(s,"dragend",this),l(s),g(s,this.options.ghostClass,!1),g(s,this.options.chosenClass,!1),w!==t?(E=p(s),E>=0&&(j(null,t,"sort",s,w,D,E),j(this,w,"sort",s,w,D,E),j(null,t,"add",s,w,D,E),j(this,w,"remove",s,w,D,E))):(v&&v.parentNode.removeChild(v),s.nextSibling!==x&&(E=p(s),E>=0&&(j(this,w,"update",s,w,D,E),j(this,w,"sort",s,w,D,E)))),a.active&&((null===E||-1===E)&&(E=D),j(this,w,"end",s,w,D,E),this.save())),w=s=t=u=x=v=y=z=G=H=I=E=A=B=F=a.active=null)},handleEvent:function(a){var b=a.type;"dragover"===b||"dragenter"===b?s&&(this._onDragOver(a),d(a)):("drop"===b||"dragend"===b)&&this._onDrop(a)},toArray:function(){for(var a,b=[],d=this.el.children,e=0,f=d.length,g=this.options;f>e;e++)a=d[e],c(a,g.draggable,this.el)&&b.push(a.getAttribute(g.dataIdAttr)||o(a));return b},sort:function(a){var b={},d=this.el;this.toArray().forEach(function(a,e){var f=d.children[e];c(f,this.options.draggable,d)&&(b[a]=f)},this),a.forEach(function(a){b[a]&&(d.removeChild(b[a]),d.appendChild(b[a]))})},save:function(){var a=this.options.store;a&&a.set(this)},closest:function(a,b){return c(a,b||this.options.draggable,this.el)},option:function(a,b){var c=this.options;return void 0===b?c[a]:(c[a]=b,void("group"===a&&V(c)))},destroy:function(){var a=this.el;a[L]=null,f(a,"mousedown",this._onTapStart),f(a,"touchstart",this._onTapStart),this.nativeDraggable&&(f(a,"dragover",this),f(a,"dragenter",this)),Array.prototype.forEach.call(a.querySelectorAll("[draggable]"),function(a){a.removeAttribute("draggable")}),T.splice(T.indexOf(this._onDragOver),1),this._onDrop(),this.el=a=null}},a.utils={on:e,off:f,css:h,find:i,is:function(a,b){return!!c(a,b,a)},extend:r,throttle:q,closest:c,toggleClass:g,index:p},a.create=function(b,c){return new a(b,c)},a.version="1.4.2",a});;

(function($) {
  var Notice, noticeActionTemplates;
  if ($('.notices').length === 0) {
    $('body').prepend('<div class="notices"></div>');
  }
  this.notify = function(arg) {
    var altAction, buttonText, ref, ref1, ref2, ref3, ref4, template, text, title, type;
    template = arg.template, type = (ref = arg.type) != null ? ref : 'ok', title = (ref1 = arg.title) != null ? ref1 : '', text = (ref2 = arg.text) != null ? ref2 : '', buttonText = (ref3 = arg.buttonText) != null ? ref3 : '', altAction = (ref4 = arg.altAction) != null ? ref4 : '';
    if (template && ((typeof noticeTemplates !== "undefined" && noticeTemplates !== null ? noticeTemplates[template] : void 0) != null)) {
      template = noticeTemplates[template];
    }
    return new Notice({
      template: template,
      type: type,
      title: title,
      text: text,
      buttonText: buttonText,
      altAction: altAction
    });
  };
  Notice = function(arg) {
    var altAction, buttonText, extraActionsClass, template, text, title;
    template = arg.template, this.type = arg.type, title = arg.title, text = arg.text, buttonText = arg.buttonText, altAction = arg.altAction;
    if (this.type === 'yes_no') {
      this.type = 'yesno';
    }
    this.isActive = true;
    this.parentWrapper = $('.notices').last();
    extraActionsClass = this.type === 'yesno' ? ' notice-actions_yesno' : '';
    if (template) {
      this.el = $(template);
    } else {
      this.el = $("<div class='notice'> <div class='notice-title'>" + title + "</div> <div class='notice-message'>" + text + "</div> <div class='notice-actions" + extraActionsClass + "'>" + noticeActionTemplates[this.type] + "</div> <div class='notice-altAction'>" + altAction + "</div> </div>");
    }
    this.el.data('Notice', this);
    this.append();
    return this.prompt();
  };
  Notice.prototype.append = function() {
    return this.el.appendTo(this.parentWrapper);
  };
  Notice.prototype.remove = function() {
    this.el.remove();
    return this.isActive = false;
  };
  Notice.prototype.reveal = function() {
    return setTimeout((function(_this) {
      return function() {
        return _this.parentWrapper.addClass('reveal');
      };
    })(this), 0);
  };
  Notice.prototype.dismiss = function() {
    this.parentWrapper.removeClass('reveal');
    return setTimeout((function(_this) {
      return function() {
        return _this.remove();
      };
    })(this), 400);
  };
  Notice.prototype.prompt = function() {
    return new Promise((function(_this) {
      return function(resolve, reject) {
        _this.reveal();
        if (_this.type === 'ok') {
          return _this.el.on('click', '.button_ok', function() {
            _this.dismiss();
            return resolve(_this);
          });
        } else if (_this.type === 'yesno') {
          _this.el.on('click', '.button_yes', function() {
            _this.dismiss();
            return resolve(_this);
          });
          return _this.el.on('click', '.button_no', function() {
            _this.dismiss();
            return reject(_this);
          });
        }
      };
    })(this));
  };
  return noticeActionTemplates = {
    'ok': "<div class='notice-actions-item button_ok'> <div class='notice-actions-item-text'>Ok</div> </div>",
    'yesno': "<div class='notice-actions-item button_no'> <div class='notice-actions-item-text'>No</div> </div> <div class='notice-actions-item button_yes'> <div class='notice-actions-item-text'>Yes</div> </div>"
  };
})(jQuery);


/**
 * The library I authored for use as subnotices/alerts sitewide (frontend/backend)
 */

(function($) {
  var Subnotice;
  if ($('.subnotices').length === 0) {
    $('body').prepend('<div class="subnotices"></div>');
  }
  this.subnotify = function(arg) {
    var markup, ref, ref1, ref2, subnoticeObject, text, time, type;
    type = (ref = arg.type) != null ? ref : 'info', text = (ref1 = arg.text) != null ? ref1 : '', time = (ref2 = arg.time) != null ? ref2 : 10000;
    markup = "<div class='subnotice subnotice_" + type + "'> <div class='subnotice-text'>" + text + "</div> <div class='subnotice-close'></div> </div>";
    subnoticeObject = new Subnotice(markup);
    subnoticeObject.destroy(time);
    return subnoticeObject;
  };
  Subnotice = function(markup) {
    this.el = $(markup);
    this.el.data('Subnotice', this);
    this.wrapperEl = $('.subnotices');
    this.isActive = true;
    this.append();
    this.attachEvents();
    return this;
  };
  Subnotice.prototype.append = function() {
    this.el.appendTo(this.wrapperEl);
    return setTimeout((function(_this) {
      return function() {
        return _this.reveal();
      };
    })(this), 200);
  };
  Subnotice.prototype.reveal = function() {
    return this.el.addClass('show');
  };
  Subnotice.prototype.attachEvents = function() {
    return this.el.children('.subnotice-close').on('click', (function(_this) {
      return function() {
        return _this.destroy(0);
      };
    })(this));
  };
  Subnotice.prototype.destroy = function(time) {
    var el;
    if (time !== false) {
      el = this.el;
      return setTimeout((function(_this) {
        return function() {
          _this.el.removeClass('show');
          return setTimeout(function() {
            _this.el.remove();
            return _this.isActive = false;
          }, 1000);
        };
      })(this), time);
    }
  };
  $(window).on('click', '.subnotice-close', function() {
    var subnoticeObject;
    subnoticeObject = $(this).parent().data('Subnotice');
    return subnoticeObject.destroy(0);
  });
})(jQuery);

$window = $$(window);

isMobileWidth = window.innerWidth <= 736;

isMobile = $$('html').hasClass('mobile');

isPageManagement = $$('body').hasClass('pages');

isPostManagement = $$('body').hasClass('posts');

isLeadManagement = $$('body').hasClass('leads');

isSettingsManagement = $$('body').hasClass('settings');

(function($) {
  var DB, POSTTYPES, PageItem, Post, PostType, SidebarItem, Variation, alreadySetMinMax, appendDynamicBlocks, applicableLeads, dummyForm, enforceUniqueSlug, fieldTemplates, generateNewSlug, initForm, initSortables, makeGroupSortable, setMinMax, setSidebarPosition, sidebarMinMax;
  fieldTemplates = {};
  $('#fieldTemplates').children().each(function() {
    var $template, name, template;
    $template = jQuery(this);
    name = $template.data('name');
    template = $template.html();
    return fieldTemplates[name] = template;
  });
  initForm = function($forms) {
    return $forms.each(function() {
      var $form;
      $form = $(this);
      if ($form.parent().parent().hasClass('fieldTemplates')) {
        return;
      }
      return new Form($form, {
        uniqueSteps: true,
        dontDisableFields: true,
        submitOnEnter: false
      });
    });
  };
  DB = {
    'page': {
      insert: function(params) {
        var callback;
        callback = params.cb || function(res) {
          if (res.success) {
            return console.log('Page inserted successfuly!');
          }
        };
        return $.post('/api/insert/pages', params.data, callback, 'JSON');
      },
      update: function(params) {
        var callback, dataToSubmit;
        dataToSubmit = {
          'query': {
            '_id': params.id
          },
          'data': params.data || {}
        };
        if (!params.data) {
          dataToSubmit.data[params.name] = params.value;
        }
        callback = params.cb || function(res) {
          if (res.success) {
            return console.log('Page data successfuly updated!');
          }
        };
        return $.post('/api/update/pages', dataToSubmit, callback, 'JSON');
      },
      remove: function(params) {
        return $.post('/api/delete/pages', {
          _id: params.id
        }, params.cb, 'JSON');
      }
    },
    'variation': {
      update: function(params) {
        var callback, dataToSubmit;
        dataToSubmit = {
          'query': {
            '_id': params.id
          },
          'updateQuery': {
            '$set': params.data
          }
        };
        callback = params.cb || function(res) {
          if (res.success) {
            return console.log('Variation updated successfuly!');
          }
        };
        return $.post('/api/update/pages', dataToSubmit, callback, 'JSON');
      },
      save: function(params) {
        var callback, dataToSubmit;
        dataToSubmit = {
          'query': {
            '_id': params.id
          },
          'updateQuery': params.data
        };
        callback = params.cb || function(res) {
          if (res.success) {
            return console.log('Variation saved successfuly!');
          }
        };
        return $.post('/api/update/pages', dataToSubmit, callback, 'JSON');
      },
      remove: function(params) {
        var callback, dataToSubmit;
        dataToSubmit = {
          queries: [
            {
              'query': {
                '_id': params.id
              },
              'updateQuery': {
                '$unset': {}
              }
            }, {
              'query': {
                '_id': params.id
              },
              'updateQuery': {
                '$pull': {
                  'variations': 'null'
                }
              }
            }
          ]
        };
        dataToSubmit.queries[0].updateQuery.$unset["variations." + params.index] = 1;
        callback = params.cb || function(res) {
          if (res.success) {
            return console.log('Variation updated successfuly!');
          }
        };
        return $.ajax({
          method: 'POST',
          url: '/api/updatemulti/pages',
          data: dataToSubmit,
          contentType: 'application/x-www-form-urlencoded; charset=UTF-8',
          success: callback,
          dataType: 'json'
        });
      }
    },
    'settings': {
      update: function(fields, callback) {
        var dataToSubmit;
        dataToSubmit = {
          'queries': fields.map(function(field) {
            return {
              'query': {
                'name': field.name
              },
              'updateQuery': {
                '$set': {
                  'value': field.value
                }
              }
            };
          })
        };
        return $.ajax({
          method: 'POST',
          url: '/api/updatemulti/misc',
          data: dataToSubmit,
          contentType: 'application/x-www-form-urlencoded; charset=UTF-8',
          success: callback,
          dataType: 'json'
        });
      }
    },
    'post': {
      insert: function(params) {
        var callback;
        callback = params.cb || function(res) {
          if (res.success) {
            return console.log('Page inserted successfuly!');
          }
        };
        return $.post('/api/insert/posts', params.data, callback, 'JSON');
      },
      update: function(params) {
        var callback, dataToSubmit;
        dataToSubmit = {
          'query': {
            '_id': params.id
          },
          'data': params.data || {}
        };
        if (!params.data) {
          dataToSubmit.data[params.name] = params.value;
        }
        callback = params.cb || function(res) {
          if (res.success) {
            return console.log('Page data successfuly updated!');
          }
        };
        return $.post('/api/update/posts', dataToSubmit, callback, 'JSON');
      },
      remove: function(params) {
        return $.post('/api/delete/posts', {
          _id: params.id
        }, params.cb, 'JSON');
      }
    }
  };
  $('.logout').on('click', function() {
    return window.location = window.location.protocol + '//' + window.location.host + '/manage/logout';
  });
  window.existingSlugs = [];
  generateNewSlug = function(index) {
    var newSlug;
    if (index == null) {
      index = 1;
    }
    newSlug = 'new-page-' + index;
    if (existingSlugs.includes(newSlug)) {
      return newSlug = generateNewSlug(index + 1);
    } else {
      existingSlugs.push(newSlug);
      return newSlug;
    }
  };
  window.SIDEBAR = {
    'list': $('.manage-sidebar-list'),
    'template': $(fieldTemplates.sidebarItem),
    'items': [],
    addExisting: function($el) {
      var newItem;
      newItem = new SidebarItem($el.data('slug'), $el.children().html(), $el, $el.children());
      this.items.push(newItem);
      return newItem;
    },
    add: function(label, slug, itemToInsertAfter) {
      var $newItem, newItem;
      $newItem = $(this.template[0].cloneNode(true));
      newItem = new SidebarItem(slug, label, $newItem, $newItem.children());
      this.items.push(newItem);
      newItem.el.data('slug', newItem.slug).find('.manage-sidebar-list-item-text').html(newItem.label).end();
      if (itemToInsertAfter) {
        newItem.el.insertAfter(itemToInsertAfter);
      } else {
        newItem.el.appendTo(SIDEBAR.list);
      }
      newItem.show();
      return newItem;
    },
    remove: function(slug) {
      var itemsInArray;
      itemsInArray = this.items.filter(function(item) {
        return item.slug === slug;
      });
      return itemsInArray.forEach((function(_this) {
        return function(item) {
          var indexOfItem;
          indexOfItem = _this.items.indexOf(item);
          item.remove();
          if (indexOfItem !== -1) {
            _this.items.splice(indexOfItem, 1);
            return true;
          } else {
            return false;
          }
        };
      })(this));
    }
  };
  SidebarItem = function(slug, label, el, elTitle) {
    this.slug = slug || generateNewSlug();
    this.label = label || 'New Page';
    this.el = el;
    this.elTitle = elTitle;
    this.assocItem = null;
    this.el.data('item', this);
    SimplyBind('label').of(this).to('textContent').of(this.elTitle);
    if (slug) {
      existingSlugs.push(slug);
    }
    return this;
  };
  SidebarItem.prototype.show = function() {
    return this.el.addClass('active').siblings().removeClass('active');
  };
  SidebarItem.prototype.hide = function() {
    return this.el.removeClass('active');
  };
  SidebarItem.prototype.remove = function() {
    return this.el.removeClass('active').siblings().first().addClass('active').end().end().remove();
  };
  $('.manage-sidebar').find('.manage-sidebar-list-item').each(function() {
    return SIDEBAR.addExisting($(this));
  });

  /* ==========================================================================
  		 Sidebar - Fixed with scroll
  		 ==========================================================================
   */
  if ($('sidebar').length) {
    sidebarMinMax = void 0;
    alreadySetMinMax = false;
    setMinMax = function(afterInitLoad) {
      var padding;
      if (!alreadySetMinMax) {
        alreadySetMinMax = true;
      }
      padding = afterInitLoad ? -60 : -30;
      return sidebarMinMax = {
        min: $$('.header')[0].offsetHeight + 40,
        max: $$('body')[0].offsetHeight - ($$('.footer')[0].offsetHeight) - ($$('sidebar')[0].offsetHeight) + padding
      };
    };
    setMinMax();
    setSidebarPosition = function() {
      var maxWidth, overflowAmount, pageScroll, passedMax, passedMin;
      if (!isMobileWidth) {
        pageScroll = window.pageYOffset;
        passedMin = pageScroll >= sidebarMinMax.min;
        passedMax = pageScroll >= sidebarMinMax.max;
        maxWidth = $$('sidebar').parent()[0].offsetWidth - 1;
        if (passedMin && !passedMax) {
          return $$('sidebar').addClass('fixed').css({
            'max-width': maxWidth,
            'top': '10px'
          });
        } else {
          if (!passedMin) {
            $$('sidebar').removeClass('fixed');
          }
          if (passedMax) {
            overflowAmount = (window.pageYOffset - (sidebarMinMax.max + 10)) * -1;
            return $$('sidebar').css('top', overflowAmount);
          }
        }
      }
    };
    $window.on('scroll', setSidebarPosition);
    $window.on('resize', util.debounce(function() {
      return setMinMax();
    }, 250));

    /* ==========================================================================
    			 Anchor link highlight on scroll
    			==========================================================================
     */
    $$('.manage-sidebar-list-item').first().addClass('active');
    $$('.manage-sidebar').on('click', '.manage-sidebar-list-item', function() {
      var sidebarItem;
      sidebarItem = $(this).data('item');
      sidebarItem.show();
      sidebarItem.assocItem.show();
      return setMinMax();
    });
  }
  if (isPageManagement) {
    Variation = function($el, page, isNew) {
      this.page = page;
      this["new"] = !!isNew;
      this.index = $el.data('variation') || $el.index() - 3 || 0;
      this.enabled = !$el.hasClass('disabled');
      this.el = $el;
      this.elTitle = $el.children('h6').children().eq(0);
      this.elNotes = $el.children('h6').children().eq(1);
      this.fieldNotes = $el.find('.varNotes').find('input');
      this.statusField = $el.find('.manage-content-list-item-content-status');
      this.elTitle.html('Variation {{index}}');
      this.elNotes.html(' {{notes}}');
      $el.data('item', this);
      SimplyBind('index').of(this).to('textContent.index').of(this.elTitle).transform(function(newValue) {
        return newValue + 1;
      }).update();
      SimplyBind('value').of(this.fieldNotes).to('textContent.notes').of(this.elNotes).bothWays().transform(function(newValue) {
        if (newValue.toString()) {
          return "(" + newValue + ")";
        } else {
          return newValue.toString();
        }
      }).update();
      return this;
    };
    Variation.prototype.fetchValues = function() {
      return this.page.fetchValues()[this.index];
    };
    Variation.prototype.clone = function() {
      this.page.addVariation(this);
      this.el.children('.toggle_open').first().trigger('click');
      return subnotify({
        type: 'info',
        text: "Variation was successfuly cloned. Don't forget that images aren't cloned over and to save it in order to apply the changes to the database",
        time: 5000
      });
    };
    Variation.prototype.disable = function() {
      var data;
      if (this.page.el.find('.manage-content-list-item').not('disabled').length > 1) {
        this.enabled = !this.enabled;
        data = {};
        data["variations." + this.index + ".enabled"] = this.enabled;
        return DB.variation.update({
          'id': this.page.id,
          'data': data,
          'cb': (function(_this) {
            return function(res) {
              if (res.success) {
                return _this.el.toggleClass('disabled');
              }
            };
          })(this)
        });
      } else {
        return notify({
          type: 'ok',
          title: "Can't disable variation",
          text: 'You must have at least one variation enabled per page'
        });
      }
    };
    Variation.prototype["delete"] = function() {
      if (this.page.variations.length > 1) {
        return notify({
          type: 'yesno',
          title: "Delete Variation " + (this.index + 1),
          text: 'Are you sure you want to delete this variation? This cannot be undone.'
        }).then((function(_this) {
          return function() {
            _this.page.removeVariation(_this);
            return DB.variation.remove({
              'id': _this.page.id,
              'index': _this.index,
              'cb': function(res) {
                return subnotify({
                  type: 'success',
                  text: "Variation #" + (_this.index + 1) + " successfuly removed",
                  time: 3000
                });
              }
            });
          };
        })(this));
      } else {
        return notify({
          type: 'ok',
          title: "Can't delete this variation",
          text: 'Each page must have at least one variation that\'s enabled'
        });
      }
    };
    Variation.prototype.save = function() {
      var data, key, value, variationData;
      if (!this.page.form.Validate()) {
        this.page.form.focusOnFirstErrorField();
        this.statusField.html('Some fields have errors...');
        return setTimeout((function(_this) {
          return function() {
            return _this.statusField.html('');
          };
        })(this), 3500);
      } else {
        this.el.addClass('sending').removeClass('save_success save_error');
        data = {};
        variationData = this.fetchValues();
        if (this["new"]) {
          data.$push = {
            'variations': variationData
          };
        } else {
          data.$set = {};
          for (key in variationData) {
            value = variationData[key];
            data.$set["variations." + this.index + "." + key] = value;
          }
        }
        return DB.variation.save({
          'id': this.page.id,
          'data': data,
          'cb': (function(_this) {
            return function(res) {
              var serverMessage, state;
              state = res.success ? 'save_success' : 'save_error';
              _this.statusField.html(res.message);
              if (res.success) {
                subnotify({
                  type: 'success',
                  text: "Variation " + (_this.index + 1) + " of " + _this.page.name + " was successfuly updated!"
                });
              } else {
                serverMessage = (res != null ? res.message : void 0) ? "Here's what the server said: \"" + res.message + "\"" : '';
                subnotify({
                  type: 'error',
                  text: "There was an error when trying to save this variation. " + serverMessage
                });
              }
              _this.el.removeClass('sending').addClass(state);
              setTimeout(function() {
                _this.el.removeClass('save_success save_error');
                return _this.statusField.html('');
              }, 3500);
              if (_this["new"]) {
                return _this["new"] = false;
              }
            };
          })(this)
        });
      }
    };
  }
  if (isPageManagement) {
    window.PAGES = {
      'list': $('.manage-content'),
      'template': $(fieldTemplates.page),
      'varTemplate': $(fieldTemplates.variation),
      'items': [],
      addExisting: function($el) {
        var newItem;
        newItem = new PageItem($el.attr('id'), $el.data('slug'), $el.find('.manage-content-list-title-text').html(), $el.data('type'), !$el.hasClass('disabled'), $el.data('rotation'), $el);
        this.items.push(newItem);
        return newItem;
      },
      add: function(sidebarItem, clone) {
        var $newItem, newItem, ref;
        $newItem = clone ? util.cloneSafe(clone, true) : util.cloneSafe(this.template, true);
        if (clone) {
          $newItem[0].className = 'manage-content-list {{slug}} {{visibility}}';
        }
        newItem = new PageItem('', sidebarItem.slug, sidebarItem.label, clone != null ? (ref = clone.data('item')) != null ? ref.type : void 0 : void 0, true, false, $newItem, sidebarItem);
        this.items.push(newItem);
        newItem.el.data('show', true).data('new', true).data('slug', newItem.slug).attr('id', '').addClass(newItem.slug).find('.manage-content-list-item').data('closed', true).end().appendTo(PAGES.list);
        newItem.show();
        return newItem;
      },
      remove: function(slug) {
        var indexOfItem, itemInArray;
        itemInArray = this.items.filter(function(item) {
          return item.slug === slug;
        });
        indexOfItem = this.items.indexOf(itemInArray[0]);
        if (indexOfItem !== -1) {
          this.items.splice(indexOfItem, 1);
          return true;
        } else {
          return false;
        }
      }
    };
    PageItem = function(id, slug, name, type, enabled, rotation, el, sidebar) {
      var slugTransform;
      initForm(el);
      this.id = id;
      this.slug = slug;
      this.name = name;
      this.type = type || 'standard';
      this.enabled = !!enabled;
      this.rotation = rotation;
      this.visible = false;
      this.firstTime = true;
      this.form = el.data('Form');
      this.el = el;
      this.elTitle = el.find('.manage-content-list-title-text').first();
      this.variations = el.find('.manage-content-list-item');
      this.sidebar = sidebar || SIDEBAR.items.filter((function(_this) {
        return function(item) {
          return item.slug === _this.slug;
        };
      })(this))[0];
      this.toggle = el.find('.rotation');
      this.button = el.find('.manage-content-list-add');
      this.fieldName = el.children('.manage-content-list-data').find('.input[name="name"]');
      this.fieldSlug = el.children('.manage-content-list-data').find('.input[name="slug"]');
      this.fieldType = el.children('.manage-content-list-data').find('.input[name="type"]');
      this.fieldVar = el.find('.currentVariation');
      this.currentVariation = this.fieldVar.val() || 0;
      this.variations = [];
      this.collectVariations();
      this.form.addField(this.fieldName.parent());
      this.form.addField(this.fieldSlug.parent());
      this.form.addField(this.fieldType.parent());
      this.el.data('item', this);
      this.sidebar.assocItem = this;
      SimplyBind.setOption('invokeOnBind', false);
      SimplyBind('visible').of(this).to('class.visibility').of(this.el).transform(function(visible) {
        if (visible) {
          return 'show';
        } else {
          return '';
        }
      });
      SimplyBind('type').of(this).to('value').of(this.fieldType).bothWays();
      SimplyBind('value').of(this.fieldType).to((function(_this) {
        return function(newValue) {
          if (newValue) {
            return DB.page.update({
              'id': _this.id,
              'name': 'type',
              'value': newValue
            });
          }
        };
      })(this));
      SimplyBind('name').of(this).to('value').of(this.fieldName).bothWays();
      SimplyBind('value').of(this.fieldName).to('textContent').of(this.elTitle).and('label').of(this.sidebar).and((function(_this) {
        return function(newValue) {
          if (newValue) {
            return DB.page.update({
              'id': _this.id,
              'name': 'name',
              'value': newValue
            });
          }
        };
      })(this));
      slugTransform = function(val) {
        return val.toLowerCase().replace(/\s/g, '-');
      };
      SimplyBind('slug').of(this).to('slug').of(this.sidebar).bothWays().and('value').of(this.fieldSlug).bothWays().transformAll(slugTransform).chainTo((function(_this) {
        return function(slug) {
          var filteredSlug;
          filteredSlug = enforceUniqueSlug(slug, _this.firstTime);
          if (slug !== filteredSlug) {
            _this.slug = filteredSlug;
            return subnotify({
              type: 'warning',
              text: "The slug \"" + slug + "\" already exists, changed to \"" + filteredSlug + "\".",
              time: 3000
            });
          }
        };
      })(this));
      SimplyBind('value').of(this.fieldSlug).to('class.slug').of(this.el).transform(slugTransform);
      SimplyBind('value').of(this.fieldSlug).to((function(_this) {
        return function(newValue) {
          return DB.page.update({
            'id': _this.id,
            'name': 'slug',
            'value': slugTransform(newValue)
          });
        };
      })(this));
      SimplyBind('value').of(this.fieldVar).to('currentVariation').of(this).and((function(_this) {
        return function(newValue) {
          return DB.page.update({
            'id': _this.id,
            'name': 'currentVariation',
            'value': newValue - 1
          });
        };
      })(this));
      this.toggle[0].className = 'manage-content-list-variation_options-toggle rotation {{state}}';
      SimplyBind('rotation').of(this).to('class.state').of(this.toggle);
      SimplyBind.setOption('invokeOnBind', true);
      this.firstTime = false;
      return this;
    };
    PageItem.prototype.show = function() {
      this.visible = true;
      return this.el.siblings().each(function() {
        $(this).data().item.hide();
      });
    };
    PageItem.prototype.hide = function() {
      return this.visible = false;
    };
    PageItem.prototype.disable = function() {
      this.enabled = !this.enabled;
      return notify({
        type: 'yesno',
        title: "Disabling " + this.name,
        text: "Are you sure you want to disable this page? It won't be accessible on the front end."
      }).then((function(_this) {
        return function() {
          return DB.page.update({
            'id': _this.el.attr('id'),
            'name': 'enabled',
            'value': _this.enabled,
            'cb': function(res) {
              if (res.success) {
                return _this.el.toggleClass('disabled');
              }
            }
          });
        };
      })(this));
    };
    PageItem.prototype.clone = function() {
      var cloneLabel, cloneSidebar, cloneSlug, clonedItem;
      cloneLabel = this.sidebar.label + ' (Copy)';
      cloneSlug = this.sidebar.slug + '-copy';
      cloneSidebar = SIDEBAR.add(cloneLabel, cloneSlug, this.sidebar.el);
      clonedItem = PAGES.add(cloneSidebar, this.el);
      clonedItem.show();
      return setTimeout(function() {
        return clonedItem.save(true);
      }, 450);
    };
    PageItem.prototype.fetchValues = function() {
      var removeEmptyFileFields, variationsData;
      variationsData = this.el.data('Form').fetchValues();
      variationsData.forEach((function(_this) {
        return function(variation, index) {
          return variationsData[index].enabled = _this.variations[index].enabled;
        };
      })(this));
      removeEmptyFileFields = function(obj) {
        return obj;
      };
      variationsData = removeEmptyFileFields(variationsData);
      return variationsData;
    };
    PageItem.prototype.save = function(firstTime) {
      var data;
      data = {
        'name': this.name,
        'slug': this.slug,
        'type': this.type,
        'enabled': this.enabled,
        'rotation': !!this.rotation,
        'currentVariation': this.currentVariation - 1,
        'variations': this.fetchValues()
      };
      if (firstTime) {
        return DB.page.insert({
          'data': data,
          'cb': (function(_this) {
            return function(res) {
              if (res.success) {
                subnotify({
                  type: 'success',
                  text: 'Page created/added successfuly.',
                  time: 3000
                });
                return $.post('/api/get/pages', {
                  slug: _this.slug
                }, function(res) {
                  _this.id = res[0]._id;
                  return _this.el.attr('id', res[0]._id);
                });
              }
            };
          })(this)
        });
      } else {
        return DB.page.update({
          'id': this.id,
          'data': data
        });
      }
    };
    PageItem.prototype.remove = function() {
      var isLastPage;
      isLastPage = !this.sidebar.el.siblings().length;
      if (isLastPage) {
        return notify({
          type: 'ok',
          title: 'Why would you do that?',
          text: 'You cannot delete the last page in the database.'
        });
      }
      return notify({
        type: 'yesno',
        title: "Deleting " + this.name,
        text: 'Are you sure you want to delete this page from the database? This cannot be undone.'
      }).then((function(_this) {
        return function() {
          PAGES.remove(_this.slug);
          SIDEBAR.remove(_this.slug);
          if (_this.id) {
            return DB.page.remove({
              'id': _this.id,
              'cb': function(res) {
                if (res.success) {
                  subnotify({
                    type: 'success',
                    text: "Page " + _this.name + " was successfuly deleted.",
                    time: 3000
                  });
                  return _this.el.removeClass('show').siblings().first().each(function() {
                    return $(this).data('item').show();
                  }).end().end().remove();
                }
              }
            });
          }
        };
      })(this));
    };
    PageItem.prototype.collectVariations = function() {
      var variations;
      variations = this.el.find('.step');
      variations.each((function(_this) {
        return function(i, el) {
          return _this.variations.push(new Variation($(el), _this));
        };
      })(this));
      return this.fieldVar.prop('max', this.variations.length);
    };
    PageItem.prototype.addVariation = function(varToClone) {
      var $newItem, closedClass, shouldBeClosed;
      $newItem = varToClone ? $(util.cloneSafe(varToClone.el, true)) : $(fieldTemplates.variation);
      shouldBeClosed = varToClone ? false : true;
      closedClass = shouldBeClosed ? 'closed' : '';
      $newItem.addClass(closedClass).data('closed', shouldBeClosed).data('new', true).data('variation', this.variations.length);
      this.button.before($newItem);
      this.variations.push(new Variation($newItem, this, true));
      this.fieldVar.prop('max', this.variations.length + 1);
      return this.form.AddStep($newItem);
    };
    PageItem.prototype.removeVariation = function(variation) {
      if (!variation) {
        return;
      }
      variation.el.remove();
      this.variations.splice(this.variations.indexOf(variation), 1);
      this.variations.forEach(function(variation, index) {
        return variation.index = index;
      });
      this.fieldVar.prop('max', this.variations.length + 1);
      return this.form.RemoveStep(variation.index);
    };
    enforceUniqueSlug = function(newSlug, firstTime) {
      var allSlugs, allowedCount;
      allSlugs = PAGES.items.map(function(item) {
        return item.slug;
      });
      allowedCount = firstTime ? 0 : 1;
      if (allSlugs.filter(function(item) {
        return item === newSlug;
      }).length > allowedCount) {
        return newSlug + '-copy';
      } else {
        return newSlug;
      }
    };
    $('.manage-content').find('.manage-content-list').each(function() {
      return PAGES.addExisting($(this));
    });
    $('.manage-content-list').first().data('item').show();
  }
  if (isPostManagement) {
    POSTTYPES = {
      'list': $('.manage-content'),
      'items': {},
      add: function($el) {
        var newItem;
        newItem = new PostType($el.attr('id'), $el.find('.manage-content-list-title-text').html(), $el);
        this.items[newItem.type] = newItem;
        return newItem;
      }
    };
    PostType = function(type, name, el, sidebar) {
      initForm(el);
      this.type = type;
      this.name = name;
      this.form = el.data('Form');
      this.visible = false;
      this.el = el;
      this.elTitle = el.find('.manage-content-list-title-text').first();
      this.button = el.find('.manage-content-list-add');
      this.sidebar = sidebar || SIDEBAR.items.filter((function(_this) {
        return function(item) {
          return item.slug === _this.type;
        };
      })(this))[0];
      this.posts = [];
      SimplyBind('visible').of(this).to('class.visibility').of(this.el).transform(function(visible) {
        if (visible) {
          return 'show';
        } else {
          return '';
        }
      });
      this.el.data('item', this);
      this.sidebar.assocItem = this;
      this.collectPosts();
      return this;
    };
    PostType.prototype.show = function() {
      this.visible = true;
      return this.el.siblings().each(function() {
        $(this).data().item.hide();
      });
    };
    PostType.prototype.hide = function() {
      return this.visible = false;
    };
    PostType.prototype.fetchValues = function() {
      var postsData, removeEmptyFileFields;
      postsData = this.el.data('Form').fetchValues();
      removeEmptyFileFields = function(obj) {
        if (obj.constructor === Array) {
          obj.forEach(function(subObj, index) {
            return obj[index] = removeEmptyFileFields(subObj);
          });
        }
        if (obj.constructor === Object) {
          Object.keys(obj).forEach(function(key) {
            var ref, ref1;
            if (key === 'image') {
              if (!obj[key]) {
                return delete obj[key];
              }
            } else {
              if (((ref = obj[key]) != null ? ref.constructor : void 0) === Object || ((ref1 = obj[key]) != null ? ref1.constructor : void 0) === Array) {
                return obj[key] = removeEmptyFileFields(obj[key]);
              }
            }
          });
        }
        return obj;
      };
      postsData = removeEmptyFileFields(postsData);
      return postsData;
    };
    PostType.prototype.collectPosts = function() {
      var posts;
      posts = this.el.find('.step');
      return posts.each((function(_this) {
        return function(i, el) {
          return _this.posts.push(new Post($(el), _this));
        };
      })(this));
    };
    PostType.prototype.addPost = function(postToClone) {
      var $newItem, newItem;
      $newItem = postToClone ? $(postToClone.el[0].cloneNode(true)) : $(fieldTemplates["post-" + this.type]);
      if (postToClone) {
        $newItem.removeClass('closed').data('closed', false).data('new', true);
        postToClone.toggle();
      } else {
        $newItem.addClass('closed').data('closed', true).data('new', true);
      }
      if (!postToClone) {
        $newItem.children('h6').html('New Item');
      }
      this.button.before($newItem);
      newItem = new Post($newItem, this, true);
      this.posts.push(newItem);
      if (postToClone) {
        newItem.name = postToClone.name + " (copy)";
        newItem.slug = postToClone.slug + "-copy";
        $newItem.siblings('.show').trigger('click');
      }
      return this.form.AddStep($newItem);
    };
    PostType.prototype.removePost = function(post) {
      if (!post) {
        return;
      }
      this.form.RemoveStep(post.el.index() - 1);
      post.el.remove();
      return this.posts.splice(this.posts.indexOf(post), 1);
    };
    Post = function($el, postType) {
      this.postType = postType;
      this.id = $el.attr('id');
      this.slug = $el.data('slug');
      this.single = $el.data('single');
      this.name = $el.data('name') || ("New " + this.single);
      this["new"] = $el.data('new');
      this.enabled = !$el.hasClass('disabled');
      this.el = $el;
      this.elTitle = $el.children('h6');
      this.statusField = $el.find('.manage-content-list-item-content-status');
      this.fieldSlug = $el.find('.fieldset.slug').first().find('input');
      switch (this.single) {
        case 'Pest':
          this.fieldName = $el.find('.fieldset.name').first().find('input');
          break;
        case 'Service':
          this.fieldName = $el.find('.fieldset.name').first().find('input');
          break;
        case 'FAQ':
          this.fieldName = $el.find('.fieldset.question').first().find('input');
          break;
        case 'FAQ Category':
          this.fieldName = $el.find('.fieldset.title').first().find('input');
          break;
        case 'Exit Intent':
          this.fieldName = $el.find('.fieldset.name').first().find('input');
      }
      $el.data('item', this);
      SimplyBind('name').of(this).to('value').of(this.fieldName).bothWays();
      SimplyBind('name').of(this).to('textContent').of(this.elTitle);
      if (this.fieldSlug.length) {
        SimplyBind('slug').of(this).to('value').of(this.fieldSlug).bothWays();
      }
      return this;
    };
    Post.prototype.toggle = function() {
      return this.elTitle.trigger('click');
    };
    Post.prototype.fetchValues = function() {
      return this.postType.fetchValues()[this.el.index() - 1];
    };
    Post.prototype.clone = function() {
      return this.postType.addPost(this);
    };
    Post.prototype.disable = function() {
      this.enabled = !this.enabled;
      return DB.post.update({
        'id': this.id,
        'data': {
          enabled: this.enabled
        },
        'cb': (function(_this) {
          return function(res) {
            if (res.success) {
              return _this.el.toggleClass('disabled');
            }
          };
        })(this)
      });
    };
    Post.prototype["delete"] = function() {
      if (this.postType.posts.length > 1) {
        return notify({
          type: 'yesno',
          title: "Deleting " + this.name,
          text: "Are you sure you want to delete this " + this.single + " from the database? This cannot be undone."
        }).then((function(_this) {
          return function() {
            _this.postType.removePost(_this);
            if (_this.id) {
              return DB.post.remove({
                'id': _this.id,
                'cb': function(res) {
                  if (res.success) {
                    return subnotify({
                      type: 'success',
                      text: _this.name + " was successfuly removed."
                    });
                  }
                }
              });
            }
          };
        })(this));
      } else {
        return notify({
          type: 'ok',
          title: 'How will you explain this to your users?',
          text: "You must have at least one " + this.single + " in the database."
        });
      }
    };
    Post.prototype.save = function() {
      var data, postData;
      if (!this.postType.form.Validate()) {
        this.postType.form.focusOnFirstErrorField();
        this.statusField.html('Some fields have errors...');
        return setTimeout((function(_this) {
          return function() {
            return _this.statusField.html('');
          };
        })(this), 3500);
      } else {
        this.el.addClass('sending').removeClass('save_success save_error');
        data = {};
        postData = this.fetchValues();
        if (this["new"]) {
          postData.type = this.postType.type;
          postData.enabled = this.enabled;
          DB.post.insert({
            'data': postData,
            'cb': (function(_this) {
              return function(res) {
                var ref, state;
                if (res.success) {
                  subnotify({
                    type: 'success',
                    text: _this.single + " \"" + _this.name + "\" was successfuly inserted!"
                  });
                  if ((ref = res.result) != null ? ref._id : void 0) {
                    _this.id = res.result._id;
                  }
                  state = res.success ? 'save_success' : 'save_error';
                  _this.statusField.html(res.message);
                  _this.el.removeClass('sending').addClass(state);
                  return setTimeout(function() {
                    _this.el.removeClass('save_success save_error');
                    return _this.statusField.html('');
                  }, 3500);
                }
              };
            })(this)
          });
          return this["new"] = false;
        } else {
          return DB.post.update({
            'id': this.id,
            'data': postData,
            'cb': (function(_this) {
              return function(res) {
                var state;
                state = res.success ? 'save_success' : 'save_error';
                if (res.success) {
                  subnotify({
                    type: 'success',
                    text: _this.single + " \"" + _this.name + "\" was successfuly updated!"
                  });
                }
                _this.statusField.html(res.message);
                _this.el.removeClass('sending').addClass(state);
                return setTimeout(function() {
                  _this.el.removeClass('save_success save_error');
                  return _this.statusField.html('');
                }, 3500);
              };
            })(this)
          });
        }
      }
    };
    $('.manage-content').find('.manage-content-list').each(function() {
      return POSTTYPES.add($(this));
    });
    $('.manage-content-list').first().data('item').show();
  }

  /**
  	 * In each campaign table there are actions available for each listed item
  	 * such as delete, mark as spam, etc. This script contains
  	 * the logic for each action and its reactions.
   */
  $$(document).on('click', '.lead-action', function(event, submitToDatabase) {
    var $actionButton, $leadStatus, action, currentStatus, data, leadID, newStatus, prevStatus, statusText, statusTextNegative, tooltipText, tooltipTextNegative;
    if (submitToDatabase == null) {
      submitToDatabase = true;
    }
    $actionButton = $(this);
    action = $actionButton.data('action');
    leadID = $actionButton.data('id');
    $leadStatus = $actionButton.parents('tr').find('.tbody-item-status');
    prevStatus = $leadStatus.data('status_old') || 'pending';
    currentStatus = $leadStatus.data('status');
    newStatus = action.match(/_(.+)$/);
    newStatus = newStatus ? newStatus[1] : '';
    tooltipText = newStatus === 'complete' ? 'Mark as Incomplete/Invalid' : 'Mark as Not Spam';
    statusText = newStatus === 'complete' ? 'Complete/Valid' : 'Spam';
    tooltipTextNegative = newStatus === 'complete' ? 'Mark as Complete/Valid' : 'Mark as Spam';
    statusTextNegative = 'Pending';

    /**
    		 * Action responsible for deleting a lead from the database.
     */
    if (action === 'delete') {
      if (submitToDatabase) {
        $.post('/api/delete/leads', {
          '_id': leadID
        });
      }
      $actionButton.parents('tr').fadeOut(450, function() {
        var data;
        $(this).remove();
      });
    }

    /**
    		 * Mark/Unmark as complete.
     */
    if (/^mark/.test(action)) {
      if (submitToDatabase) {
        data = {
          'query': {
            '_id': leadID
          },
          'data': {
            'status': newStatus,
            'status_old': currentStatus
          }
        };
        $.post('/api/update/leads', data);
      }
      $actionButton.attr("class", "tbody-item-actions-item lead-action un" + newStatus).data("action", "unmark_" + newStatus).find(".tbody-item-actions-item-text").html(tooltipText);
      $leadStatus.attr("class", "tbody-item-status " + newStatus).data("status", newStatus).data("status_old", currentStatus).find(".tbody-item-status-text").html(statusText);
    }
    if (/^unmark/.test(action)) {
      if (submitToDatabase) {
        data = {
          'query': {
            '_id': leadID
          },
          'data': {
            'status': prevStatus,
            'status_old': currentStatus
          }
        };
        $.post('/api/update/leads', data);
      }
      $actionButton.attr("class", "tbody-item-actions-item lead-action " + newStatus).data("action", "mark_" + newStatus).find(".tbody-item-actions-item-text").html(tooltipTextNegative);
      return $leadStatus.attr("class", "tbody-item-status " + prevStatus).data("status", prevStatus).data("status_old", currentStatus).find(".tbody-item-status-text").html(statusTextNegative);
    }
  });
  applicableLeads = [];
  $$(document).on('click', 'tbody .leads-table-checkbox', function() {
    var $checkbox, becameChecked, index, leadID;
    $checkbox = $(this);
    leadID = $checkbox.data('id');
    becameChecked = $checkbox.prop('checked');
    index = void 0;
    if (becameChecked) {
      return applicableLeads.push(leadID);
    } else {
      index = applicableLeads.indexOf(leadID);
      return applicableLeads.splice(index, 1);
    }
  });
  $$(document).on('click', 'thead .leads-table-checkbox', function() {
    var $checkbox, becameChecked, tableItems;
    $checkbox = $(this);
    becameChecked = $checkbox.prop('checked');
    applicableLeads = [];
    if (becameChecked) {
      return tableItems = $('.leads-table-checkbox', 'tbody').each(function() {
        var $checkbox;
        var leadID;
        $checkbox = $(this);
        leadID = $checkbox.data('id');
        applicableLeads.push(leadID);
        return $checkbox.prop('checked', true);
      });
    } else {
      return tableItems = $('.leads-table-checkbox', 'tbody').each(function() {
        return $(this).prop('checked', false);
      });
    }
  });
  $$('.leads-bulk-button').on('click', function() {
    var action, apiAction, bulkData;
    action = $$('#bulk-action').val();
    apiAction = 'lead_' + action.replace('unmark', 'mark');
    if (action && applicableLeads.length) {
      bulkData = {
        'bulk': true,
        'action': apiAction,
        'items': applicableLeads
      };
      switch (action) {
        case 'mark_complete':
          bulkData.complete = true;
          break;
        case 'unmark_complete':
          bulkData.complete = false;
          break;
        case 'mark_spam':
          bulkData.spam = true;
          break;
        case 'unmark_spam':
          bulkData.spam = false;
      }
      return applicableLeads.forEach(function(leadID) {
        var $leadRow;
        $leadRow = $('tr[data-id="' + leadID + '"]');
        if (action.includes('delete')) {
          return $leadRow.find('.lead-action.delete').trigger('click');
        } else if (action.includes('spam')) {
          if (action.includes('unmark')) {
            return $leadRow.find('.lead-action.unspam').trigger('click');
          } else {
            return $leadRow.find('.lead-action.spam').trigger('click');
          }
        } else if (action.includes('complete')) {
          if (action.includes('unmark')) {
            return $leadRow.find('.lead-action.incomplete').trigger('click');
          } else {
            return $leadRow.find('.lead-action.complete').trigger('click');
          }
        }
      });
    }
  });

  /**
  	 * The logic required to allow the admin to change the info
  	 * for a quote submission on the fly. This attaches event
  	 * listeners on the 'edit' element next to each field and
  	 * pushes the changes via ajax to the database.
   */
  $(document).on('click', '.lead-edit', function() {
    var $currentNode, $editButton, newNode, origValue;
    $editButton = $(this);
    $currentNode = $editButton.prev();
    origValue = $currentNode.text().replace(util.regEx.whiteSpace, '');
    newNode = '<input type="text" class="tbody-item-lead_details-item-value lead-value input_field" value="' + origValue + '" />';
    $currentNode.replaceWith(newNode);
    $editButton.prev().focus().select();
  });
  $(document).on('blur', '.lead-value.input_field', function() {
    var $inputNode, fieldName, fieldValue, firstname, lastname, leadID, newNode, submitValueChange, values;
    $inputNode = $(this);
    leadID = $inputNode.parents('tr').data('id');
    fieldName = $inputNode.parent().data('field_name');
    fieldValue = $inputNode.val();
    newNode = '<div class="tbody-item-lead_details-item-value lead-value"> ' + fieldValue + '</div>';
    submitValueChange = function(fieldName, fieldValue) {
      var dataToSubmit;
      dataToSubmit = {
        'query': {
          '_id': leadID
        },
        'data': {}
      };
      dataToSubmit.data[fieldName] = fieldValue;
      $.post('/api/update/leads', dataToSubmit);
    };
    $inputNode.replaceWith(newNode);
    if (fieldName === 'Full_Name') {
      values = fieldValue.split(' ');
      firstname = values[0];
      lastname = values[1];
      submitValueChange('First_Name', firstname);
      submitValueChange('Last_Name', lastname);
    } else {
      submitValueChange(fieldName, fieldValue);
    }
  });
  $('form').not('.manage_login-form').on('submit', function(event) {
    event.preventDefault();
    $(document.activeElement).blur();
  });

  /**
  	 * The logic and initialization of the table filters.
   */
  $$(document).ready(function() {
    $$('.campaign-table-filters').find('.input').each(function() {
      var $this;
      $this = jQuery(this);
      Form.prototype.attachEvents($this, 'change blur keypress');
    });
    $$('.campaign-table-filters-button').on('click', function() {
      $$('.campaign-table-filters').submit();
    });
    $$('.campaign-table-filters-item-input').on('keypress', function(e) {
      if (e.keyCode === 13) {
        $$('.campaign-table-filters').submit();
      }
    });
    if ($$('select.campaign-table-filters-item-input').length) {
      $$('select.campaign-table-filters-item-input').each(function() {
        var $this, fitlerValue;
        $this = jQuery(this);
        fitlerValue = $this[0].attributes.value.value;
        if (fitlerValue) {
          $this.val(fitlerValue).trigger('change');
        }
      });
    }
  });

  /**
  	 * This attaches an event listener to the question mark next to each
  	 * entry's IP address and upon hovering fetches data from ipinfo.io and
  	 * formats+inserts+shows the data in a tooltip.
   */
  $$(document).on('mouseover', '.tbody-item-ip_details', function() {
    var $parent, $this, address, loaded;
    $this = $(this);
    $parent = $this.parent();
    address = $this.data('ip');
    loaded = $this.data('loaded');
    if (!loaded) {
      $.get('http://ipinfo.io/' + address, (function(response) {
        var output;
        output = '';
        output += '<div class="tbody-item-ip_details-text-body-row">' + 'Country: <strong>' + response.country + '</strong>' + '</div>';
        output += '<div class="tbody-item-ip_details-text-body-row">' + 'City: <strong>' + response.city + ', ' + response.region + '</strong>' + '</div>';
        output += '<div class="tbody-item-ip_details-text-body-row">' + 'Zip Code: <strong>' + response.postal + '</strong>' + '</div>';
        output += '<div class="tbody-item-ip_details-text-body-row">' + 'Location: <strong>' + response.loc + '</strong>' + '</div>';
        output += '<div class="tbody-item-ip_details-text-body-row">' + 'Hostname: <strong>' + response.hostname + '</strong>' + '</div>';
        output += '<div class="tbody-item-ip_details-text-body-row">' + 'Organization: <strong>' + response.org + '</strong>' + '</div>';
        $this.addClass('ready').find('.tbody-item-ip_details-text-body').html(output);
      }), 'JSON');
      $this.data('loaded', !loaded);
    }
  });

  /**
  	 * Submits the value of the notes textbox everytime a 'change' event is triggered.
  	 * A change event is triggered mostly when the textfield is blurred.
   */
  $(document).on('change', '.tbody-item-notes', function() {
    var $field, dataToSubmit, leadID, notes;
    $field = $(this);
    notes = $field.val();
    leadID = $field.parents('tr').data('id');
    dataToSubmit = {
      'query': {
        '_id': leadID
      },
      'data': {
        'notes': notes
      }
    };
    $.post('/api/update/leads', dataToSubmit);
  });
  if (isSettingsManagement) {
    dummyForm = (function() {
      return new Form($('<form></form>'));
    })();
    this.SettingsItem = function(el$) {
      var data;
      this.el$ = el$;
      data = this.el$.data();
      this.name = data.name;
      this.type = data.type;
      this.changed = false;
      if (this.type === 'toggle') {
        this.state = data['init-state'];
        SimplyBind('state').of(this).to('class.state').of(this.el$.children()).transform(function(state) {
          if (state) {
            return 'enabled';
          } else {
            return '';
          }
        });
        SimplyBind(0).ofEvent('click').of(this.el$.children()).to('state').of(this).transform((function(_this) {
          return function() {
            return !_this.state;
          };
        })(this));
      } else {
        this.field = new Form.Field(this.el$, dummyForm);
      }
      return this;
    };
    this.SettingsItem.prototype.fetchValue = function() {
      if (this.type === 'toggle') {
        return this.state;
      } else {
        return this.field.fetchValue();
      }
    };
    this.Settings = new function() {
      this.state = '';
      this.stateText = 'Updating...';
      this.items = [];
      this.button$ = $('.manage-content-settings').children('.submit');
      this.status$ = $('.manage-content-settings').children('.status');
      this.button$.on('click', (function(_this) {
        return function() {
          return _this.saveToDB(_this.fetchValues());
        };
      })(this));
      SimplyBind('state').of(this).to('class.state').of(this.status$);
      SimplyBind('stateText').of(this).to('textContent').of(this.status$.children());
      $('.manage-content-settings-item').each((function(_this) {
        return function(i, el) {
          return _this.items.push(new SettingsItem($(el)));
        };
      })(this));
      this.fetchValues = function() {
        return this.items.map((function(_this) {
          return function(item) {
            return {
              'name': item.name,
              'value': item.fetchValue()
            };
          };
        })(this));
      };
      this.saveToDB = function(values) {
        this.state = 'loading';
        this.stateText = 'Updating...';
        return DB.settings.update(values, (function(_this) {
          return function(res) {
            if (res.success) {
              _this.state = 'success';
              _this.stateText = 'Settings saved successfully!';
              return setTimeout(function() {
                return _this.state = '';
              }, 9000);
            } else {
              _this.state = 'error';
              return _this.stateText = res.message;
            }
          };
        })(this));
      };
      return this;
    };
  }
  if (isPageManagement) {

    /* ==========================================================================
    			 Add Page
    			==========================================================================
     */
    $$('.manage-sidebar-outerwrap').on('click', '.add', function() {
      var page, sidebarItem;
      sidebarItem = SIDEBAR.add();
      page = PAGES.add(sidebarItem);
      page.save(true);
      return page.show();
    });

    /* ==========================================================================
    			 Disable page
    			==========================================================================
     */
    $$('.manage-content').on('click', '.disable_page', function() {
      var $page;
      $page = $(this).parents('form').first();
      return $page.data('item').disable();
    });

    /* ==========================================================================
    			 Delete page
    			==========================================================================
     */
    $$('.manage-content').on('click', '.delete_page', function() {
      var $page;
      $page = $(this).parents('form').first();
      return $page.data('item').remove();
    });

    /* ==========================================================================
    			 Clone page
    			==========================================================================
     */
    $$('.manage-content').on('click', '.clone_page', function() {
      var $page;
      $page = $(this).parents('form').first();
      return $page.data('item').clone();
    });

    /* ==========================================================================
    			 Enable Variation Rotation
    			==========================================================================
     */
    $('.manage-content').on('click', '.rotation', function() {
      var $page, $toggle, isOn, newState, page;
      $toggle = $(this);
      $page = $toggle.parents('form').first();
      page = $page.data('item');
      isOn = page.rotation;
      newState = isOn ? '' : 'on';
      DB.page.update({
        'id': page.id,
        'name': 'rotation',
        'value': !!newState,
        'cb': function(res) {
          var serverMessage;
          if (!res.success) {
            if (res.message && res.message.toLowerCase().includes('not authorized')) {
              return subnotify({
                type: 'error',
                text: 'It seems like you were logged out. Log back in order to apply these changes.'
              });
            } else {
              serverMessage = (res != null ? res.message : void 0) ? "Here's what the server said: \"" + res.message + "\"" : '';
              return subnotify({
                type: 'error',
                text: "There was an error when trying to save this variation. " + serverMessage
              });
            }
          }
        }
      });
      return page.rotation = newState;
    });

    /* ==========================================================================
    			 Add variation
    			==========================================================================
     */
    $$('.manage-content').on('click', '.manage-content-list-add.add', function() {
      var page;
      page = $(this).parents('form').first().data('item');
      return page.addVariation();
    });
  }
  if (isPostManagement) {

    /* ==========================================================================
    			 Add Post
    			==========================================================================
     */
    $$('.manage-content').on('click', '.manage-content-list-add.add', function() {
      var postType;
      postType = $(this).parents('form').first().data('item');
      return postType.addPost();
    });

    /* ==========================================================================
    			 Clone post
    			==========================================================================
     */
    $$('.manage-content').on('click', '.manage-content-list-item-content-button.clone', function() {
      var post;
      post = $(this).parents('.manage-content-list-item').first().data('item');
      return post.clone();
    });

    /* ==========================================================================
    			 Disable post
    			==========================================================================
     */
    $$('.manage-content').on('click', '.post_action.disable', function() {
      var post;
      post = $(this).parents('.manage-content-list-item').first().data('item');
      return post.disable();
    });

    /* ==========================================================================
    			 Delete post
    			==========================================================================
     */
    $$('.manage-content').on('click', '.manage-content-list-item-content-button.delete', function() {
      var post;
      post = $(this).parents('.manage-content-list-item').first().data('item');
      return post["delete"]();
    });

    /* ==========================================================================
    			 Save post
    			==========================================================================
     */
    $$('.manage-content').on('click', '.manage-content-list .save', function() {
      var post;
      post = $(this).parents('.manage-content-list-item').first().data('item');
      return post.save();
    });
  }
  if (isPageManagement) {

    /* ==========================================================================
    			 Clone variation
    			==========================================================================
     */
    $$('.manage-content').on('click', '.manage-content-list-item-content-button.clone', function() {
      var variation;
      variation = $(this).parents('.manage-content-list-item').first().data('item');
      return variation.clone();
    });

    /* ==========================================================================
    			 Disable variation
    			==========================================================================
     */
    $$('.manage-content').on('click', '.variation_action.disable', function() {
      var variation;
      variation = $(this).parents('.manage-content-list-item').first().data('item');
      return variation.disable();
    });

    /* ==========================================================================
    			 Delete variation
    			==========================================================================
     */
    $$('.manage-content').on('click', '.manage-content-list-item-content-button.delete', function() {
      var variation;
      variation = $(this).parents('.manage-content-list-item').first().data('item');
      return variation["delete"]();
    });

    /* ==========================================================================
    			 Save variation
    			==========================================================================
     */
    $$('.manage-content').on('click', '.manage-content-list .save', function() {
      var variation;
      variation = $(this).parents('.manage-content-list-item').first().data('item');
      return variation.save();
    });
  }

  /* ==========================================================================
  	   Block Dynamic Appension
  	   ==========================================================================
   */
  appendDynamicBlocks = function(selectField, blockValues) {
    var $backupBlock, $dynamicBlock, $extraFields, $fieldset, $repeaterItem, $selectField, dynamicBlockMarkup, fieldValues, formInstance, repeaterInstance, selectedBlock;
    $selectField = $(selectField);
    selectedBlock = $selectField.val();
    fieldValues = null;
    if (selectedBlock) {
      $fieldset = $selectField.parents('.fieldset').first();
      $repeaterItem = $fieldset.parent().parent();
      repeaterInstance = $fieldset.parents('.fieldset').first().data('Field');
      formInstance = repeaterInstance.form;
      blockValues = blockValues || repeaterInstance.comments;
      dynamicBlockMarkup = $("#block-" + selectedBlock).html();
      $dynamicBlock = $("<div class='dynamic_block' data-block='" + selectedBlock + "'>" + dynamicBlockMarkup + "</div>");
      $backupBlock = $("<div class='dynamic_block_backup'></div>");
      if (dynamicBlockMarkup) {
        $dynamicBlock.insertAfter($fieldset);
        $extraFields = $dynamicBlock.children('.dynamic_block').children('.fieldset');
        $dynamicBlock.children('.fieldset').add($extraFields).each(function() {
          var fieldInstance;
          repeaterInstance.addChildField($(this));
          fieldInstance = $(this).data('Field');
          if (blockValues) {
            fieldValues = blockValues[$repeaterItem.index()];
            if (fieldInstance.type.includes('repeater') && fieldValues[fieldInstance.name].constructor !== Array) {
              fieldValues[fieldInstance.name] = util.convertObjectToArray(fieldValues[fieldInstance.name]);
            }
            return fieldInstance.setValue(fieldValues[fieldInstance.name]);
          }
        });
        $dynamicBlock.find('[name="blocks---slug[]"]').not('.disabled_forever').each(function() {
          return appendDynamicBlocks(this, fieldValues.blocks);
        });
      }
      return $backupBlock.insertAfter($dynamicBlock);
    }
  };
  $('.manage-content').find('[name="blocks---slug[]"]').not('.disabled_forever').each(function() {
    return appendDynamicBlocks(this);
  });
  $(document).on('change', '[name="blocks---slug[]"]', function() {
    var $backupBlock, $currentDynamicBlock, $dynamicBlock, $existingBlockInBackup, $fieldset, $selectField, dynamicBlockMarkup, formInstance, repeaterInstance, selectedBlock;
    $selectField = $(this);
    $fieldset = $selectField.parents('.fieldset').first();
    selectedBlock = $selectField.val();
    repeaterInstance = $fieldset.parents('.fieldset').first().data('Field');
    formInstance = repeaterInstance.form;
    dynamicBlockMarkup = $("#block-" + selectedBlock).html();
    $currentDynamicBlock = $fieldset.next();
    $dynamicBlock = $("<div class='dynamic_block' data-block='" + selectedBlock + "'>" + dynamicBlockMarkup + "</div>");
    $backupBlock = $fieldset.siblings('.dynamic_block_backup');
    if ($backupBlock.length === 0) {
      $backupBlock = $("<div class='dynamic_block_backup'></div>");
      if ($currentDynamicBlock.length) {
        $backupBlock.insertAfter($currentDynamicBlock);
      } else {
        $backupBlock.insertAfter($fieldset);
      }
    }
    if ($currentDynamicBlock.length) {
      $currentDynamicBlock.children('.fieldset').each(function() {
        return repeaterInstance.removeChildField($(this));
      }).end().appendTo($backupBlock);
    }
    if ($backupBlock.children().length) {
      $existingBlockInBackup = $backupBlock.children().filter(function() {
        return $(this).data('block') === selectedBlock;
      });
      if ($existingBlockInBackup.length) {
        $dynamicBlock = $existingBlockInBackup;
      }
    }
    if (dynamicBlockMarkup) {
      $dynamicBlock.insertAfter($fieldset);
      return $dynamicBlock.children('.fieldset').each(function() {
        return repeaterInstance.addChildField($(this));
      });
    }
  });
  initForm($$('.manage_login-form'));
  $$('.manage_login-form').off();
  $$('.manage_login-form-button').on('click', function() {
    $$('.manage_login-form').submit();
  });

  /* ==========================================================================
  		 Item opening mechanism
  		==========================================================================
   */
  $$('.manage-content').find('.toggle_open').each(function() {
    var $item;
    $item = $(this).parents('.step').first();
    if (!$item.hasClass('start_opened')) {
      return $item.addClass('closed').data('closed', true);
    } else {
      return $item.addClass('show').data('closed', false);
    }
  });
  $$('.manage-content').on('click', '.toggle_open', function() {
    var $content, $item, $toggle, closed, formInstance;
    $toggle = jQuery(this).parent();
    $item = $(this).parents('.step').first();
    $content = $toggle.children('.toggled_content');
    closed = $toggle.data('closed');
    formInstance = $item.parents('form').first().data('Form');
    formInstance.setCurrentStepTo($item);
    if (closed) {
      $toggle.removeClass('closed').addClass('show').data('closed', true);
      $content.slideDown(300);
    } else {
      $toggle.addClass('closed').removeClass('show');
      $content.slideUp(300);
    }
    $toggle.data('closed', !closed);
    return setTimeout(function() {
      return setMinMax(true);
    }, 700);
  });
  $$('.manage-content').on('mouseup touchend', '.repeater-toggle, .group-toggle', function() {
    return setTimeout(function() {
      return setMinMax(true);
    }, 700);
  });
  makeGroupSortable = function($group, groupChildrenName) {
    var group, groupName, variationName;
    group = $group[0];
    variationName = $group.parents('.manage-content-list-item').attr('id');
    groupName = group.classList[0];
    return $group.each(function() {
      var $groupItem, groupItem;
      $groupItem = $(this);
      groupItem = this;
      return $groupItem.data('Sortable', new Sortable(groupItem, {
        group: variationName + '___' + groupName,
        sort: true,
        draggable: groupChildrenName,
        onUpdate: function(event) {
          var parentRepeater;
          parentRepeater = $(event.target).parents('.fieldset').first().data('Field');
          return parentRepeater.collectFields();
        }
      }));
    });
  };
  initSortables = function($variation) {
    var $repeaterItems;
    $repeaterItems = $variation.find('.repeater-items');
    if ($repeaterItems.length) {
      return makeGroupSortable($repeaterItems, '.repeater-item');
    }
  };
  return $('.manage-content-list-item').each(function() {
    return initSortables($(this));
  });
})(jQuery);
