// Generated by CoffeeScript 1.10.0
/*! jQuery v2.1.4 | (c) 2005, 2015 jQuery Foundation, Inc. | jquery.org/license */
!function(a,b){"object"==typeof module&&"object"==typeof module.exports?module.exports=a.document?b(a,!0):function(a){if(!a.document)throw new Error("jQuery requires a window with a document");return b(a)}:b(a)}("undefined"!=typeof window?window:this,function(a,b){var c=[],d=c.slice,e=c.concat,f=c.push,g=c.indexOf,h={},i=h.toString,j=h.hasOwnProperty,k={},l=a.document,m="2.1.4",n=function(a,b){return new n.fn.init(a,b)},o=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,p=/^-ms-/,q=/-([\da-z])/gi,r=function(a,b){return b.toUpperCase()};n.fn=n.prototype={jquery:m,constructor:n,selector:"",length:0,toArray:function(){return d.call(this)},get:function(a){return null!=a?0>a?this[a+this.length]:this[a]:d.call(this)},pushStack:function(a){var b=n.merge(this.constructor(),a);return b.prevObject=this,b.context=this.context,b},each:function(a,b){return n.each(this,a,b)},map:function(a){return this.pushStack(n.map(this,function(b,c){return a.call(b,c,b)}))},slice:function(){return this.pushStack(d.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},eq:function(a){var b=this.length,c=+a+(0>a?b:0);return this.pushStack(c>=0&&b>c?[this[c]]:[])},end:function(){return this.prevObject||this.constructor(null)},push:f,sort:c.sort,splice:c.splice},n.extend=n.fn.extend=function(){var a,b,c,d,e,f,g=arguments[0]||{},h=1,i=arguments.length,j=!1;for("boolean"==typeof g&&(j=g,g=arguments[h]||{},h++),"object"==typeof g||n.isFunction(g)||(g={}),h===i&&(g=this,h--);i>h;h++)if(null!=(a=arguments[h]))for(b in a)c=g[b],d=a[b],g!==d&&(j&&d&&(n.isPlainObject(d)||(e=n.isArray(d)))?(e?(e=!1,f=c&&n.isArray(c)?c:[]):f=c&&n.isPlainObject(c)?c:{},g[b]=n.extend(j,f,d)):void 0!==d&&(g[b]=d));return g},n.extend({expando:"jQuery"+(m+Math.random()).replace(/\D/g,""),isReady:!0,error:function(a){throw new Error(a)},noop:function(){},isFunction:function(a){return"function"===n.type(a)},isArray:Array.isArray,isWindow:function(a){return null!=a&&a===a.window},isNumeric:function(a){return!n.isArray(a)&&a-parseFloat(a)+1>=0},isPlainObject:function(a){return"object"!==n.type(a)||a.nodeType||n.isWindow(a)?!1:a.constructor&&!j.call(a.constructor.prototype,"isPrototypeOf")?!1:!0},isEmptyObject:function(a){var b;for(b in a)return!1;return!0},type:function(a){return null==a?a+"":"object"==typeof a||"function"==typeof a?h[i.call(a)]||"object":typeof a},globalEval:function(a){var b,c=eval;a=n.trim(a),a&&(1===a.indexOf("use strict")?(b=l.createElement("script"),b.text=a,l.head.appendChild(b).parentNode.removeChild(b)):c(a))},camelCase:function(a){return a.replace(p,"ms-").replace(q,r)},nodeName:function(a,b){return a.nodeName&&a.nodeName.toLowerCase()===b.toLowerCase()},each:function(a,b,c){var d,e=0,f=a.length,g=s(a);if(c){if(g){for(;f>e;e++)if(d=b.apply(a[e],c),d===!1)break}else for(e in a)if(d=b.apply(a[e],c),d===!1)break}else if(g){for(;f>e;e++)if(d=b.call(a[e],e,a[e]),d===!1)break}else for(e in a)if(d=b.call(a[e],e,a[e]),d===!1)break;return a},trim:function(a){return null==a?"":(a+"").replace(o,"")},makeArray:function(a,b){var c=b||[];return null!=a&&(s(Object(a))?n.merge(c,"string"==typeof a?[a]:a):f.call(c,a)),c},inArray:function(a,b,c){return null==b?-1:g.call(b,a,c)},merge:function(a,b){for(var c=+b.length,d=0,e=a.length;c>d;d++)a[e++]=b[d];return a.length=e,a},grep:function(a,b,c){for(var d,e=[],f=0,g=a.length,h=!c;g>f;f++)d=!b(a[f],f),d!==h&&e.push(a[f]);return e},map:function(a,b,c){var d,f=0,g=a.length,h=s(a),i=[];if(h)for(;g>f;f++)d=b(a[f],f,c),null!=d&&i.push(d);else for(f in a)d=b(a[f],f,c),null!=d&&i.push(d);return e.apply([],i)},guid:1,proxy:function(a,b){var c,e,f;return"string"==typeof b&&(c=a[b],b=a,a=c),n.isFunction(a)?(e=d.call(arguments,2),f=function(){return a.apply(b||this,e.concat(d.call(arguments)))},f.guid=a.guid=a.guid||n.guid++,f):void 0},now:Date.now,support:k}),n.each("Boolean Number String Function Array Date RegExp Object Error".split(" "),function(a,b){h["[object "+b+"]"]=b.toLowerCase()});function s(a){var b="length"in a&&a.length,c=n.type(a);return"function"===c||n.isWindow(a)?!1:1===a.nodeType&&b?!0:"array"===c||0===b||"number"==typeof b&&b>0&&b-1 in a}var t=function(a){var b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u="sizzle"+1*new Date,v=a.document,w=0,x=0,y=ha(),z=ha(),A=ha(),B=function(a,b){return a===b&&(l=!0),0},C=1<<31,D={}.hasOwnProperty,E=[],F=E.pop,G=E.push,H=E.push,I=E.slice,J=function(a,b){for(var c=0,d=a.length;d>c;c++)if(a[c]===b)return c;return-1},K="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",L="[\\x20\\t\\r\\n\\f]",M="(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+",N=M.replace("w","w#"),O="\\["+L+"*("+M+")(?:"+L+"*([*^$|!~]?=)"+L+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+N+"))|)"+L+"*\\]",P=":("+M+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+O+")*)|.*)\\)|)",Q=new RegExp(L+"+","g"),R=new RegExp("^"+L+"+|((?:^|[^\\\\])(?:\\\\.)*)"+L+"+$","g"),S=new RegExp("^"+L+"*,"+L+"*"),T=new RegExp("^"+L+"*([>+~]|"+L+")"+L+"*"),U=new RegExp("="+L+"*([^\\]'\"]*?)"+L+"*\\]","g"),V=new RegExp(P),W=new RegExp("^"+N+"$"),X={ID:new RegExp("^#("+M+")"),CLASS:new RegExp("^\\.("+M+")"),TAG:new RegExp("^("+M.replace("w","w*")+")"),ATTR:new RegExp("^"+O),PSEUDO:new RegExp("^"+P),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+L+"*(even|odd|(([+-]|)(\\d*)n|)"+L+"*(?:([+-]|)"+L+"*(\\d+)|))"+L+"*\\)|)","i"),bool:new RegExp("^(?:"+K+")$","i"),needsContext:new RegExp("^"+L+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+L+"*((?:-\\d)?\\d*)"+L+"*\\)|)(?=[^-]|$)","i")},Y=/^(?:input|select|textarea|button)$/i,Z=/^h\d$/i,$=/^[^{]+\{\s*\[native \w/,_=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,aa=/[+~]/,ba=/'|\\/g,ca=new RegExp("\\\\([\\da-f]{1,6}"+L+"?|("+L+")|.)","ig"),da=function(a,b,c){var d="0x"+b-65536;return d!==d||c?b:0>d?String.fromCharCode(d+65536):String.fromCharCode(d>>10|55296,1023&d|56320)},ea=function(){m()};try{H.apply(E=I.call(v.childNodes),v.childNodes),E[v.childNodes.length].nodeType}catch(fa){H={apply:E.length?function(a,b){G.apply(a,I.call(b))}:function(a,b){var c=a.length,d=0;while(a[c++]=b[d++]);a.length=c-1}}}function ga(a,b,d,e){var f,h,j,k,l,o,r,s,w,x;if((b?b.ownerDocument||b:v)!==n&&m(b),b=b||n,d=d||[],k=b.nodeType,"string"!=typeof a||!a||1!==k&&9!==k&&11!==k)return d;if(!e&&p){if(11!==k&&(f=_.exec(a)))if(j=f[1]){if(9===k){if(h=b.getElementById(j),!h||!h.parentNode)return d;if(h.id===j)return d.push(h),d}else if(b.ownerDocument&&(h=b.ownerDocument.getElementById(j))&&t(b,h)&&h.id===j)return d.push(h),d}else{if(f[2])return H.apply(d,b.getElementsByTagName(a)),d;if((j=f[3])&&c.getElementsByClassName)return H.apply(d,b.getElementsByClassName(j)),d}if(c.qsa&&(!q||!q.test(a))){if(s=r=u,w=b,x=1!==k&&a,1===k&&"object"!==b.nodeName.toLowerCase()){o=g(a),(r=b.getAttribute("id"))?s=r.replace(ba,"\\$&"):b.setAttribute("id",s),s="[id='"+s+"'] ",l=o.length;while(l--)o[l]=s+ra(o[l]);w=aa.test(a)&&pa(b.parentNode)||b,x=o.join(",")}if(x)try{return H.apply(d,w.querySelectorAll(x)),d}catch(y){}finally{r||b.removeAttribute("id")}}}return i(a.replace(R,"$1"),b,d,e)}function ha(){var a=[];function b(c,e){return a.push(c+" ")>d.cacheLength&&delete b[a.shift()],b[c+" "]=e}return b}function ia(a){return a[u]=!0,a}function ja(a){var b=n.createElement("div");try{return!!a(b)}catch(c){return!1}finally{b.parentNode&&b.parentNode.removeChild(b),b=null}}function ka(a,b){var c=a.split("|"),e=a.length;while(e--)d.attrHandle[c[e]]=b}function la(a,b){var c=b&&a,d=c&&1===a.nodeType&&1===b.nodeType&&(~b.sourceIndex||C)-(~a.sourceIndex||C);if(d)return d;if(c)while(c=c.nextSibling)if(c===b)return-1;return a?1:-1}function ma(a){return function(b){var c=b.nodeName.toLowerCase();return"input"===c&&b.type===a}}function na(a){return function(b){var c=b.nodeName.toLowerCase();return("input"===c||"button"===c)&&b.type===a}}function oa(a){return ia(function(b){return b=+b,ia(function(c,d){var e,f=a([],c.length,b),g=f.length;while(g--)c[e=f[g]]&&(c[e]=!(d[e]=c[e]))})})}function pa(a){return a&&"undefined"!=typeof a.getElementsByTagName&&a}c=ga.support={},f=ga.isXML=function(a){var b=a&&(a.ownerDocument||a).documentElement;return b?"HTML"!==b.nodeName:!1},m=ga.setDocument=function(a){var b,e,g=a?a.ownerDocument||a:v;return g!==n&&9===g.nodeType&&g.documentElement?(n=g,o=g.documentElement,e=g.defaultView,e&&e!==e.top&&(e.addEventListener?e.addEventListener("unload",ea,!1):e.attachEvent&&e.attachEvent("onunload",ea)),p=!f(g),c.attributes=ja(function(a){return a.className="i",!a.getAttribute("className")}),c.getElementsByTagName=ja(function(a){return a.appendChild(g.createComment("")),!a.getElementsByTagName("*").length}),c.getElementsByClassName=$.test(g.getElementsByClassName),c.getById=ja(function(a){return o.appendChild(a).id=u,!g.getElementsByName||!g.getElementsByName(u).length}),c.getById?(d.find.ID=function(a,b){if("undefined"!=typeof b.getElementById&&p){var c=b.getElementById(a);return c&&c.parentNode?[c]:[]}},d.filter.ID=function(a){var b=a.replace(ca,da);return function(a){return a.getAttribute("id")===b}}):(delete d.find.ID,d.filter.ID=function(a){var b=a.replace(ca,da);return function(a){var c="undefined"!=typeof a.getAttributeNode&&a.getAttributeNode("id");return c&&c.value===b}}),d.find.TAG=c.getElementsByTagName?function(a,b){return"undefined"!=typeof b.getElementsByTagName?b.getElementsByTagName(a):c.qsa?b.querySelectorAll(a):void 0}:function(a,b){var c,d=[],e=0,f=b.getElementsByTagName(a);if("*"===a){while(c=f[e++])1===c.nodeType&&d.push(c);return d}return f},d.find.CLASS=c.getElementsByClassName&&function(a,b){return p?b.getElementsByClassName(a):void 0},r=[],q=[],(c.qsa=$.test(g.querySelectorAll))&&(ja(function(a){o.appendChild(a).innerHTML="<a id='"+u+"'></a><select id='"+u+"-\f]' msallowcapture=''><option selected=''></option></select>",a.querySelectorAll("[msallowcapture^='']").length&&q.push("[*^$]="+L+"*(?:''|\"\")"),a.querySelectorAll("[selected]").length||q.push("\\["+L+"*(?:value|"+K+")"),a.querySelectorAll("[id~="+u+"-]").length||q.push("~="),a.querySelectorAll(":checked").length||q.push(":checked"),a.querySelectorAll("a#"+u+"+*").length||q.push(".#.+[+~]")}),ja(function(a){var b=g.createElement("input");b.setAttribute("type","hidden"),a.appendChild(b).setAttribute("name","D"),a.querySelectorAll("[name=d]").length&&q.push("name"+L+"*[*^$|!~]?="),a.querySelectorAll(":enabled").length||q.push(":enabled",":disabled"),a.querySelectorAll("*,:x"),q.push(",.*:")})),(c.matchesSelector=$.test(s=o.matches||o.webkitMatchesSelector||o.mozMatchesSelector||o.oMatchesSelector||o.msMatchesSelector))&&ja(function(a){c.disconnectedMatch=s.call(a,"div"),s.call(a,"[s!='']:x"),r.push("!=",P)}),q=q.length&&new RegExp(q.join("|")),r=r.length&&new RegExp(r.join("|")),b=$.test(o.compareDocumentPosition),t=b||$.test(o.contains)?function(a,b){var c=9===a.nodeType?a.documentElement:a,d=b&&b.parentNode;return a===d||!(!d||1!==d.nodeType||!(c.contains?c.contains(d):a.compareDocumentPosition&&16&a.compareDocumentPosition(d)))}:function(a,b){if(b)while(b=b.parentNode)if(b===a)return!0;return!1},B=b?function(a,b){if(a===b)return l=!0,0;var d=!a.compareDocumentPosition-!b.compareDocumentPosition;return d?d:(d=(a.ownerDocument||a)===(b.ownerDocument||b)?a.compareDocumentPosition(b):1,1&d||!c.sortDetached&&b.compareDocumentPosition(a)===d?a===g||a.ownerDocument===v&&t(v,a)?-1:b===g||b.ownerDocument===v&&t(v,b)?1:k?J(k,a)-J(k,b):0:4&d?-1:1)}:function(a,b){if(a===b)return l=!0,0;var c,d=0,e=a.parentNode,f=b.parentNode,h=[a],i=[b];if(!e||!f)return a===g?-1:b===g?1:e?-1:f?1:k?J(k,a)-J(k,b):0;if(e===f)return la(a,b);c=a;while(c=c.parentNode)h.unshift(c);c=b;while(c=c.parentNode)i.unshift(c);while(h[d]===i[d])d++;return d?la(h[d],i[d]):h[d]===v?-1:i[d]===v?1:0},g):n},ga.matches=function(a,b){return ga(a,null,null,b)},ga.matchesSelector=function(a,b){if((a.ownerDocument||a)!==n&&m(a),b=b.replace(U,"='$1']"),!(!c.matchesSelector||!p||r&&r.test(b)||q&&q.test(b)))try{var d=s.call(a,b);if(d||c.disconnectedMatch||a.document&&11!==a.document.nodeType)return d}catch(e){}return ga(b,n,null,[a]).length>0},ga.contains=function(a,b){return(a.ownerDocument||a)!==n&&m(a),t(a,b)},ga.attr=function(a,b){(a.ownerDocument||a)!==n&&m(a);var e=d.attrHandle[b.toLowerCase()],f=e&&D.call(d.attrHandle,b.toLowerCase())?e(a,b,!p):void 0;return void 0!==f?f:c.attributes||!p?a.getAttribute(b):(f=a.getAttributeNode(b))&&f.specified?f.value:null},ga.error=function(a){throw new Error("Syntax error, unrecognized expression: "+a)},ga.uniqueSort=function(a){var b,d=[],e=0,f=0;if(l=!c.detectDuplicates,k=!c.sortStable&&a.slice(0),a.sort(B),l){while(b=a[f++])b===a[f]&&(e=d.push(f));while(e--)a.splice(d[e],1)}return k=null,a},e=ga.getText=function(a){var b,c="",d=0,f=a.nodeType;if(f){if(1===f||9===f||11===f){if("string"==typeof a.textContent)return a.textContent;for(a=a.firstChild;a;a=a.nextSibling)c+=e(a)}else if(3===f||4===f)return a.nodeValue}else while(b=a[d++])c+=e(b);return c},d=ga.selectors={cacheLength:50,createPseudo:ia,match:X,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(a){return a[1]=a[1].replace(ca,da),a[3]=(a[3]||a[4]||a[5]||"").replace(ca,da),"~="===a[2]&&(a[3]=" "+a[3]+" "),a.slice(0,4)},CHILD:function(a){return a[1]=a[1].toLowerCase(),"nth"===a[1].slice(0,3)?(a[3]||ga.error(a[0]),a[4]=+(a[4]?a[5]+(a[6]||1):2*("even"===a[3]||"odd"===a[3])),a[5]=+(a[7]+a[8]||"odd"===a[3])):a[3]&&ga.error(a[0]),a},PSEUDO:function(a){var b,c=!a[6]&&a[2];return X.CHILD.test(a[0])?null:(a[3]?a[2]=a[4]||a[5]||"":c&&V.test(c)&&(b=g(c,!0))&&(b=c.indexOf(")",c.length-b)-c.length)&&(a[0]=a[0].slice(0,b),a[2]=c.slice(0,b)),a.slice(0,3))}},filter:{TAG:function(a){var b=a.replace(ca,da).toLowerCase();return"*"===a?function(){return!0}:function(a){return a.nodeName&&a.nodeName.toLowerCase()===b}},CLASS:function(a){var b=y[a+" "];return b||(b=new RegExp("(^|"+L+")"+a+"("+L+"|$)"))&&y(a,function(a){return b.test("string"==typeof a.className&&a.className||"undefined"!=typeof a.getAttribute&&a.getAttribute("class")||"")})},ATTR:function(a,b,c){return function(d){var e=ga.attr(d,a);return null==e?"!="===b:b?(e+="","="===b?e===c:"!="===b?e!==c:"^="===b?c&&0===e.indexOf(c):"*="===b?c&&e.indexOf(c)>-1:"$="===b?c&&e.slice(-c.length)===c:"~="===b?(" "+e.replace(Q," ")+" ").indexOf(c)>-1:"|="===b?e===c||e.slice(0,c.length+1)===c+"-":!1):!0}},CHILD:function(a,b,c,d,e){var f="nth"!==a.slice(0,3),g="last"!==a.slice(-4),h="of-type"===b;return 1===d&&0===e?function(a){return!!a.parentNode}:function(b,c,i){var j,k,l,m,n,o,p=f!==g?"nextSibling":"previousSibling",q=b.parentNode,r=h&&b.nodeName.toLowerCase(),s=!i&&!h;if(q){if(f){while(p){l=b;while(l=l[p])if(h?l.nodeName.toLowerCase()===r:1===l.nodeType)return!1;o=p="only"===a&&!o&&"nextSibling"}return!0}if(o=[g?q.firstChild:q.lastChild],g&&s){k=q[u]||(q[u]={}),j=k[a]||[],n=j[0]===w&&j[1],m=j[0]===w&&j[2],l=n&&q.childNodes[n];while(l=++n&&l&&l[p]||(m=n=0)||o.pop())if(1===l.nodeType&&++m&&l===b){k[a]=[w,n,m];break}}else if(s&&(j=(b[u]||(b[u]={}))[a])&&j[0]===w)m=j[1];else while(l=++n&&l&&l[p]||(m=n=0)||o.pop())if((h?l.nodeName.toLowerCase()===r:1===l.nodeType)&&++m&&(s&&((l[u]||(l[u]={}))[a]=[w,m]),l===b))break;return m-=e,m===d||m%d===0&&m/d>=0}}},PSEUDO:function(a,b){var c,e=d.pseudos[a]||d.setFilters[a.toLowerCase()]||ga.error("unsupported pseudo: "+a);return e[u]?e(b):e.length>1?(c=[a,a,"",b],d.setFilters.hasOwnProperty(a.toLowerCase())?ia(function(a,c){var d,f=e(a,b),g=f.length;while(g--)d=J(a,f[g]),a[d]=!(c[d]=f[g])}):function(a){return e(a,0,c)}):e}},pseudos:{not:ia(function(a){var b=[],c=[],d=h(a.replace(R,"$1"));return d[u]?ia(function(a,b,c,e){var f,g=d(a,null,e,[]),h=a.length;while(h--)(f=g[h])&&(a[h]=!(b[h]=f))}):function(a,e,f){return b[0]=a,d(b,null,f,c),b[0]=null,!c.pop()}}),has:ia(function(a){return function(b){return ga(a,b).length>0}}),contains:ia(function(a){return a=a.replace(ca,da),function(b){return(b.textContent||b.innerText||e(b)).indexOf(a)>-1}}),lang:ia(function(a){return W.test(a||"")||ga.error("unsupported lang: "+a),a=a.replace(ca,da).toLowerCase(),function(b){var c;do if(c=p?b.lang:b.getAttribute("xml:lang")||b.getAttribute("lang"))return c=c.toLowerCase(),c===a||0===c.indexOf(a+"-");while((b=b.parentNode)&&1===b.nodeType);return!1}}),target:function(b){var c=a.location&&a.location.hash;return c&&c.slice(1)===b.id},root:function(a){return a===o},focus:function(a){return a===n.activeElement&&(!n.hasFocus||n.hasFocus())&&!!(a.type||a.href||~a.tabIndex)},enabled:function(a){return a.disabled===!1},disabled:function(a){return a.disabled===!0},checked:function(a){var b=a.nodeName.toLowerCase();return"input"===b&&!!a.checked||"option"===b&&!!a.selected},selected:function(a){return a.parentNode&&a.parentNode.selectedIndex,a.selected===!0},empty:function(a){for(a=a.firstChild;a;a=a.nextSibling)if(a.nodeType<6)return!1;return!0},parent:function(a){return!d.pseudos.empty(a)},header:function(a){return Z.test(a.nodeName)},input:function(a){return Y.test(a.nodeName)},button:function(a){var b=a.nodeName.toLowerCase();return"input"===b&&"button"===a.type||"button"===b},text:function(a){var b;return"input"===a.nodeName.toLowerCase()&&"text"===a.type&&(null==(b=a.getAttribute("type"))||"text"===b.toLowerCase())},first:oa(function(){return[0]}),last:oa(function(a,b){return[b-1]}),eq:oa(function(a,b,c){return[0>c?c+b:c]}),even:oa(function(a,b){for(var c=0;b>c;c+=2)a.push(c);return a}),odd:oa(function(a,b){for(var c=1;b>c;c+=2)a.push(c);return a}),lt:oa(function(a,b,c){for(var d=0>c?c+b:c;--d>=0;)a.push(d);return a}),gt:oa(function(a,b,c){for(var d=0>c?c+b:c;++d<b;)a.push(d);return a})}},d.pseudos.nth=d.pseudos.eq;for(b in{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})d.pseudos[b]=ma(b);for(b in{submit:!0,reset:!0})d.pseudos[b]=na(b);function qa(){}qa.prototype=d.filters=d.pseudos,d.setFilters=new qa,g=ga.tokenize=function(a,b){var c,e,f,g,h,i,j,k=z[a+" "];if(k)return b?0:k.slice(0);h=a,i=[],j=d.preFilter;while(h){(!c||(e=S.exec(h)))&&(e&&(h=h.slice(e[0].length)||h),i.push(f=[])),c=!1,(e=T.exec(h))&&(c=e.shift(),f.push({value:c,type:e[0].replace(R," ")}),h=h.slice(c.length));for(g in d.filter)!(e=X[g].exec(h))||j[g]&&!(e=j[g](e))||(c=e.shift(),f.push({value:c,type:g,matches:e}),h=h.slice(c.length));if(!c)break}return b?h.length:h?ga.error(a):z(a,i).slice(0)};function ra(a){for(var b=0,c=a.length,d="";c>b;b++)d+=a[b].value;return d}function sa(a,b,c){var d=b.dir,e=c&&"parentNode"===d,f=x++;return b.first?function(b,c,f){while(b=b[d])if(1===b.nodeType||e)return a(b,c,f)}:function(b,c,g){var h,i,j=[w,f];if(g){while(b=b[d])if((1===b.nodeType||e)&&a(b,c,g))return!0}else while(b=b[d])if(1===b.nodeType||e){if(i=b[u]||(b[u]={}),(h=i[d])&&h[0]===w&&h[1]===f)return j[2]=h[2];if(i[d]=j,j[2]=a(b,c,g))return!0}}}function ta(a){return a.length>1?function(b,c,d){var e=a.length;while(e--)if(!a[e](b,c,d))return!1;return!0}:a[0]}function ua(a,b,c){for(var d=0,e=b.length;e>d;d++)ga(a,b[d],c);return c}function va(a,b,c,d,e){for(var f,g=[],h=0,i=a.length,j=null!=b;i>h;h++)(f=a[h])&&(!c||c(f,d,e))&&(g.push(f),j&&b.push(h));return g}function wa(a,b,c,d,e,f){return d&&!d[u]&&(d=wa(d)),e&&!e[u]&&(e=wa(e,f)),ia(function(f,g,h,i){var j,k,l,m=[],n=[],o=g.length,p=f||ua(b||"*",h.nodeType?[h]:h,[]),q=!a||!f&&b?p:va(p,m,a,h,i),r=c?e||(f?a:o||d)?[]:g:q;if(c&&c(q,r,h,i),d){j=va(r,n),d(j,[],h,i),k=j.length;while(k--)(l=j[k])&&(r[n[k]]=!(q[n[k]]=l))}if(f){if(e||a){if(e){j=[],k=r.length;while(k--)(l=r[k])&&j.push(q[k]=l);e(null,r=[],j,i)}k=r.length;while(k--)(l=r[k])&&(j=e?J(f,l):m[k])>-1&&(f[j]=!(g[j]=l))}}else r=va(r===g?r.splice(o,r.length):r),e?e(null,g,r,i):H.apply(g,r)})}function xa(a){for(var b,c,e,f=a.length,g=d.relative[a[0].type],h=g||d.relative[" "],i=g?1:0,k=sa(function(a){return a===b},h,!0),l=sa(function(a){return J(b,a)>-1},h,!0),m=[function(a,c,d){var e=!g&&(d||c!==j)||((b=c).nodeType?k(a,c,d):l(a,c,d));return b=null,e}];f>i;i++)if(c=d.relative[a[i].type])m=[sa(ta(m),c)];else{if(c=d.filter[a[i].type].apply(null,a[i].matches),c[u]){for(e=++i;f>e;e++)if(d.relative[a[e].type])break;return wa(i>1&&ta(m),i>1&&ra(a.slice(0,i-1).concat({value:" "===a[i-2].type?"*":""})).replace(R,"$1"),c,e>i&&xa(a.slice(i,e)),f>e&&xa(a=a.slice(e)),f>e&&ra(a))}m.push(c)}return ta(m)}function ya(a,b){var c=b.length>0,e=a.length>0,f=function(f,g,h,i,k){var l,m,o,p=0,q="0",r=f&&[],s=[],t=j,u=f||e&&d.find.TAG("*",k),v=w+=null==t?1:Math.random()||.1,x=u.length;for(k&&(j=g!==n&&g);q!==x&&null!=(l=u[q]);q++){if(e&&l){m=0;while(o=a[m++])if(o(l,g,h)){i.push(l);break}k&&(w=v)}c&&((l=!o&&l)&&p--,f&&r.push(l))}if(p+=q,c&&q!==p){m=0;while(o=b[m++])o(r,s,g,h);if(f){if(p>0)while(q--)r[q]||s[q]||(s[q]=F.call(i));s=va(s)}H.apply(i,s),k&&!f&&s.length>0&&p+b.length>1&&ga.uniqueSort(i)}return k&&(w=v,j=t),r};return c?ia(f):f}return h=ga.compile=function(a,b){var c,d=[],e=[],f=A[a+" "];if(!f){b||(b=g(a)),c=b.length;while(c--)f=xa(b[c]),f[u]?d.push(f):e.push(f);f=A(a,ya(e,d)),f.selector=a}return f},i=ga.select=function(a,b,e,f){var i,j,k,l,m,n="function"==typeof a&&a,o=!f&&g(a=n.selector||a);if(e=e||[],1===o.length){if(j=o[0]=o[0].slice(0),j.length>2&&"ID"===(k=j[0]).type&&c.getById&&9===b.nodeType&&p&&d.relative[j[1].type]){if(b=(d.find.ID(k.matches[0].replace(ca,da),b)||[])[0],!b)return e;n&&(b=b.parentNode),a=a.slice(j.shift().value.length)}i=X.needsContext.test(a)?0:j.length;while(i--){if(k=j[i],d.relative[l=k.type])break;if((m=d.find[l])&&(f=m(k.matches[0].replace(ca,da),aa.test(j[0].type)&&pa(b.parentNode)||b))){if(j.splice(i,1),a=f.length&&ra(j),!a)return H.apply(e,f),e;break}}}return(n||h(a,o))(f,b,!p,e,aa.test(a)&&pa(b.parentNode)||b),e},c.sortStable=u.split("").sort(B).join("")===u,c.detectDuplicates=!!l,m(),c.sortDetached=ja(function(a){return 1&a.compareDocumentPosition(n.createElement("div"))}),ja(function(a){return a.innerHTML="<a href='#'></a>","#"===a.firstChild.getAttribute("href")})||ka("type|href|height|width",function(a,b,c){return c?void 0:a.getAttribute(b,"type"===b.toLowerCase()?1:2)}),c.attributes&&ja(function(a){return a.innerHTML="<input/>",a.firstChild.setAttribute("value",""),""===a.firstChild.getAttribute("value")})||ka("value",function(a,b,c){return c||"input"!==a.nodeName.toLowerCase()?void 0:a.defaultValue}),ja(function(a){return null==a.getAttribute("disabled")})||ka(K,function(a,b,c){var d;return c?void 0:a[b]===!0?b.toLowerCase():(d=a.getAttributeNode(b))&&d.specified?d.value:null}),ga}(a);n.find=t,n.expr=t.selectors,n.expr[":"]=n.expr.pseudos,n.unique=t.uniqueSort,n.text=t.getText,n.isXMLDoc=t.isXML,n.contains=t.contains;var u=n.expr.match.needsContext,v=/^<(\w+)\s*\/?>(?:<\/\1>|)$/,w=/^.[^:#\[\.,]*$/;function x(a,b,c){if(n.isFunction(b))return n.grep(a,function(a,d){return!!b.call(a,d,a)!==c});if(b.nodeType)return n.grep(a,function(a){return a===b!==c});if("string"==typeof b){if(w.test(b))return n.filter(b,a,c);b=n.filter(b,a)}return n.grep(a,function(a){return g.call(b,a)>=0!==c})}n.filter=function(a,b,c){var d=b[0];return c&&(a=":not("+a+")"),1===b.length&&1===d.nodeType?n.find.matchesSelector(d,a)?[d]:[]:n.find.matches(a,n.grep(b,function(a){return 1===a.nodeType}))},n.fn.extend({find:function(a){var b,c=this.length,d=[],e=this;if("string"!=typeof a)return this.pushStack(n(a).filter(function(){for(b=0;c>b;b++)if(n.contains(e[b],this))return!0}));for(b=0;c>b;b++)n.find(a,e[b],d);return d=this.pushStack(c>1?n.unique(d):d),d.selector=this.selector?this.selector+" "+a:a,d},filter:function(a){return this.pushStack(x(this,a||[],!1))},not:function(a){return this.pushStack(x(this,a||[],!0))},is:function(a){return!!x(this,"string"==typeof a&&u.test(a)?n(a):a||[],!1).length}});var y,z=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]*))$/,A=n.fn.init=function(a,b){var c,d;if(!a)return this;if("string"==typeof a){if(c="<"===a[0]&&">"===a[a.length-1]&&a.length>=3?[null,a,null]:z.exec(a),!c||!c[1]&&b)return!b||b.jquery?(b||y).find(a):this.constructor(b).find(a);if(c[1]){if(b=b instanceof n?b[0]:b,n.merge(this,n.parseHTML(c[1],b&&b.nodeType?b.ownerDocument||b:l,!0)),v.test(c[1])&&n.isPlainObject(b))for(c in b)n.isFunction(this[c])?this[c](b[c]):this.attr(c,b[c]);return this}return d=l.getElementById(c[2]),d&&d.parentNode&&(this.length=1,this[0]=d),this.context=l,this.selector=a,this}return a.nodeType?(this.context=this[0]=a,this.length=1,this):n.isFunction(a)?"undefined"!=typeof y.ready?y.ready(a):a(n):(void 0!==a.selector&&(this.selector=a.selector,this.context=a.context),n.makeArray(a,this))};A.prototype=n.fn,y=n(l);var B=/^(?:parents|prev(?:Until|All))/,C={children:!0,contents:!0,next:!0,prev:!0};n.extend({dir:function(a,b,c){var d=[],e=void 0!==c;while((a=a[b])&&9!==a.nodeType)if(1===a.nodeType){if(e&&n(a).is(c))break;d.push(a)}return d},sibling:function(a,b){for(var c=[];a;a=a.nextSibling)1===a.nodeType&&a!==b&&c.push(a);return c}}),n.fn.extend({has:function(a){var b=n(a,this),c=b.length;return this.filter(function(){for(var a=0;c>a;a++)if(n.contains(this,b[a]))return!0})},closest:function(a,b){for(var c,d=0,e=this.length,f=[],g=u.test(a)||"string"!=typeof a?n(a,b||this.context):0;e>d;d++)for(c=this[d];c&&c!==b;c=c.parentNode)if(c.nodeType<11&&(g?g.index(c)>-1:1===c.nodeType&&n.find.matchesSelector(c,a))){f.push(c);break}return this.pushStack(f.length>1?n.unique(f):f)},index:function(a){return a?"string"==typeof a?g.call(n(a),this[0]):g.call(this,a.jquery?a[0]:a):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(a,b){return this.pushStack(n.unique(n.merge(this.get(),n(a,b))))},addBack:function(a){return this.add(null==a?this.prevObject:this.prevObject.filter(a))}});function D(a,b){while((a=a[b])&&1!==a.nodeType);return a}n.each({parent:function(a){var b=a.parentNode;return b&&11!==b.nodeType?b:null},parents:function(a){return n.dir(a,"parentNode")},parentsUntil:function(a,b,c){return n.dir(a,"parentNode",c)},next:function(a){return D(a,"nextSibling")},prev:function(a){return D(a,"previousSibling")},nextAll:function(a){return n.dir(a,"nextSibling")},prevAll:function(a){return n.dir(a,"previousSibling")},nextUntil:function(a,b,c){return n.dir(a,"nextSibling",c)},prevUntil:function(a,b,c){return n.dir(a,"previousSibling",c)},siblings:function(a){return n.sibling((a.parentNode||{}).firstChild,a)},children:function(a){return n.sibling(a.firstChild)},contents:function(a){return a.contentDocument||n.merge([],a.childNodes)}},function(a,b){n.fn[a]=function(c,d){var e=n.map(this,b,c);return"Until"!==a.slice(-5)&&(d=c),d&&"string"==typeof d&&(e=n.filter(d,e)),this.length>1&&(C[a]||n.unique(e),B.test(a)&&e.reverse()),this.pushStack(e)}});var E=/\S+/g,F={};function G(a){var b=F[a]={};return n.each(a.match(E)||[],function(a,c){b[c]=!0}),b}n.Callbacks=function(a){a="string"==typeof a?F[a]||G(a):n.extend({},a);var b,c,d,e,f,g,h=[],i=!a.once&&[],j=function(l){for(b=a.memory&&l,c=!0,g=e||0,e=0,f=h.length,d=!0;h&&f>g;g++)if(h[g].apply(l[0],l[1])===!1&&a.stopOnFalse){b=!1;break}d=!1,h&&(i?i.length&&j(i.shift()):b?h=[]:k.disable())},k={add:function(){if(h){var c=h.length;!function g(b){n.each(b,function(b,c){var d=n.type(c);"function"===d?a.unique&&k.has(c)||h.push(c):c&&c.length&&"string"!==d&&g(c)})}(arguments),d?f=h.length:b&&(e=c,j(b))}return this},remove:function(){return h&&n.each(arguments,function(a,b){var c;while((c=n.inArray(b,h,c))>-1)h.splice(c,1),d&&(f>=c&&f--,g>=c&&g--)}),this},has:function(a){return a?n.inArray(a,h)>-1:!(!h||!h.length)},empty:function(){return h=[],f=0,this},disable:function(){return h=i=b=void 0,this},disabled:function(){return!h},lock:function(){return i=void 0,b||k.disable(),this},locked:function(){return!i},fireWith:function(a,b){return!h||c&&!i||(b=b||[],b=[a,b.slice?b.slice():b],d?i.push(b):j(b)),this},fire:function(){return k.fireWith(this,arguments),this},fired:function(){return!!c}};return k},n.extend({Deferred:function(a){var b=[["resolve","done",n.Callbacks("once memory"),"resolved"],["reject","fail",n.Callbacks("once memory"),"rejected"],["notify","progress",n.Callbacks("memory")]],c="pending",d={state:function(){return c},always:function(){return e.done(arguments).fail(arguments),this},then:function(){var a=arguments;return n.Deferred(function(c){n.each(b,function(b,f){var g=n.isFunction(a[b])&&a[b];e[f[1]](function(){var a=g&&g.apply(this,arguments);a&&n.isFunction(a.promise)?a.promise().done(c.resolve).fail(c.reject).progress(c.notify):c[f[0]+"With"](this===d?c.promise():this,g?[a]:arguments)})}),a=null}).promise()},promise:function(a){return null!=a?n.extend(a,d):d}},e={};return d.pipe=d.then,n.each(b,function(a,f){var g=f[2],h=f[3];d[f[1]]=g.add,h&&g.add(function(){c=h},b[1^a][2].disable,b[2][2].lock),e[f[0]]=function(){return e[f[0]+"With"](this===e?d:this,arguments),this},e[f[0]+"With"]=g.fireWith}),d.promise(e),a&&a.call(e,e),e},when:function(a){var b=0,c=d.call(arguments),e=c.length,f=1!==e||a&&n.isFunction(a.promise)?e:0,g=1===f?a:n.Deferred(),h=function(a,b,c){return function(e){b[a]=this,c[a]=arguments.length>1?d.call(arguments):e,c===i?g.notifyWith(b,c):--f||g.resolveWith(b,c)}},i,j,k;if(e>1)for(i=new Array(e),j=new Array(e),k=new Array(e);e>b;b++)c[b]&&n.isFunction(c[b].promise)?c[b].promise().done(h(b,k,c)).fail(g.reject).progress(h(b,j,i)):--f;return f||g.resolveWith(k,c),g.promise()}});var H;n.fn.ready=function(a){return n.ready.promise().done(a),this},n.extend({isReady:!1,readyWait:1,holdReady:function(a){a?n.readyWait++:n.ready(!0)},ready:function(a){(a===!0?--n.readyWait:n.isReady)||(n.isReady=!0,a!==!0&&--n.readyWait>0||(H.resolveWith(l,[n]),n.fn.triggerHandler&&(n(l).triggerHandler("ready"),n(l).off("ready"))))}});function I(){l.removeEventListener("DOMContentLoaded",I,!1),a.removeEventListener("load",I,!1),n.ready()}n.ready.promise=function(b){return H||(H=n.Deferred(),"complete"===l.readyState?setTimeout(n.ready):(l.addEventListener("DOMContentLoaded",I,!1),a.addEventListener("load",I,!1))),H.promise(b)},n.ready.promise();var J=n.access=function(a,b,c,d,e,f,g){var h=0,i=a.length,j=null==c;if("object"===n.type(c)){e=!0;for(h in c)n.access(a,b,h,c[h],!0,f,g)}else if(void 0!==d&&(e=!0,n.isFunction(d)||(g=!0),j&&(g?(b.call(a,d),b=null):(j=b,b=function(a,b,c){return j.call(n(a),c)})),b))for(;i>h;h++)b(a[h],c,g?d:d.call(a[h],h,b(a[h],c)));return e?a:j?b.call(a):i?b(a[0],c):f};n.acceptData=function(a){return 1===a.nodeType||9===a.nodeType||!+a.nodeType};function K(){Object.defineProperty(this.cache={},0,{get:function(){return{}}}),this.expando=n.expando+K.uid++}K.uid=1,K.accepts=n.acceptData,K.prototype={key:function(a){if(!K.accepts(a))return 0;var b={},c=a[this.expando];if(!c){c=K.uid++;try{b[this.expando]={value:c},Object.defineProperties(a,b)}catch(d){b[this.expando]=c,n.extend(a,b)}}return this.cache[c]||(this.cache[c]={}),c},set:function(a,b,c){var d,e=this.key(a),f=this.cache[e];if("string"==typeof b)f[b]=c;else if(n.isEmptyObject(f))n.extend(this.cache[e],b);else for(d in b)f[d]=b[d];return f},get:function(a,b){var c=this.cache[this.key(a)];return void 0===b?c:c[b]},access:function(a,b,c){var d;return void 0===b||b&&"string"==typeof b&&void 0===c?(d=this.get(a,b),void 0!==d?d:this.get(a,n.camelCase(b))):(this.set(a,b,c),void 0!==c?c:b)},remove:function(a,b){var c,d,e,f=this.key(a),g=this.cache[f];if(void 0===b)this.cache[f]={};else{n.isArray(b)?d=b.concat(b.map(n.camelCase)):(e=n.camelCase(b),b in g?d=[b,e]:(d=e,d=d in g?[d]:d.match(E)||[])),c=d.length;while(c--)delete g[d[c]]}},hasData:function(a){return!n.isEmptyObject(this.cache[a[this.expando]]||{})},discard:function(a){a[this.expando]&&delete this.cache[a[this.expando]]}};var L=new K,M=new K,N=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,O=/([A-Z])/g;function P(a,b,c){var d;if(void 0===c&&1===a.nodeType)if(d="data-"+b.replace(O,"-$1").toLowerCase(),c=a.getAttribute(d),"string"==typeof c){try{c="true"===c?!0:"false"===c?!1:"null"===c?null:+c+""===c?+c:N.test(c)?n.parseJSON(c):c}catch(e){}M.set(a,b,c)}else c=void 0;return c}n.extend({hasData:function(a){return M.hasData(a)||L.hasData(a)},data:function(a,b,c){
return M.access(a,b,c)},removeData:function(a,b){M.remove(a,b)},_data:function(a,b,c){return L.access(a,b,c)},_removeData:function(a,b){L.remove(a,b)}}),n.fn.extend({data:function(a,b){var c,d,e,f=this[0],g=f&&f.attributes;if(void 0===a){if(this.length&&(e=M.get(f),1===f.nodeType&&!L.get(f,"hasDataAttrs"))){c=g.length;while(c--)g[c]&&(d=g[c].name,0===d.indexOf("data-")&&(d=n.camelCase(d.slice(5)),P(f,d,e[d])));L.set(f,"hasDataAttrs",!0)}return e}return"object"==typeof a?this.each(function(){M.set(this,a)}):J(this,function(b){var c,d=n.camelCase(a);if(f&&void 0===b){if(c=M.get(f,a),void 0!==c)return c;if(c=M.get(f,d),void 0!==c)return c;if(c=P(f,d,void 0),void 0!==c)return c}else this.each(function(){var c=M.get(this,d);M.set(this,d,b),-1!==a.indexOf("-")&&void 0!==c&&M.set(this,a,b)})},null,b,arguments.length>1,null,!0)},removeData:function(a){return this.each(function(){M.remove(this,a)})}}),n.extend({queue:function(a,b,c){var d;return a?(b=(b||"fx")+"queue",d=L.get(a,b),c&&(!d||n.isArray(c)?d=L.access(a,b,n.makeArray(c)):d.push(c)),d||[]):void 0},dequeue:function(a,b){b=b||"fx";var c=n.queue(a,b),d=c.length,e=c.shift(),f=n._queueHooks(a,b),g=function(){n.dequeue(a,b)};"inprogress"===e&&(e=c.shift(),d--),e&&("fx"===b&&c.unshift("inprogress"),delete f.stop,e.call(a,g,f)),!d&&f&&f.empty.fire()},_queueHooks:function(a,b){var c=b+"queueHooks";return L.get(a,c)||L.access(a,c,{empty:n.Callbacks("once memory").add(function(){L.remove(a,[b+"queue",c])})})}}),n.fn.extend({queue:function(a,b){var c=2;return"string"!=typeof a&&(b=a,a="fx",c--),arguments.length<c?n.queue(this[0],a):void 0===b?this:this.each(function(){var c=n.queue(this,a,b);n._queueHooks(this,a),"fx"===a&&"inprogress"!==c[0]&&n.dequeue(this,a)})},dequeue:function(a){return this.each(function(){n.dequeue(this,a)})},clearQueue:function(a){return this.queue(a||"fx",[])},promise:function(a,b){var c,d=1,e=n.Deferred(),f=this,g=this.length,h=function(){--d||e.resolveWith(f,[f])};"string"!=typeof a&&(b=a,a=void 0),a=a||"fx";while(g--)c=L.get(f[g],a+"queueHooks"),c&&c.empty&&(d++,c.empty.add(h));return h(),e.promise(b)}});var Q=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,R=["Top","Right","Bottom","Left"],S=function(a,b){return a=b||a,"none"===n.css(a,"display")||!n.contains(a.ownerDocument,a)},T=/^(?:checkbox|radio)$/i;!function(){var a=l.createDocumentFragment(),b=a.appendChild(l.createElement("div")),c=l.createElement("input");c.setAttribute("type","radio"),c.setAttribute("checked","checked"),c.setAttribute("name","t"),b.appendChild(c),k.checkClone=b.cloneNode(!0).cloneNode(!0).lastChild.checked,b.innerHTML="<textarea>x</textarea>",k.noCloneChecked=!!b.cloneNode(!0).lastChild.defaultValue}();var U="undefined";k.focusinBubbles="onfocusin"in a;var V=/^key/,W=/^(?:mouse|pointer|contextmenu)|click/,X=/^(?:focusinfocus|focusoutblur)$/,Y=/^([^.]*)(?:\.(.+)|)$/;function Z(){return!0}function $(){return!1}function _(){try{return l.activeElement}catch(a){}}n.event={global:{},add:function(a,b,c,d,e){var f,g,h,i,j,k,l,m,o,p,q,r=L.get(a);if(r){c.handler&&(f=c,c=f.handler,e=f.selector),c.guid||(c.guid=n.guid++),(i=r.events)||(i=r.events={}),(g=r.handle)||(g=r.handle=function(b){return typeof n!==U&&n.event.triggered!==b.type?n.event.dispatch.apply(a,arguments):void 0}),b=(b||"").match(E)||[""],j=b.length;while(j--)h=Y.exec(b[j])||[],o=q=h[1],p=(h[2]||"").split(".").sort(),o&&(l=n.event.special[o]||{},o=(e?l.delegateType:l.bindType)||o,l=n.event.special[o]||{},k=n.extend({type:o,origType:q,data:d,handler:c,guid:c.guid,selector:e,needsContext:e&&n.expr.match.needsContext.test(e),namespace:p.join(".")},f),(m=i[o])||(m=i[o]=[],m.delegateCount=0,l.setup&&l.setup.call(a,d,p,g)!==!1||a.addEventListener&&a.addEventListener(o,g,!1)),l.add&&(l.add.call(a,k),k.handler.guid||(k.handler.guid=c.guid)),e?m.splice(m.delegateCount++,0,k):m.push(k),n.event.global[o]=!0)}},remove:function(a,b,c,d,e){var f,g,h,i,j,k,l,m,o,p,q,r=L.hasData(a)&&L.get(a);if(r&&(i=r.events)){b=(b||"").match(E)||[""],j=b.length;while(j--)if(h=Y.exec(b[j])||[],o=q=h[1],p=(h[2]||"").split(".").sort(),o){l=n.event.special[o]||{},o=(d?l.delegateType:l.bindType)||o,m=i[o]||[],h=h[2]&&new RegExp("(^|\\.)"+p.join("\\.(?:.*\\.|)")+"(\\.|$)"),g=f=m.length;while(f--)k=m[f],!e&&q!==k.origType||c&&c.guid!==k.guid||h&&!h.test(k.namespace)||d&&d!==k.selector&&("**"!==d||!k.selector)||(m.splice(f,1),k.selector&&m.delegateCount--,l.remove&&l.remove.call(a,k));g&&!m.length&&(l.teardown&&l.teardown.call(a,p,r.handle)!==!1||n.removeEvent(a,o,r.handle),delete i[o])}else for(o in i)n.event.remove(a,o+b[j],c,d,!0);n.isEmptyObject(i)&&(delete r.handle,L.remove(a,"events"))}},trigger:function(b,c,d,e){var f,g,h,i,k,m,o,p=[d||l],q=j.call(b,"type")?b.type:b,r=j.call(b,"namespace")?b.namespace.split("."):[];if(g=h=d=d||l,3!==d.nodeType&&8!==d.nodeType&&!X.test(q+n.event.triggered)&&(q.indexOf(".")>=0&&(r=q.split("."),q=r.shift(),r.sort()),k=q.indexOf(":")<0&&"on"+q,b=b[n.expando]?b:new n.Event(q,"object"==typeof b&&b),b.isTrigger=e?2:3,b.namespace=r.join("."),b.namespace_re=b.namespace?new RegExp("(^|\\.)"+r.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,b.result=void 0,b.target||(b.target=d),c=null==c?[b]:n.makeArray(c,[b]),o=n.event.special[q]||{},e||!o.trigger||o.trigger.apply(d,c)!==!1)){if(!e&&!o.noBubble&&!n.isWindow(d)){for(i=o.delegateType||q,X.test(i+q)||(g=g.parentNode);g;g=g.parentNode)p.push(g),h=g;h===(d.ownerDocument||l)&&p.push(h.defaultView||h.parentWindow||a)}f=0;while((g=p[f++])&&!b.isPropagationStopped())b.type=f>1?i:o.bindType||q,m=(L.get(g,"events")||{})[b.type]&&L.get(g,"handle"),m&&m.apply(g,c),m=k&&g[k],m&&m.apply&&n.acceptData(g)&&(b.result=m.apply(g,c),b.result===!1&&b.preventDefault());return b.type=q,e||b.isDefaultPrevented()||o._default&&o._default.apply(p.pop(),c)!==!1||!n.acceptData(d)||k&&n.isFunction(d[q])&&!n.isWindow(d)&&(h=d[k],h&&(d[k]=null),n.event.triggered=q,d[q](),n.event.triggered=void 0,h&&(d[k]=h)),b.result}},dispatch:function(a){a=n.event.fix(a);var b,c,e,f,g,h=[],i=d.call(arguments),j=(L.get(this,"events")||{})[a.type]||[],k=n.event.special[a.type]||{};if(i[0]=a,a.delegateTarget=this,!k.preDispatch||k.preDispatch.call(this,a)!==!1){h=n.event.handlers.call(this,a,j),b=0;while((f=h[b++])&&!a.isPropagationStopped()){a.currentTarget=f.elem,c=0;while((g=f.handlers[c++])&&!a.isImmediatePropagationStopped())(!a.namespace_re||a.namespace_re.test(g.namespace))&&(a.handleObj=g,a.data=g.data,e=((n.event.special[g.origType]||{}).handle||g.handler).apply(f.elem,i),void 0!==e&&(a.result=e)===!1&&(a.preventDefault(),a.stopPropagation()))}return k.postDispatch&&k.postDispatch.call(this,a),a.result}},handlers:function(a,b){var c,d,e,f,g=[],h=b.delegateCount,i=a.target;if(h&&i.nodeType&&(!a.button||"click"!==a.type))for(;i!==this;i=i.parentNode||this)if(i.disabled!==!0||"click"!==a.type){for(d=[],c=0;h>c;c++)f=b[c],e=f.selector+" ",void 0===d[e]&&(d[e]=f.needsContext?n(e,this).index(i)>=0:n.find(e,this,null,[i]).length),d[e]&&d.push(f);d.length&&g.push({elem:i,handlers:d})}return h<b.length&&g.push({elem:this,handlers:b.slice(h)}),g},props:"altKey bubbles cancelable ctrlKey currentTarget eventPhase metaKey relatedTarget shiftKey target timeStamp view which".split(" "),fixHooks:{},keyHooks:{props:"char charCode key keyCode".split(" "),filter:function(a,b){return null==a.which&&(a.which=null!=b.charCode?b.charCode:b.keyCode),a}},mouseHooks:{props:"button buttons clientX clientY offsetX offsetY pageX pageY screenX screenY toElement".split(" "),filter:function(a,b){var c,d,e,f=b.button;return null==a.pageX&&null!=b.clientX&&(c=a.target.ownerDocument||l,d=c.documentElement,e=c.body,a.pageX=b.clientX+(d&&d.scrollLeft||e&&e.scrollLeft||0)-(d&&d.clientLeft||e&&e.clientLeft||0),a.pageY=b.clientY+(d&&d.scrollTop||e&&e.scrollTop||0)-(d&&d.clientTop||e&&e.clientTop||0)),a.which||void 0===f||(a.which=1&f?1:2&f?3:4&f?2:0),a}},fix:function(a){if(a[n.expando])return a;var b,c,d,e=a.type,f=a,g=this.fixHooks[e];g||(this.fixHooks[e]=g=W.test(e)?this.mouseHooks:V.test(e)?this.keyHooks:{}),d=g.props?this.props.concat(g.props):this.props,a=new n.Event(f),b=d.length;while(b--)c=d[b],a[c]=f[c];return a.target||(a.target=l),3===a.target.nodeType&&(a.target=a.target.parentNode),g.filter?g.filter(a,f):a},special:{load:{noBubble:!0},focus:{trigger:function(){return this!==_()&&this.focus?(this.focus(),!1):void 0},delegateType:"focusin"},blur:{trigger:function(){return this===_()&&this.blur?(this.blur(),!1):void 0},delegateType:"focusout"},click:{trigger:function(){return"checkbox"===this.type&&this.click&&n.nodeName(this,"input")?(this.click(),!1):void 0},_default:function(a){return n.nodeName(a.target,"a")}},beforeunload:{postDispatch:function(a){void 0!==a.result&&a.originalEvent&&(a.originalEvent.returnValue=a.result)}}},simulate:function(a,b,c,d){var e=n.extend(new n.Event,c,{type:a,isSimulated:!0,originalEvent:{}});d?n.event.trigger(e,null,b):n.event.dispatch.call(b,e),e.isDefaultPrevented()&&c.preventDefault()}},n.removeEvent=function(a,b,c){a.removeEventListener&&a.removeEventListener(b,c,!1)},n.Event=function(a,b){return this instanceof n.Event?(a&&a.type?(this.originalEvent=a,this.type=a.type,this.isDefaultPrevented=a.defaultPrevented||void 0===a.defaultPrevented&&a.returnValue===!1?Z:$):this.type=a,b&&n.extend(this,b),this.timeStamp=a&&a.timeStamp||n.now(),void(this[n.expando]=!0)):new n.Event(a,b)},n.Event.prototype={isDefaultPrevented:$,isPropagationStopped:$,isImmediatePropagationStopped:$,preventDefault:function(){var a=this.originalEvent;this.isDefaultPrevented=Z,a&&a.preventDefault&&a.preventDefault()},stopPropagation:function(){var a=this.originalEvent;this.isPropagationStopped=Z,a&&a.stopPropagation&&a.stopPropagation()},stopImmediatePropagation:function(){var a=this.originalEvent;this.isImmediatePropagationStopped=Z,a&&a.stopImmediatePropagation&&a.stopImmediatePropagation(),this.stopPropagation()}},n.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},function(a,b){n.event.special[a]={delegateType:b,bindType:b,handle:function(a){var c,d=this,e=a.relatedTarget,f=a.handleObj;return(!e||e!==d&&!n.contains(d,e))&&(a.type=f.origType,c=f.handler.apply(this,arguments),a.type=b),c}}}),k.focusinBubbles||n.each({focus:"focusin",blur:"focusout"},function(a,b){var c=function(a){n.event.simulate(b,a.target,n.event.fix(a),!0)};n.event.special[b]={setup:function(){var d=this.ownerDocument||this,e=L.access(d,b);e||d.addEventListener(a,c,!0),L.access(d,b,(e||0)+1)},teardown:function(){var d=this.ownerDocument||this,e=L.access(d,b)-1;e?L.access(d,b,e):(d.removeEventListener(a,c,!0),L.remove(d,b))}}}),n.fn.extend({on:function(a,b,c,d,e){var f,g;if("object"==typeof a){"string"!=typeof b&&(c=c||b,b=void 0);for(g in a)this.on(g,b,c,a[g],e);return this}if(null==c&&null==d?(d=b,c=b=void 0):null==d&&("string"==typeof b?(d=c,c=void 0):(d=c,c=b,b=void 0)),d===!1)d=$;else if(!d)return this;return 1===e&&(f=d,d=function(a){return n().off(a),f.apply(this,arguments)},d.guid=f.guid||(f.guid=n.guid++)),this.each(function(){n.event.add(this,a,d,c,b)})},one:function(a,b,c,d){return this.on(a,b,c,d,1)},off:function(a,b,c){var d,e;if(a&&a.preventDefault&&a.handleObj)return d=a.handleObj,n(a.delegateTarget).off(d.namespace?d.origType+"."+d.namespace:d.origType,d.selector,d.handler),this;if("object"==typeof a){for(e in a)this.off(e,b,a[e]);return this}return(b===!1||"function"==typeof b)&&(c=b,b=void 0),c===!1&&(c=$),this.each(function(){n.event.remove(this,a,c,b)})},trigger:function(a,b){return this.each(function(){n.event.trigger(a,b,this)})},triggerHandler:function(a,b){var c=this[0];return c?n.event.trigger(a,b,c,!0):void 0}});var aa=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/gi,ba=/<([\w:]+)/,ca=/<|&#?\w+;/,da=/<(?:script|style|link)/i,ea=/checked\s*(?:[^=]|=\s*.checked.)/i,fa=/^$|\/(?:java|ecma)script/i,ga=/^true\/(.*)/,ha=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g,ia={option:[1,"<select multiple='multiple'>","</select>"],thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};ia.optgroup=ia.option,ia.tbody=ia.tfoot=ia.colgroup=ia.caption=ia.thead,ia.th=ia.td;function ja(a,b){return n.nodeName(a,"table")&&n.nodeName(11!==b.nodeType?b:b.firstChild,"tr")?a.getElementsByTagName("tbody")[0]||a.appendChild(a.ownerDocument.createElement("tbody")):a}function ka(a){return a.type=(null!==a.getAttribute("type"))+"/"+a.type,a}function la(a){var b=ga.exec(a.type);return b?a.type=b[1]:a.removeAttribute("type"),a}function ma(a,b){for(var c=0,d=a.length;d>c;c++)L.set(a[c],"globalEval",!b||L.get(b[c],"globalEval"))}function na(a,b){var c,d,e,f,g,h,i,j;if(1===b.nodeType){if(L.hasData(a)&&(f=L.access(a),g=L.set(b,f),j=f.events)){delete g.handle,g.events={};for(e in j)for(c=0,d=j[e].length;d>c;c++)n.event.add(b,e,j[e][c])}M.hasData(a)&&(h=M.access(a),i=n.extend({},h),M.set(b,i))}}function oa(a,b){var c=a.getElementsByTagName?a.getElementsByTagName(b||"*"):a.querySelectorAll?a.querySelectorAll(b||"*"):[];return void 0===b||b&&n.nodeName(a,b)?n.merge([a],c):c}function pa(a,b){var c=b.nodeName.toLowerCase();"input"===c&&T.test(a.type)?b.checked=a.checked:("input"===c||"textarea"===c)&&(b.defaultValue=a.defaultValue)}n.extend({clone:function(a,b,c){var d,e,f,g,h=a.cloneNode(!0),i=n.contains(a.ownerDocument,a);if(!(k.noCloneChecked||1!==a.nodeType&&11!==a.nodeType||n.isXMLDoc(a)))for(g=oa(h),f=oa(a),d=0,e=f.length;e>d;d++)pa(f[d],g[d]);if(b)if(c)for(f=f||oa(a),g=g||oa(h),d=0,e=f.length;e>d;d++)na(f[d],g[d]);else na(a,h);return g=oa(h,"script"),g.length>0&&ma(g,!i&&oa(a,"script")),h},buildFragment:function(a,b,c,d){for(var e,f,g,h,i,j,k=b.createDocumentFragment(),l=[],m=0,o=a.length;o>m;m++)if(e=a[m],e||0===e)if("object"===n.type(e))n.merge(l,e.nodeType?[e]:e);else if(ca.test(e)){f=f||k.appendChild(b.createElement("div")),g=(ba.exec(e)||["",""])[1].toLowerCase(),h=ia[g]||ia._default,f.innerHTML=h[1]+e.replace(aa,"<$1></$2>")+h[2],j=h[0];while(j--)f=f.lastChild;n.merge(l,f.childNodes),f=k.firstChild,f.textContent=""}else l.push(b.createTextNode(e));k.textContent="",m=0;while(e=l[m++])if((!d||-1===n.inArray(e,d))&&(i=n.contains(e.ownerDocument,e),f=oa(k.appendChild(e),"script"),i&&ma(f),c)){j=0;while(e=f[j++])fa.test(e.type||"")&&c.push(e)}return k},cleanData:function(a){for(var b,c,d,e,f=n.event.special,g=0;void 0!==(c=a[g]);g++){if(n.acceptData(c)&&(e=c[L.expando],e&&(b=L.cache[e]))){if(b.events)for(d in b.events)f[d]?n.event.remove(c,d):n.removeEvent(c,d,b.handle);L.cache[e]&&delete L.cache[e]}delete M.cache[c[M.expando]]}}}),n.fn.extend({text:function(a){return J(this,function(a){return void 0===a?n.text(this):this.empty().each(function(){(1===this.nodeType||11===this.nodeType||9===this.nodeType)&&(this.textContent=a)})},null,a,arguments.length)},append:function(){return this.domManip(arguments,function(a){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var b=ja(this,a);b.appendChild(a)}})},prepend:function(){return this.domManip(arguments,function(a){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var b=ja(this,a);b.insertBefore(a,b.firstChild)}})},before:function(){return this.domManip(arguments,function(a){this.parentNode&&this.parentNode.insertBefore(a,this)})},after:function(){return this.domManip(arguments,function(a){this.parentNode&&this.parentNode.insertBefore(a,this.nextSibling)})},remove:function(a,b){for(var c,d=a?n.filter(a,this):this,e=0;null!=(c=d[e]);e++)b||1!==c.nodeType||n.cleanData(oa(c)),c.parentNode&&(b&&n.contains(c.ownerDocument,c)&&ma(oa(c,"script")),c.parentNode.removeChild(c));return this},empty:function(){for(var a,b=0;null!=(a=this[b]);b++)1===a.nodeType&&(n.cleanData(oa(a,!1)),a.textContent="");return this},clone:function(a,b){return a=null==a?!1:a,b=null==b?a:b,this.map(function(){return n.clone(this,a,b)})},html:function(a){return J(this,function(a){var b=this[0]||{},c=0,d=this.length;if(void 0===a&&1===b.nodeType)return b.innerHTML;if("string"==typeof a&&!da.test(a)&&!ia[(ba.exec(a)||["",""])[1].toLowerCase()]){a=a.replace(aa,"<$1></$2>");try{for(;d>c;c++)b=this[c]||{},1===b.nodeType&&(n.cleanData(oa(b,!1)),b.innerHTML=a);b=0}catch(e){}}b&&this.empty().append(a)},null,a,arguments.length)},replaceWith:function(){var a=arguments[0];return this.domManip(arguments,function(b){a=this.parentNode,n.cleanData(oa(this)),a&&a.replaceChild(b,this)}),a&&(a.length||a.nodeType)?this:this.remove()},detach:function(a){return this.remove(a,!0)},domManip:function(a,b){a=e.apply([],a);var c,d,f,g,h,i,j=0,l=this.length,m=this,o=l-1,p=a[0],q=n.isFunction(p);if(q||l>1&&"string"==typeof p&&!k.checkClone&&ea.test(p))return this.each(function(c){var d=m.eq(c);q&&(a[0]=p.call(this,c,d.html())),d.domManip(a,b)});if(l&&(c=n.buildFragment(a,this[0].ownerDocument,!1,this),d=c.firstChild,1===c.childNodes.length&&(c=d),d)){for(f=n.map(oa(c,"script"),ka),g=f.length;l>j;j++)h=c,j!==o&&(h=n.clone(h,!0,!0),g&&n.merge(f,oa(h,"script"))),b.call(this[j],h,j);if(g)for(i=f[f.length-1].ownerDocument,n.map(f,la),j=0;g>j;j++)h=f[j],fa.test(h.type||"")&&!L.access(h,"globalEval")&&n.contains(i,h)&&(h.src?n._evalUrl&&n._evalUrl(h.src):n.globalEval(h.textContent.replace(ha,"")))}return this}}),n.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(a,b){n.fn[a]=function(a){for(var c,d=[],e=n(a),g=e.length-1,h=0;g>=h;h++)c=h===g?this:this.clone(!0),n(e[h])[b](c),f.apply(d,c.get());return this.pushStack(d)}});var qa,ra={};function sa(b,c){var d,e=n(c.createElement(b)).appendTo(c.body),f=a.getDefaultComputedStyle&&(d=a.getDefaultComputedStyle(e[0]))?d.display:n.css(e[0],"display");return e.detach(),f}function ta(a){var b=l,c=ra[a];return c||(c=sa(a,b),"none"!==c&&c||(qa=(qa||n("<iframe frameborder='0' width='0' height='0'/>")).appendTo(b.documentElement),b=qa[0].contentDocument,b.write(),b.close(),c=sa(a,b),qa.detach()),ra[a]=c),c}var ua=/^margin/,va=new RegExp("^("+Q+")(?!px)[a-z%]+$","i"),wa=function(b){return b.ownerDocument.defaultView.opener?b.ownerDocument.defaultView.getComputedStyle(b,null):a.getComputedStyle(b,null)};function xa(a,b,c){var d,e,f,g,h=a.style;return c=c||wa(a),c&&(g=c.getPropertyValue(b)||c[b]),c&&(""!==g||n.contains(a.ownerDocument,a)||(g=n.style(a,b)),va.test(g)&&ua.test(b)&&(d=h.width,e=h.minWidth,f=h.maxWidth,h.minWidth=h.maxWidth=h.width=g,g=c.width,h.width=d,h.minWidth=e,h.maxWidth=f)),void 0!==g?g+"":g}function ya(a,b){return{get:function(){return a()?void delete this.get:(this.get=b).apply(this,arguments)}}}!function(){var b,c,d=l.documentElement,e=l.createElement("div"),f=l.createElement("div");if(f.style){f.style.backgroundClip="content-box",f.cloneNode(!0).style.backgroundClip="",k.clearCloneStyle="content-box"===f.style.backgroundClip,e.style.cssText="border:0;width:0;height:0;top:0;left:-9999px;margin-top:1px;position:absolute",e.appendChild(f);function g(){f.style.cssText="-webkit-box-sizing:border-box;-moz-box-sizing:border-box;box-sizing:border-box;display:block;margin-top:1%;top:1%;border:1px;padding:1px;width:4px;position:absolute",f.innerHTML="",d.appendChild(e);var g=a.getComputedStyle(f,null);b="1%"!==g.top,c="4px"===g.width,d.removeChild(e)}a.getComputedStyle&&n.extend(k,{pixelPosition:function(){return g(),b},boxSizingReliable:function(){return null==c&&g(),c},reliableMarginRight:function(){var b,c=f.appendChild(l.createElement("div"));return c.style.cssText=f.style.cssText="-webkit-box-sizing:content-box;-moz-box-sizing:content-box;box-sizing:content-box;display:block;margin:0;border:0;padding:0",c.style.marginRight=c.style.width="0",f.style.width="1px",d.appendChild(e),b=!parseFloat(a.getComputedStyle(c,null).marginRight),d.removeChild(e),f.removeChild(c),b}})}}(),n.swap=function(a,b,c,d){var e,f,g={};for(f in b)g[f]=a.style[f],a.style[f]=b[f];e=c.apply(a,d||[]);for(f in b)a.style[f]=g[f];return e};var za=/^(none|table(?!-c[ea]).+)/,Aa=new RegExp("^("+Q+")(.*)$","i"),Ba=new RegExp("^([+-])=("+Q+")","i"),Ca={position:"absolute",visibility:"hidden",display:"block"},Da={letterSpacing:"0",fontWeight:"400"},Ea=["Webkit","O","Moz","ms"];function Fa(a,b){if(b in a)return b;var c=b[0].toUpperCase()+b.slice(1),d=b,e=Ea.length;while(e--)if(b=Ea[e]+c,b in a)return b;return d}function Ga(a,b,c){var d=Aa.exec(b);return d?Math.max(0,d[1]-(c||0))+(d[2]||"px"):b}function Ha(a,b,c,d,e){for(var f=c===(d?"border":"content")?4:"width"===b?1:0,g=0;4>f;f+=2)"margin"===c&&(g+=n.css(a,c+R[f],!0,e)),d?("content"===c&&(g-=n.css(a,"padding"+R[f],!0,e)),"margin"!==c&&(g-=n.css(a,"border"+R[f]+"Width",!0,e))):(g+=n.css(a,"padding"+R[f],!0,e),"padding"!==c&&(g+=n.css(a,"border"+R[f]+"Width",!0,e)));return g}function Ia(a,b,c){var d=!0,e="width"===b?a.offsetWidth:a.offsetHeight,f=wa(a),g="border-box"===n.css(a,"boxSizing",!1,f);if(0>=e||null==e){if(e=xa(a,b,f),(0>e||null==e)&&(e=a.style[b]),va.test(e))return e;d=g&&(k.boxSizingReliable()||e===a.style[b]),e=parseFloat(e)||0}return e+Ha(a,b,c||(g?"border":"content"),d,f)+"px"}function Ja(a,b){for(var c,d,e,f=[],g=0,h=a.length;h>g;g++)d=a[g],d.style&&(f[g]=L.get(d,"olddisplay"),c=d.style.display,b?(f[g]||"none"!==c||(d.style.display=""),""===d.style.display&&S(d)&&(f[g]=L.access(d,"olddisplay",ta(d.nodeName)))):(e=S(d),"none"===c&&e||L.set(d,"olddisplay",e?c:n.css(d,"display"))));for(g=0;h>g;g++)d=a[g],d.style&&(b&&"none"!==d.style.display&&""!==d.style.display||(d.style.display=b?f[g]||"":"none"));return a}n.extend({cssHooks:{opacity:{get:function(a,b){if(b){var c=xa(a,"opacity");return""===c?"1":c}}}},cssNumber:{columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{"float":"cssFloat"},style:function(a,b,c,d){if(a&&3!==a.nodeType&&8!==a.nodeType&&a.style){var e,f,g,h=n.camelCase(b),i=a.style;return b=n.cssProps[h]||(n.cssProps[h]=Fa(i,h)),g=n.cssHooks[b]||n.cssHooks[h],void 0===c?g&&"get"in g&&void 0!==(e=g.get(a,!1,d))?e:i[b]:(f=typeof c,"string"===f&&(e=Ba.exec(c))&&(c=(e[1]+1)*e[2]+parseFloat(n.css(a,b)),f="number"),null!=c&&c===c&&("number"!==f||n.cssNumber[h]||(c+="px"),k.clearCloneStyle||""!==c||0!==b.indexOf("background")||(i[b]="inherit"),g&&"set"in g&&void 0===(c=g.set(a,c,d))||(i[b]=c)),void 0)}},css:function(a,b,c,d){var e,f,g,h=n.camelCase(b);return b=n.cssProps[h]||(n.cssProps[h]=Fa(a.style,h)),g=n.cssHooks[b]||n.cssHooks[h],g&&"get"in g&&(e=g.get(a,!0,c)),void 0===e&&(e=xa(a,b,d)),"normal"===e&&b in Da&&(e=Da[b]),""===c||c?(f=parseFloat(e),c===!0||n.isNumeric(f)?f||0:e):e}}),n.each(["height","width"],function(a,b){n.cssHooks[b]={get:function(a,c,d){return c?za.test(n.css(a,"display"))&&0===a.offsetWidth?n.swap(a,Ca,function(){return Ia(a,b,d)}):Ia(a,b,d):void 0},set:function(a,c,d){var e=d&&wa(a);return Ga(a,c,d?Ha(a,b,d,"border-box"===n.css(a,"boxSizing",!1,e),e):0)}}}),n.cssHooks.marginRight=ya(k.reliableMarginRight,function(a,b){return b?n.swap(a,{display:"inline-block"},xa,[a,"marginRight"]):void 0}),n.each({margin:"",padding:"",border:"Width"},function(a,b){n.cssHooks[a+b]={expand:function(c){for(var d=0,e={},f="string"==typeof c?c.split(" "):[c];4>d;d++)e[a+R[d]+b]=f[d]||f[d-2]||f[0];return e}},ua.test(a)||(n.cssHooks[a+b].set=Ga)}),n.fn.extend({css:function(a,b){return J(this,function(a,b,c){var d,e,f={},g=0;if(n.isArray(b)){for(d=wa(a),e=b.length;e>g;g++)f[b[g]]=n.css(a,b[g],!1,d);return f}return void 0!==c?n.style(a,b,c):n.css(a,b)},a,b,arguments.length>1)},show:function(){return Ja(this,!0)},hide:function(){return Ja(this)},toggle:function(a){return"boolean"==typeof a?a?this.show():this.hide():this.each(function(){S(this)?n(this).show():n(this).hide()})}});function Ka(a,b,c,d,e){return new Ka.prototype.init(a,b,c,d,e)}n.Tween=Ka,Ka.prototype={constructor:Ka,init:function(a,b,c,d,e,f){this.elem=a,this.prop=c,this.easing=e||"swing",this.options=b,this.start=this.now=this.cur(),this.end=d,this.unit=f||(n.cssNumber[c]?"":"px")},cur:function(){var a=Ka.propHooks[this.prop];return a&&a.get?a.get(this):Ka.propHooks._default.get(this)},run:function(a){var b,c=Ka.propHooks[this.prop];return this.options.duration?this.pos=b=n.easing[this.easing](a,this.options.duration*a,0,1,this.options.duration):this.pos=b=a,this.now=(this.end-this.start)*b+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),c&&c.set?c.set(this):Ka.propHooks._default.set(this),this}},Ka.prototype.init.prototype=Ka.prototype,Ka.propHooks={_default:{get:function(a){var b;return null==a.elem[a.prop]||a.elem.style&&null!=a.elem.style[a.prop]?(b=n.css(a.elem,a.prop,""),b&&"auto"!==b?b:0):a.elem[a.prop]},set:function(a){n.fx.step[a.prop]?n.fx.step[a.prop](a):a.elem.style&&(null!=a.elem.style[n.cssProps[a.prop]]||n.cssHooks[a.prop])?n.style(a.elem,a.prop,a.now+a.unit):a.elem[a.prop]=a.now}}},Ka.propHooks.scrollTop=Ka.propHooks.scrollLeft={set:function(a){a.elem.nodeType&&a.elem.parentNode&&(a.elem[a.prop]=a.now)}},n.easing={linear:function(a){return a},swing:function(a){return.5-Math.cos(a*Math.PI)/2}},n.fx=Ka.prototype.init,n.fx.step={};var La,Ma,Na=/^(?:toggle|show|hide)$/,Oa=new RegExp("^(?:([+-])=|)("+Q+")([a-z%]*)$","i"),Pa=/queueHooks$/,Qa=[Va],Ra={"*":[function(a,b){var c=this.createTween(a,b),d=c.cur(),e=Oa.exec(b),f=e&&e[3]||(n.cssNumber[a]?"":"px"),g=(n.cssNumber[a]||"px"!==f&&+d)&&Oa.exec(n.css(c.elem,a)),h=1,i=20;if(g&&g[3]!==f){f=f||g[3],e=e||[],g=+d||1;do h=h||".5",g/=h,n.style(c.elem,a,g+f);while(h!==(h=c.cur()/d)&&1!==h&&--i)}return e&&(g=c.start=+g||+d||0,c.unit=f,c.end=e[1]?g+(e[1]+1)*e[2]:+e[2]),c}]};function Sa(){return setTimeout(function(){La=void 0}),La=n.now()}function Ta(a,b){var c,d=0,e={height:a};for(b=b?1:0;4>d;d+=2-b)c=R[d],e["margin"+c]=e["padding"+c]=a;return b&&(e.opacity=e.width=a),e}function Ua(a,b,c){for(var d,e=(Ra[b]||[]).concat(Ra["*"]),f=0,g=e.length;g>f;f++)if(d=e[f].call(c,b,a))return d}function Va(a,b,c){var d,e,f,g,h,i,j,k,l=this,m={},o=a.style,p=a.nodeType&&S(a),q=L.get(a,"fxshow");c.queue||(h=n._queueHooks(a,"fx"),null==h.unqueued&&(h.unqueued=0,i=h.empty.fire,h.empty.fire=function(){h.unqueued||i()}),h.unqueued++,l.always(function(){l.always(function(){h.unqueued--,n.queue(a,"fx").length||h.empty.fire()})})),1===a.nodeType&&("height"in b||"width"in b)&&(c.overflow=[o.overflow,o.overflowX,o.overflowY],j=n.css(a,"display"),k="none"===j?L.get(a,"olddisplay")||ta(a.nodeName):j,"inline"===k&&"none"===n.css(a,"float")&&(o.display="inline-block")),c.overflow&&(o.overflow="hidden",l.always(function(){o.overflow=c.overflow[0],o.overflowX=c.overflow[1],o.overflowY=c.overflow[2]}));for(d in b)if(e=b[d],Na.exec(e)){if(delete b[d],f=f||"toggle"===e,e===(p?"hide":"show")){if("show"!==e||!q||void 0===q[d])continue;p=!0}m[d]=q&&q[d]||n.style(a,d)}else j=void 0;if(n.isEmptyObject(m))"inline"===("none"===j?ta(a.nodeName):j)&&(o.display=j);else{q?"hidden"in q&&(p=q.hidden):q=L.access(a,"fxshow",{}),f&&(q.hidden=!p),p?n(a).show():l.done(function(){n(a).hide()}),l.done(function(){var b;L.remove(a,"fxshow");for(b in m)n.style(a,b,m[b])});for(d in m)g=Ua(p?q[d]:0,d,l),d in q||(q[d]=g.start,p&&(g.end=g.start,g.start="width"===d||"height"===d?1:0))}}function Wa(a,b){var c,d,e,f,g;for(c in a)if(d=n.camelCase(c),e=b[d],f=a[c],n.isArray(f)&&(e=f[1],f=a[c]=f[0]),c!==d&&(a[d]=f,delete a[c]),g=n.cssHooks[d],g&&"expand"in g){f=g.expand(f),delete a[d];for(c in f)c in a||(a[c]=f[c],b[c]=e)}else b[d]=e}function Xa(a,b,c){var d,e,f=0,g=Qa.length,h=n.Deferred().always(function(){delete i.elem}),i=function(){if(e)return!1;for(var b=La||Sa(),c=Math.max(0,j.startTime+j.duration-b),d=c/j.duration||0,f=1-d,g=0,i=j.tweens.length;i>g;g++)j.tweens[g].run(f);return h.notifyWith(a,[j,f,c]),1>f&&i?c:(h.resolveWith(a,[j]),!1)},j=h.promise({elem:a,props:n.extend({},b),opts:n.extend(!0,{specialEasing:{}},c),originalProperties:b,originalOptions:c,startTime:La||Sa(),duration:c.duration,tweens:[],createTween:function(b,c){var d=n.Tween(a,j.opts,b,c,j.opts.specialEasing[b]||j.opts.easing);return j.tweens.push(d),d},stop:function(b){var c=0,d=b?j.tweens.length:0;if(e)return this;for(e=!0;d>c;c++)j.tweens[c].run(1);return b?h.resolveWith(a,[j,b]):h.rejectWith(a,[j,b]),this}}),k=j.props;for(Wa(k,j.opts.specialEasing);g>f;f++)if(d=Qa[f].call(j,a,k,j.opts))return d;return n.map(k,Ua,j),n.isFunction(j.opts.start)&&j.opts.start.call(a,j),n.fx.timer(n.extend(i,{elem:a,anim:j,queue:j.opts.queue})),j.progress(j.opts.progress).done(j.opts.done,j.opts.complete).fail(j.opts.fail).always(j.opts.always)}n.Animation=n.extend(Xa,{tweener:function(a,b){n.isFunction(a)?(b=a,a=["*"]):a=a.split(" ");for(var c,d=0,e=a.length;e>d;d++)c=a[d],Ra[c]=Ra[c]||[],Ra[c].unshift(b)},prefilter:function(a,b){b?Qa.unshift(a):Qa.push(a)}}),n.speed=function(a,b,c){var d=a&&"object"==typeof a?n.extend({},a):{complete:c||!c&&b||n.isFunction(a)&&a,duration:a,easing:c&&b||b&&!n.isFunction(b)&&b};return d.duration=n.fx.off?0:"number"==typeof d.duration?d.duration:d.duration in n.fx.speeds?n.fx.speeds[d.duration]:n.fx.speeds._default,(null==d.queue||d.queue===!0)&&(d.queue="fx"),d.old=d.complete,d.complete=function(){n.isFunction(d.old)&&d.old.call(this),d.queue&&n.dequeue(this,d.queue)},d},n.fn.extend({fadeTo:function(a,b,c,d){return this.filter(S).css("opacity",0).show().end().animate({opacity:b},a,c,d)},animate:function(a,b,c,d){var e=n.isEmptyObject(a),f=n.speed(b,c,d),g=function(){var b=Xa(this,n.extend({},a),f);(e||L.get(this,"finish"))&&b.stop(!0)};return g.finish=g,e||f.queue===!1?this.each(g):this.queue(f.queue,g)},stop:function(a,b,c){var d=function(a){var b=a.stop;delete a.stop,b(c)};return"string"!=typeof a&&(c=b,b=a,a=void 0),b&&a!==!1&&this.queue(a||"fx",[]),this.each(function(){var b=!0,e=null!=a&&a+"queueHooks",f=n.timers,g=L.get(this);if(e)g[e]&&g[e].stop&&d(g[e]);else for(e in g)g[e]&&g[e].stop&&Pa.test(e)&&d(g[e]);for(e=f.length;e--;)f[e].elem!==this||null!=a&&f[e].queue!==a||(f[e].anim.stop(c),b=!1,f.splice(e,1));(b||!c)&&n.dequeue(this,a)})},finish:function(a){return a!==!1&&(a=a||"fx"),this.each(function(){var b,c=L.get(this),d=c[a+"queue"],e=c[a+"queueHooks"],f=n.timers,g=d?d.length:0;for(c.finish=!0,n.queue(this,a,[]),e&&e.stop&&e.stop.call(this,!0),b=f.length;b--;)f[b].elem===this&&f[b].queue===a&&(f[b].anim.stop(!0),f.splice(b,1));for(b=0;g>b;b++)d[b]&&d[b].finish&&d[b].finish.call(this);delete c.finish})}}),n.each(["toggle","show","hide"],function(a,b){var c=n.fn[b];n.fn[b]=function(a,d,e){return null==a||"boolean"==typeof a?c.apply(this,arguments):this.animate(Ta(b,!0),a,d,e)}}),n.each({slideDown:Ta("show"),slideUp:Ta("hide"),slideToggle:Ta("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(a,b){n.fn[a]=function(a,c,d){return this.animate(b,a,c,d)}}),n.timers=[],n.fx.tick=function(){var a,b=0,c=n.timers;for(La=n.now();b<c.length;b++)a=c[b],a()||c[b]!==a||c.splice(b--,1);c.length||n.fx.stop(),La=void 0},n.fx.timer=function(a){n.timers.push(a),a()?n.fx.start():n.timers.pop()},n.fx.interval=13,n.fx.start=function(){Ma||(Ma=setInterval(n.fx.tick,n.fx.interval))},n.fx.stop=function(){clearInterval(Ma),Ma=null},n.fx.speeds={slow:600,fast:200,_default:400},n.fn.delay=function(a,b){return a=n.fx?n.fx.speeds[a]||a:a,b=b||"fx",this.queue(b,function(b,c){var d=setTimeout(b,a);c.stop=function(){clearTimeout(d)}})},function(){var a=l.createElement("input"),b=l.createElement("select"),c=b.appendChild(l.createElement("option"));a.type="checkbox",k.checkOn=""!==a.value,k.optSelected=c.selected,b.disabled=!0,k.optDisabled=!c.disabled,a=l.createElement("input"),a.value="t",a.type="radio",k.radioValue="t"===a.value}();var Ya,Za,$a=n.expr.attrHandle;n.fn.extend({attr:function(a,b){return J(this,n.attr,a,b,arguments.length>1)},removeAttr:function(a){return this.each(function(){n.removeAttr(this,a)})}}),n.extend({attr:function(a,b,c){var d,e,f=a.nodeType;if(a&&3!==f&&8!==f&&2!==f)return typeof a.getAttribute===U?n.prop(a,b,c):(1===f&&n.isXMLDoc(a)||(b=b.toLowerCase(),d=n.attrHooks[b]||(n.expr.match.bool.test(b)?Za:Ya)),
void 0===c?d&&"get"in d&&null!==(e=d.get(a,b))?e:(e=n.find.attr(a,b),null==e?void 0:e):null!==c?d&&"set"in d&&void 0!==(e=d.set(a,c,b))?e:(a.setAttribute(b,c+""),c):void n.removeAttr(a,b))},removeAttr:function(a,b){var c,d,e=0,f=b&&b.match(E);if(f&&1===a.nodeType)while(c=f[e++])d=n.propFix[c]||c,n.expr.match.bool.test(c)&&(a[d]=!1),a.removeAttribute(c)},attrHooks:{type:{set:function(a,b){if(!k.radioValue&&"radio"===b&&n.nodeName(a,"input")){var c=a.value;return a.setAttribute("type",b),c&&(a.value=c),b}}}}}),Za={set:function(a,b,c){return b===!1?n.removeAttr(a,c):a.setAttribute(c,c),c}},n.each(n.expr.match.bool.source.match(/\w+/g),function(a,b){var c=$a[b]||n.find.attr;$a[b]=function(a,b,d){var e,f;return d||(f=$a[b],$a[b]=e,e=null!=c(a,b,d)?b.toLowerCase():null,$a[b]=f),e}});var _a=/^(?:input|select|textarea|button)$/i;n.fn.extend({prop:function(a,b){return J(this,n.prop,a,b,arguments.length>1)},removeProp:function(a){return this.each(function(){delete this[n.propFix[a]||a]})}}),n.extend({propFix:{"for":"htmlFor","class":"className"},prop:function(a,b,c){var d,e,f,g=a.nodeType;if(a&&3!==g&&8!==g&&2!==g)return f=1!==g||!n.isXMLDoc(a),f&&(b=n.propFix[b]||b,e=n.propHooks[b]),void 0!==c?e&&"set"in e&&void 0!==(d=e.set(a,c,b))?d:a[b]=c:e&&"get"in e&&null!==(d=e.get(a,b))?d:a[b]},propHooks:{tabIndex:{get:function(a){return a.hasAttribute("tabindex")||_a.test(a.nodeName)||a.href?a.tabIndex:-1}}}}),k.optSelected||(n.propHooks.selected={get:function(a){var b=a.parentNode;return b&&b.parentNode&&b.parentNode.selectedIndex,null}}),n.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],function(){n.propFix[this.toLowerCase()]=this});var ab=/[\t\r\n\f]/g;n.fn.extend({addClass:function(a){var b,c,d,e,f,g,h="string"==typeof a&&a,i=0,j=this.length;if(n.isFunction(a))return this.each(function(b){n(this).addClass(a.call(this,b,this.className))});if(h)for(b=(a||"").match(E)||[];j>i;i++)if(c=this[i],d=1===c.nodeType&&(c.className?(" "+c.className+" ").replace(ab," "):" ")){f=0;while(e=b[f++])d.indexOf(" "+e+" ")<0&&(d+=e+" ");g=n.trim(d),c.className!==g&&(c.className=g)}return this},removeClass:function(a){var b,c,d,e,f,g,h=0===arguments.length||"string"==typeof a&&a,i=0,j=this.length;if(n.isFunction(a))return this.each(function(b){n(this).removeClass(a.call(this,b,this.className))});if(h)for(b=(a||"").match(E)||[];j>i;i++)if(c=this[i],d=1===c.nodeType&&(c.className?(" "+c.className+" ").replace(ab," "):"")){f=0;while(e=b[f++])while(d.indexOf(" "+e+" ")>=0)d=d.replace(" "+e+" "," ");g=a?n.trim(d):"",c.className!==g&&(c.className=g)}return this},toggleClass:function(a,b){var c=typeof a;return"boolean"==typeof b&&"string"===c?b?this.addClass(a):this.removeClass(a):this.each(n.isFunction(a)?function(c){n(this).toggleClass(a.call(this,c,this.className,b),b)}:function(){if("string"===c){var b,d=0,e=n(this),f=a.match(E)||[];while(b=f[d++])e.hasClass(b)?e.removeClass(b):e.addClass(b)}else(c===U||"boolean"===c)&&(this.className&&L.set(this,"__className__",this.className),this.className=this.className||a===!1?"":L.get(this,"__className__")||"")})},hasClass:function(a){for(var b=" "+a+" ",c=0,d=this.length;d>c;c++)if(1===this[c].nodeType&&(" "+this[c].className+" ").replace(ab," ").indexOf(b)>=0)return!0;return!1}});var bb=/\r/g;n.fn.extend({val:function(a){var b,c,d,e=this[0];{if(arguments.length)return d=n.isFunction(a),this.each(function(c){var e;1===this.nodeType&&(e=d?a.call(this,c,n(this).val()):a,null==e?e="":"number"==typeof e?e+="":n.isArray(e)&&(e=n.map(e,function(a){return null==a?"":a+""})),b=n.valHooks[this.type]||n.valHooks[this.nodeName.toLowerCase()],b&&"set"in b&&void 0!==b.set(this,e,"value")||(this.value=e))});if(e)return b=n.valHooks[e.type]||n.valHooks[e.nodeName.toLowerCase()],b&&"get"in b&&void 0!==(c=b.get(e,"value"))?c:(c=e.value,"string"==typeof c?c.replace(bb,""):null==c?"":c)}}}),n.extend({valHooks:{option:{get:function(a){var b=n.find.attr(a,"value");return null!=b?b:n.trim(n.text(a))}},select:{get:function(a){for(var b,c,d=a.options,e=a.selectedIndex,f="select-one"===a.type||0>e,g=f?null:[],h=f?e+1:d.length,i=0>e?h:f?e:0;h>i;i++)if(c=d[i],!(!c.selected&&i!==e||(k.optDisabled?c.disabled:null!==c.getAttribute("disabled"))||c.parentNode.disabled&&n.nodeName(c.parentNode,"optgroup"))){if(b=n(c).val(),f)return b;g.push(b)}return g},set:function(a,b){var c,d,e=a.options,f=n.makeArray(b),g=e.length;while(g--)d=e[g],(d.selected=n.inArray(d.value,f)>=0)&&(c=!0);return c||(a.selectedIndex=-1),f}}}}),n.each(["radio","checkbox"],function(){n.valHooks[this]={set:function(a,b){return n.isArray(b)?a.checked=n.inArray(n(a).val(),b)>=0:void 0}},k.checkOn||(n.valHooks[this].get=function(a){return null===a.getAttribute("value")?"on":a.value})}),n.each("blur focus focusin focusout load resize scroll unload click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup error contextmenu".split(" "),function(a,b){n.fn[b]=function(a,c){return arguments.length>0?this.on(b,null,a,c):this.trigger(b)}}),n.fn.extend({hover:function(a,b){return this.mouseenter(a).mouseleave(b||a)},bind:function(a,b,c){return this.on(a,null,b,c)},unbind:function(a,b){return this.off(a,null,b)},delegate:function(a,b,c,d){return this.on(b,a,c,d)},undelegate:function(a,b,c){return 1===arguments.length?this.off(a,"**"):this.off(b,a||"**",c)}});var cb=n.now(),db=/\?/;n.parseJSON=function(a){return JSON.parse(a+"")},n.parseXML=function(a){var b,c;if(!a||"string"!=typeof a)return null;try{c=new DOMParser,b=c.parseFromString(a,"text/xml")}catch(d){b=void 0}return(!b||b.getElementsByTagName("parsererror").length)&&n.error("Invalid XML: "+a),b};var eb=/#.*$/,fb=/([?&])_=[^&]*/,gb=/^(.*?):[ \t]*([^\r\n]*)$/gm,hb=/^(?:about|app|app-storage|.+-extension|file|res|widget):$/,ib=/^(?:GET|HEAD)$/,jb=/^\/\//,kb=/^([\w.+-]+:)(?:\/\/(?:[^\/?#]*@|)([^\/?#:]*)(?::(\d+)|)|)/,lb={},mb={},nb="*/".concat("*"),ob=a.location.href,pb=kb.exec(ob.toLowerCase())||[];function qb(a){return function(b,c){"string"!=typeof b&&(c=b,b="*");var d,e=0,f=b.toLowerCase().match(E)||[];if(n.isFunction(c))while(d=f[e++])"+"===d[0]?(d=d.slice(1)||"*",(a[d]=a[d]||[]).unshift(c)):(a[d]=a[d]||[]).push(c)}}function rb(a,b,c,d){var e={},f=a===mb;function g(h){var i;return e[h]=!0,n.each(a[h]||[],function(a,h){var j=h(b,c,d);return"string"!=typeof j||f||e[j]?f?!(i=j):void 0:(b.dataTypes.unshift(j),g(j),!1)}),i}return g(b.dataTypes[0])||!e["*"]&&g("*")}function sb(a,b){var c,d,e=n.ajaxSettings.flatOptions||{};for(c in b)void 0!==b[c]&&((e[c]?a:d||(d={}))[c]=b[c]);return d&&n.extend(!0,a,d),a}function tb(a,b,c){var d,e,f,g,h=a.contents,i=a.dataTypes;while("*"===i[0])i.shift(),void 0===d&&(d=a.mimeType||b.getResponseHeader("Content-Type"));if(d)for(e in h)if(h[e]&&h[e].test(d)){i.unshift(e);break}if(i[0]in c)f=i[0];else{for(e in c){if(!i[0]||a.converters[e+" "+i[0]]){f=e;break}g||(g=e)}f=f||g}return f?(f!==i[0]&&i.unshift(f),c[f]):void 0}function ub(a,b,c,d){var e,f,g,h,i,j={},k=a.dataTypes.slice();if(k[1])for(g in a.converters)j[g.toLowerCase()]=a.converters[g];f=k.shift();while(f)if(a.responseFields[f]&&(c[a.responseFields[f]]=b),!i&&d&&a.dataFilter&&(b=a.dataFilter(b,a.dataType)),i=f,f=k.shift())if("*"===f)f=i;else if("*"!==i&&i!==f){if(g=j[i+" "+f]||j["* "+f],!g)for(e in j)if(h=e.split(" "),h[1]===f&&(g=j[i+" "+h[0]]||j["* "+h[0]])){g===!0?g=j[e]:j[e]!==!0&&(f=h[0],k.unshift(h[1]));break}if(g!==!0)if(g&&a["throws"])b=g(b);else try{b=g(b)}catch(l){return{state:"parsererror",error:g?l:"No conversion from "+i+" to "+f}}}return{state:"success",data:b}}n.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:ob,type:"GET",isLocal:hb.test(pb[1]),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":nb,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/xml/,html:/html/,json:/json/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":n.parseJSON,"text xml":n.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(a,b){return b?sb(sb(a,n.ajaxSettings),b):sb(n.ajaxSettings,a)},ajaxPrefilter:qb(lb),ajaxTransport:qb(mb),ajax:function(a,b){"object"==typeof a&&(b=a,a=void 0),b=b||{};var c,d,e,f,g,h,i,j,k=n.ajaxSetup({},b),l=k.context||k,m=k.context&&(l.nodeType||l.jquery)?n(l):n.event,o=n.Deferred(),p=n.Callbacks("once memory"),q=k.statusCode||{},r={},s={},t=0,u="canceled",v={readyState:0,getResponseHeader:function(a){var b;if(2===t){if(!f){f={};while(b=gb.exec(e))f[b[1].toLowerCase()]=b[2]}b=f[a.toLowerCase()]}return null==b?null:b},getAllResponseHeaders:function(){return 2===t?e:null},setRequestHeader:function(a,b){var c=a.toLowerCase();return t||(a=s[c]=s[c]||a,r[a]=b),this},overrideMimeType:function(a){return t||(k.mimeType=a),this},statusCode:function(a){var b;if(a)if(2>t)for(b in a)q[b]=[q[b],a[b]];else v.always(a[v.status]);return this},abort:function(a){var b=a||u;return c&&c.abort(b),x(0,b),this}};if(o.promise(v).complete=p.add,v.success=v.done,v.error=v.fail,k.url=((a||k.url||ob)+"").replace(eb,"").replace(jb,pb[1]+"//"),k.type=b.method||b.type||k.method||k.type,k.dataTypes=n.trim(k.dataType||"*").toLowerCase().match(E)||[""],null==k.crossDomain&&(h=kb.exec(k.url.toLowerCase()),k.crossDomain=!(!h||h[1]===pb[1]&&h[2]===pb[2]&&(h[3]||("http:"===h[1]?"80":"443"))===(pb[3]||("http:"===pb[1]?"80":"443")))),k.data&&k.processData&&"string"!=typeof k.data&&(k.data=n.param(k.data,k.traditional)),rb(lb,k,b,v),2===t)return v;i=n.event&&k.global,i&&0===n.active++&&n.event.trigger("ajaxStart"),k.type=k.type.toUpperCase(),k.hasContent=!ib.test(k.type),d=k.url,k.hasContent||(k.data&&(d=k.url+=(db.test(d)?"&":"?")+k.data,delete k.data),k.cache===!1&&(k.url=fb.test(d)?d.replace(fb,"$1_="+cb++):d+(db.test(d)?"&":"?")+"_="+cb++)),k.ifModified&&(n.lastModified[d]&&v.setRequestHeader("If-Modified-Since",n.lastModified[d]),n.etag[d]&&v.setRequestHeader("If-None-Match",n.etag[d])),(k.data&&k.hasContent&&k.contentType!==!1||b.contentType)&&v.setRequestHeader("Content-Type",k.contentType),v.setRequestHeader("Accept",k.dataTypes[0]&&k.accepts[k.dataTypes[0]]?k.accepts[k.dataTypes[0]]+("*"!==k.dataTypes[0]?", "+nb+"; q=0.01":""):k.accepts["*"]);for(j in k.headers)v.setRequestHeader(j,k.headers[j]);if(k.beforeSend&&(k.beforeSend.call(l,v,k)===!1||2===t))return v.abort();u="abort";for(j in{success:1,error:1,complete:1})v[j](k[j]);if(c=rb(mb,k,b,v)){v.readyState=1,i&&m.trigger("ajaxSend",[v,k]),k.async&&k.timeout>0&&(g=setTimeout(function(){v.abort("timeout")},k.timeout));try{t=1,c.send(r,x)}catch(w){if(!(2>t))throw w;x(-1,w)}}else x(-1,"No Transport");function x(a,b,f,h){var j,r,s,u,w,x=b;2!==t&&(t=2,g&&clearTimeout(g),c=void 0,e=h||"",v.readyState=a>0?4:0,j=a>=200&&300>a||304===a,f&&(u=tb(k,v,f)),u=ub(k,u,v,j),j?(k.ifModified&&(w=v.getResponseHeader("Last-Modified"),w&&(n.lastModified[d]=w),w=v.getResponseHeader("etag"),w&&(n.etag[d]=w)),204===a||"HEAD"===k.type?x="nocontent":304===a?x="notmodified":(x=u.state,r=u.data,s=u.error,j=!s)):(s=x,(a||!x)&&(x="error",0>a&&(a=0))),v.status=a,v.statusText=(b||x)+"",j?o.resolveWith(l,[r,x,v]):o.rejectWith(l,[v,x,s]),v.statusCode(q),q=void 0,i&&m.trigger(j?"ajaxSuccess":"ajaxError",[v,k,j?r:s]),p.fireWith(l,[v,x]),i&&(m.trigger("ajaxComplete",[v,k]),--n.active||n.event.trigger("ajaxStop")))}return v},getJSON:function(a,b,c){return n.get(a,b,c,"json")},getScript:function(a,b){return n.get(a,void 0,b,"script")}}),n.each(["get","post"],function(a,b){n[b]=function(a,c,d,e){return n.isFunction(c)&&(e=e||d,d=c,c=void 0),n.ajax({url:a,type:b,dataType:e,data:c,success:d})}}),n._evalUrl=function(a){return n.ajax({url:a,type:"GET",dataType:"script",async:!1,global:!1,"throws":!0})},n.fn.extend({wrapAll:function(a){var b;return n.isFunction(a)?this.each(function(b){n(this).wrapAll(a.call(this,b))}):(this[0]&&(b=n(a,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&b.insertBefore(this[0]),b.map(function(){var a=this;while(a.firstElementChild)a=a.firstElementChild;return a}).append(this)),this)},wrapInner:function(a){return this.each(n.isFunction(a)?function(b){n(this).wrapInner(a.call(this,b))}:function(){var b=n(this),c=b.contents();c.length?c.wrapAll(a):b.append(a)})},wrap:function(a){var b=n.isFunction(a);return this.each(function(c){n(this).wrapAll(b?a.call(this,c):a)})},unwrap:function(){return this.parent().each(function(){n.nodeName(this,"body")||n(this).replaceWith(this.childNodes)}).end()}}),n.expr.filters.hidden=function(a){return a.offsetWidth<=0&&a.offsetHeight<=0},n.expr.filters.visible=function(a){return!n.expr.filters.hidden(a)};var vb=/%20/g,wb=/\[\]$/,xb=/\r?\n/g,yb=/^(?:submit|button|image|reset|file)$/i,zb=/^(?:input|select|textarea|keygen)/i;function Ab(a,b,c,d){var e;if(n.isArray(b))n.each(b,function(b,e){c||wb.test(a)?d(a,e):Ab(a+"["+("object"==typeof e?b:"")+"]",e,c,d)});else if(c||"object"!==n.type(b))d(a,b);else for(e in b)Ab(a+"["+e+"]",b[e],c,d)}n.param=function(a,b){var c,d=[],e=function(a,b){b=n.isFunction(b)?b():null==b?"":b,d[d.length]=encodeURIComponent(a)+"="+encodeURIComponent(b)};if(void 0===b&&(b=n.ajaxSettings&&n.ajaxSettings.traditional),n.isArray(a)||a.jquery&&!n.isPlainObject(a))n.each(a,function(){e(this.name,this.value)});else for(c in a)Ab(c,a[c],b,e);return d.join("&").replace(vb,"+")},n.fn.extend({serialize:function(){return n.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var a=n.prop(this,"elements");return a?n.makeArray(a):this}).filter(function(){var a=this.type;return this.name&&!n(this).is(":disabled")&&zb.test(this.nodeName)&&!yb.test(a)&&(this.checked||!T.test(a))}).map(function(a,b){var c=n(this).val();return null==c?null:n.isArray(c)?n.map(c,function(a){return{name:b.name,value:a.replace(xb,"\r\n")}}):{name:b.name,value:c.replace(xb,"\r\n")}}).get()}}),n.ajaxSettings.xhr=function(){try{return new XMLHttpRequest}catch(a){}};var Bb=0,Cb={},Db={0:200,1223:204},Eb=n.ajaxSettings.xhr();a.attachEvent&&a.attachEvent("onunload",function(){for(var a in Cb)Cb[a]()}),k.cors=!!Eb&&"withCredentials"in Eb,k.ajax=Eb=!!Eb,n.ajaxTransport(function(a){var b;return k.cors||Eb&&!a.crossDomain?{send:function(c,d){var e,f=a.xhr(),g=++Bb;if(f.open(a.type,a.url,a.async,a.username,a.password),a.xhrFields)for(e in a.xhrFields)f[e]=a.xhrFields[e];a.mimeType&&f.overrideMimeType&&f.overrideMimeType(a.mimeType),a.crossDomain||c["X-Requested-With"]||(c["X-Requested-With"]="XMLHttpRequest");for(e in c)f.setRequestHeader(e,c[e]);b=function(a){return function(){b&&(delete Cb[g],b=f.onload=f.onerror=null,"abort"===a?f.abort():"error"===a?d(f.status,f.statusText):d(Db[f.status]||f.status,f.statusText,"string"==typeof f.responseText?{text:f.responseText}:void 0,f.getAllResponseHeaders()))}},f.onload=b(),f.onerror=b("error"),b=Cb[g]=b("abort");try{f.send(a.hasContent&&a.data||null)}catch(h){if(b)throw h}},abort:function(){b&&b()}}:void 0}),n.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/(?:java|ecma)script/},converters:{"text script":function(a){return n.globalEval(a),a}}}),n.ajaxPrefilter("script",function(a){void 0===a.cache&&(a.cache=!1),a.crossDomain&&(a.type="GET")}),n.ajaxTransport("script",function(a){if(a.crossDomain){var b,c;return{send:function(d,e){b=n("<script>").prop({async:!0,charset:a.scriptCharset,src:a.url}).on("load error",c=function(a){b.remove(),c=null,a&&e("error"===a.type?404:200,a.type)}),l.head.appendChild(b[0])},abort:function(){c&&c()}}}});var Fb=[],Gb=/(=)\?(?=&|$)|\?\?/;n.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var a=Fb.pop()||n.expando+"_"+cb++;return this[a]=!0,a}}),n.ajaxPrefilter("json jsonp",function(b,c,d){var e,f,g,h=b.jsonp!==!1&&(Gb.test(b.url)?"url":"string"==typeof b.data&&!(b.contentType||"").indexOf("application/x-www-form-urlencoded")&&Gb.test(b.data)&&"data");return h||"jsonp"===b.dataTypes[0]?(e=b.jsonpCallback=n.isFunction(b.jsonpCallback)?b.jsonpCallback():b.jsonpCallback,h?b[h]=b[h].replace(Gb,"$1"+e):b.jsonp!==!1&&(b.url+=(db.test(b.url)?"&":"?")+b.jsonp+"="+e),b.converters["script json"]=function(){return g||n.error(e+" was not called"),g[0]},b.dataTypes[0]="json",f=a[e],a[e]=function(){g=arguments},d.always(function(){a[e]=f,b[e]&&(b.jsonpCallback=c.jsonpCallback,Fb.push(e)),g&&n.isFunction(f)&&f(g[0]),g=f=void 0}),"script"):void 0}),n.parseHTML=function(a,b,c){if(!a||"string"!=typeof a)return null;"boolean"==typeof b&&(c=b,b=!1),b=b||l;var d=v.exec(a),e=!c&&[];return d?[b.createElement(d[1])]:(d=n.buildFragment([a],b,e),e&&e.length&&n(e).remove(),n.merge([],d.childNodes))};var Hb=n.fn.load;n.fn.load=function(a,b,c){if("string"!=typeof a&&Hb)return Hb.apply(this,arguments);var d,e,f,g=this,h=a.indexOf(" ");return h>=0&&(d=n.trim(a.slice(h)),a=a.slice(0,h)),n.isFunction(b)?(c=b,b=void 0):b&&"object"==typeof b&&(e="POST"),g.length>0&&n.ajax({url:a,type:e,dataType:"html",data:b}).done(function(a){f=arguments,g.html(d?n("<div>").append(n.parseHTML(a)).find(d):a)}).complete(c&&function(a,b){g.each(c,f||[a.responseText,b,a])}),this},n.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],function(a,b){n.fn[b]=function(a){return this.on(b,a)}}),n.expr.filters.animated=function(a){return n.grep(n.timers,function(b){return a===b.elem}).length};var Ib=a.document.documentElement;function Jb(a){return n.isWindow(a)?a:9===a.nodeType&&a.defaultView}n.offset={setOffset:function(a,b,c){var d,e,f,g,h,i,j,k=n.css(a,"position"),l=n(a),m={};"static"===k&&(a.style.position="relative"),h=l.offset(),f=n.css(a,"top"),i=n.css(a,"left"),j=("absolute"===k||"fixed"===k)&&(f+i).indexOf("auto")>-1,j?(d=l.position(),g=d.top,e=d.left):(g=parseFloat(f)||0,e=parseFloat(i)||0),n.isFunction(b)&&(b=b.call(a,c,h)),null!=b.top&&(m.top=b.top-h.top+g),null!=b.left&&(m.left=b.left-h.left+e),"using"in b?b.using.call(a,m):l.css(m)}},n.fn.extend({offset:function(a){if(arguments.length)return void 0===a?this:this.each(function(b){n.offset.setOffset(this,a,b)});var b,c,d=this[0],e={top:0,left:0},f=d&&d.ownerDocument;if(f)return b=f.documentElement,n.contains(b,d)?(typeof d.getBoundingClientRect!==U&&(e=d.getBoundingClientRect()),c=Jb(f),{top:e.top+c.pageYOffset-b.clientTop,left:e.left+c.pageXOffset-b.clientLeft}):e},position:function(){if(this[0]){var a,b,c=this[0],d={top:0,left:0};return"fixed"===n.css(c,"position")?b=c.getBoundingClientRect():(a=this.offsetParent(),b=this.offset(),n.nodeName(a[0],"html")||(d=a.offset()),d.top+=n.css(a[0],"borderTopWidth",!0),d.left+=n.css(a[0],"borderLeftWidth",!0)),{top:b.top-d.top-n.css(c,"marginTop",!0),left:b.left-d.left-n.css(c,"marginLeft",!0)}}},offsetParent:function(){return this.map(function(){var a=this.offsetParent||Ib;while(a&&!n.nodeName(a,"html")&&"static"===n.css(a,"position"))a=a.offsetParent;return a||Ib})}}),n.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(b,c){var d="pageYOffset"===c;n.fn[b]=function(e){return J(this,function(b,e,f){var g=Jb(b);return void 0===f?g?g[c]:b[e]:void(g?g.scrollTo(d?a.pageXOffset:f,d?f:a.pageYOffset):b[e]=f)},b,e,arguments.length,null)}}),n.each(["top","left"],function(a,b){n.cssHooks[b]=ya(k.pixelPosition,function(a,c){return c?(c=xa(a,b),va.test(c)?n(a).position()[b]+"px":c):void 0})}),n.each({Height:"height",Width:"width"},function(a,b){n.each({padding:"inner"+a,content:b,"":"outer"+a},function(c,d){n.fn[d]=function(d,e){var f=arguments.length&&(c||"boolean"!=typeof d),g=c||(d===!0||e===!0?"margin":"border");return J(this,function(b,c,d){var e;return n.isWindow(b)?b.document.documentElement["client"+a]:9===b.nodeType?(e=b.documentElement,Math.max(b.body["scroll"+a],e["scroll"+a],b.body["offset"+a],e["offset"+a],e["client"+a])):void 0===d?n.css(b,c,g):n.style(b,c,d,g)},b,f?d:void 0,f,null)}})}),n.fn.size=function(){return this.length},n.fn.andSelf=n.fn.addBack,"function"==typeof define&&define.amd&&define("jquery",[],function(){return n});var Kb=a.jQuery,Lb=a.$;return n.noConflict=function(b){return a.$===n&&(a.$=Lb),b&&a.jQuery===n&&(a.jQuery=Kb),n},typeof b===U&&(a.jQuery=a.$=n),n});
;
// jQuery Selector Cache
!function(n,r){var $={};$$=function(u){var t=$[u];return t!==r?t:$[u]=n(u)},$$.clear=function(n){$[n]=r},$$.fresh=function(n){return $[n]=r,$$(n)}}(jQuery);
;
!function(){"use strict";function t(e,o){function i(t,e){return function(){return t.apply(e,arguments)}}var r;if(o=o||{},this.trackingClick=!1,this.trackingClickStart=0,this.targetElement=null,this.touchStartX=0,this.touchStartY=0,this.lastTouchIdentifier=0,this.touchBoundary=o.touchBoundary||10,this.layer=e,this.tapDelay=o.tapDelay||200,this.tapTimeout=o.tapTimeout||700,!t.notNeeded(e)){for(var a=["onMouse","onClick","onTouchStart","onTouchMove","onTouchEnd","onTouchCancel"],c=this,s=0,u=a.length;u>s;s++)c[a[s]]=i(c[a[s]],c);n&&(e.addEventListener("mouseover",this.onMouse,!0),e.addEventListener("mousedown",this.onMouse,!0),e.addEventListener("mouseup",this.onMouse,!0)),e.addEventListener("click",this.onClick,!0),e.addEventListener("touchstart",this.onTouchStart,!1),e.addEventListener("touchmove",this.onTouchMove,!1),e.addEventListener("touchend",this.onTouchEnd,!1),e.addEventListener("touchcancel",this.onTouchCancel,!1),Event.prototype.stopImmediatePropagation||(e.removeEventListener=function(t,n,o){var i=Node.prototype.removeEventListener;"click"===t?i.call(e,t,n.hijacked||n,o):i.call(e,t,n,o)},e.addEventListener=function(t,n,o){var i=Node.prototype.addEventListener;"click"===t?i.call(e,t,n.hijacked||(n.hijacked=function(t){t.propagationStopped||n(t)}),o):i.call(e,t,n,o)}),"function"==typeof e.onclick&&(r=e.onclick,e.addEventListener("click",function(t){r(t)},!1),e.onclick=null)}}var e=navigator.userAgent.indexOf("Windows Phone")>=0,n=navigator.userAgent.indexOf("Android")>0&&!e,o=/iP(ad|hone|od)/.test(navigator.userAgent)&&!e,i=o&&/OS 4_\d(_\d)?/.test(navigator.userAgent),r=o&&/OS [6-7]_\d/.test(navigator.userAgent),a=navigator.userAgent.indexOf("BB10")>0;t.prototype.needsClick=function(t){switch(t.nodeName.toLowerCase()){case"button":case"select":case"textarea":if(t.disabled)return!0;break;case"input":if(o&&"file"===t.type||t.disabled)return!0;break;case"label":case"iframe":case"video":return!0}return/\bneedsclick\b/.test(t.className)},t.prototype.needsFocus=function(t){switch(t.nodeName.toLowerCase()){case"textarea":return!0;case"select":return!n;case"input":switch(t.type){case"button":case"checkbox":case"file":case"image":case"radio":case"submit":return!1}return!t.disabled&&!t.readOnly;default:return/\bneedsfocus\b/.test(t.className)}},t.prototype.sendClick=function(t,e){var n,o;document.activeElement&&document.activeElement!==t&&document.activeElement.blur(),o=e.changedTouches[0],n=document.createEvent("MouseEvents"),n.initMouseEvent(this.determineEventType(t),!0,!0,window,1,o.screenX,o.screenY,o.clientX,o.clientY,!1,!1,!1,!1,0,null),n.forwardedTouchEvent=!0,t.dispatchEvent(n)},t.prototype.determineEventType=function(t){return n&&"select"===t.tagName.toLowerCase()?"mousedown":"click"},t.prototype.focus=function(t){var e;o&&t.setSelectionRange&&0!==t.type.indexOf("date")&&"time"!==t.type&&"month"!==t.type?(e=t.value.length,t.setSelectionRange(e,e)):t.focus()},t.prototype.updateScrollParent=function(t){var e,n;if(e=t.fastClickScrollParent,!e||!e.contains(t)){n=t;do{if(n.scrollHeight>n.offsetHeight){e=n,t.fastClickScrollParent=n;break}n=n.parentElement}while(n)}e&&(e.fastClickLastScrollTop=e.scrollTop)},t.prototype.getTargetElementFromEventTarget=function(t){return t.nodeType===Node.TEXT_NODE?t.parentNode:t},t.prototype.onTouchStart=function(t){var e,n,r;if(t.targetTouches.length>1)return!0;if(e=this.getTargetElementFromEventTarget(t.target),n=t.targetTouches[0],o){if(r=window.getSelection(),r.rangeCount&&!r.isCollapsed)return!0;if(!i){if(n.identifier&&n.identifier===this.lastTouchIdentifier)return t.preventDefault(),!1;this.lastTouchIdentifier=n.identifier,this.updateScrollParent(e)}}return this.trackingClick=!0,this.trackingClickStart=t.timeStamp,this.targetElement=e,this.touchStartX=n.pageX,this.touchStartY=n.pageY,t.timeStamp-this.lastClickTime<this.tapDelay&&t.preventDefault(),!0},t.prototype.touchHasMoved=function(t){var e=t.changedTouches[0],n=this.touchBoundary;return Math.abs(e.pageX-this.touchStartX)>n||Math.abs(e.pageY-this.touchStartY)>n?!0:!1},t.prototype.onTouchMove=function(t){return this.trackingClick?((this.targetElement!==this.getTargetElementFromEventTarget(t.target)||this.touchHasMoved(t))&&(this.trackingClick=!1,this.targetElement=null),!0):!0},t.prototype.findControl=function(t){return void 0!==t.control?t.control:t.htmlFor?document.getElementById(t.htmlFor):t.querySelector("button, input:not([type=hidden]), keygen, meter, output, progress, select, textarea")},t.prototype.onTouchEnd=function(t){var e,a,c,s,u,l=this.targetElement;if(!this.trackingClick)return!0;if(t.timeStamp-this.lastClickTime<this.tapDelay)return this.cancelNextClick=!0,!0;if(t.timeStamp-this.trackingClickStart>this.tapTimeout)return!0;if(this.cancelNextClick=!1,this.lastClickTime=t.timeStamp,a=this.trackingClickStart,this.trackingClick=!1,this.trackingClickStart=0,r&&(u=t.changedTouches[0],l=document.elementFromPoint(u.pageX-window.pageXOffset,u.pageY-window.pageYOffset)||l,l.fastClickScrollParent=this.targetElement.fastClickScrollParent),c=l.tagName.toLowerCase(),"label"===c){if(e=this.findControl(l)){if(this.focus(l),n)return!1;l=e}}else if(this.needsFocus(l))return t.timeStamp-a>100||o&&window.top!==window&&"input"===c?(this.targetElement=null,!1):(this.focus(l),this.sendClick(l,t),o&&"select"===c||(this.targetElement=null,t.preventDefault()),!1);return o&&!i&&(s=l.fastClickScrollParent,s&&s.fastClickLastScrollTop!==s.scrollTop)?!0:(this.needsClick(l)||(t.preventDefault(),this.sendClick(l,t)),!1)},t.prototype.onTouchCancel=function(){this.trackingClick=!1,this.targetElement=null},t.prototype.onMouse=function(t){return this.targetElement?t.forwardedTouchEvent?!0:t.cancelable&&(!this.needsClick(this.targetElement)||this.cancelNextClick)?(t.stopImmediatePropagation?t.stopImmediatePropagation():t.propagationStopped=!0,t.stopPropagation(),t.preventDefault(),!1):!0:!0},t.prototype.onClick=function(t){var e;return this.trackingClick?(this.targetElement=null,this.trackingClick=!1,!0):"submit"===t.target.type&&0===t.detail?!0:(e=this.onMouse(t),e||(this.targetElement=null),e)},t.prototype.destroy=function(){var t=this.layer;n&&(t.removeEventListener("mouseover",this.onMouse,!0),t.removeEventListener("mousedown",this.onMouse,!0),t.removeEventListener("mouseup",this.onMouse,!0)),t.removeEventListener("click",this.onClick,!0),t.removeEventListener("touchstart",this.onTouchStart,!1),t.removeEventListener("touchmove",this.onTouchMove,!1),t.removeEventListener("touchend",this.onTouchEnd,!1),t.removeEventListener("touchcancel",this.onTouchCancel,!1)},t.notNeeded=function(t){var e,o,i,r;if("undefined"==typeof window.ontouchstart)return!0;if(o=+(/Chrome\/([0-9]+)/.exec(navigator.userAgent)||[,0])[1]){if(!n)return!0;if(e=document.querySelector("meta[name=viewport]")){if(-1!==e.content.indexOf("user-scalable=no"))return!0;if(o>31&&document.documentElement.scrollWidth<=window.outerWidth)return!0}}if(a&&(i=navigator.userAgent.match(/Version\/([0-9]*)\.([0-9]*)/),i[1]>=10&&i[2]>=3&&(e=document.querySelector("meta[name=viewport]")))){if(-1!==e.content.indexOf("user-scalable=no"))return!0;if(document.documentElement.scrollWidth<=window.outerWidth)return!0}return"none"===t.style.msTouchAction||"manipulation"===t.style.touchAction?!0:(r=+(/Firefox\/([0-9]+)/.exec(navigator.userAgent)||[,0])[1],r>=27&&(e=document.querySelector("meta[name=viewport]"),e&&(-1!==e.content.indexOf("user-scalable=no")||document.documentElement.scrollWidth<=window.outerWidth))?!0:"none"===t.style.touchAction||"manipulation"===t.style.touchAction?!0:!1)},t.attach=function(e,n){return new t(e,n)},"function"==typeof define&&"object"==typeof define.amd&&define.amd?define(function(){return t}):"undefined"!=typeof module&&module.exports?(module.exports=t.attach,module.exports.FastClick=t):window.FastClick=t}(),jQuery(function(){FastClick.attach(document.body)});;
// Browser selector <html> tag
function css_browser_selector(u){var ua=u.toLowerCase(),is=function(t){return ua.indexOf(t)>-1},g='gecko',w='webkit',s='safari',o='opera',m='mobile',h=document.documentElement,b=[(!(/opera|webtv/i.test(ua))&&/msie\s(\d)/.test(ua))?('ie ie'+RegExp.$1):is('firefox/2')?g+' ff2':is('firefox/3.5')?g+' ff3 ff3_5':is('firefox/3.6')?g+' ff3 ff3_6':is('firefox/3')?g+' ff3':is('gecko/')?g:is('opera')?o+(/version\/(\d+)/.test(ua)?' '+o+RegExp.$1:(/opera(\s|\/)(\d+)/.test(ua)?' '+o+RegExp.$2:'')):is('konqueror')?'konqueror':is('blackberry')?m+' blackberry':is('android')?m+' android':is('chrome')?w+' chrome':is('iron')?w+' iron':is('applewebkit/')?w+' '+s+(/version\/(\d+)/.test(ua)?' '+s+RegExp.$1:''):is('mozilla/')?g:'',is('j2me')?m+' j2me':is('iphone')?m+' iphone':is('ipod')?m+' ipod':is('ipad')?m+' ipad':is('mac')?'mac':is('darwin')?'mac':is('webtv')?'webtv':is('win')?'win'+(is('windows nt 6.0')?' vista':''):is('freebsd')?'freebsd':(is('x11')||is('linux'))?'linux':'','js']; c = b.join(' '); h.className += ' '+c; return c;}; css_browser_selector(navigator.userAgent);
;
(function(){(function(){var g,V,ia,aa,n,ba,M,Q,ca,ja,ka,la,W,h,R,I,m,J,X,Y,da,S,Z,K;W=function(a){a=typeof a;return"string"!==a&&"number"!==a&&"boolean"!==a?!1:!0};ca=function(a){var c;1<a.length?"radio"===a[0].type||"checkbox"===a[0].type?(c=a,a=[],Object.keys(c).forEach(function(d){if(!isNaN(parseFloat(d)))return a.push(c[d])})):(Z("onlyOneDOMElement"),a=a[0]):a=a[0];return a};Q=function(a){X.jQuery&&a.constructor===jQuery&&(a=ca(a),a.length&&(a=a[0]));return a};ja=function(){return"sb_"+Math.floor(1E12*
(1+Math.random())).toString(16)};ia=function(a,c,d){var e;e=n.objects.indexOf(a);return-1===e?(e={},e[c]=d,n.objects.push(a),n.props.push(e)):n.props[e][c]=d};ka=function(a,c){var d;d=n.objects.indexOf(a);return-1!==d&&(d=n.props[d],null!=d[c])?g.boundedObjects[d[c]]:!1};J=function(a,c){return{regEx:new RegExp(I.Start+a+I.End,"g"),lastValue:c}};aa=function(a,c,d){var e;e=m.objects.indexOf(a);if(-1===e)return e={},e[c]=J(c,d),m.objects.push(a),m.placeholders.push(e);a=m.placeholders[e];return null!=
a[c]?a[c].lastValue=d:a[c]=J(c,d)};la=function(a){a=m.objects.indexOf(a);return m.placeholders[a]};S=function(a){if(!h.silent&&null!=M[a])throw Error(M[a]);};Z=function(a){if(!h.silent&&K[a])return console.log("SimplyBind - Warning: "+K[a])};ba=function(){var a;a=document.createEvent("Event");a.initEvent("change",!0,!1);a.fromSimplyBind=!0;return a};M={invalidArg:"SimplyBind can only accept a string/number representing the name of an object\u2019s property or an existing SimplyBind object.",emptyStringArg:"SimplyBind cannot accept an empty string for a property name."};
K={attributes:"DOM Attributes cannot be observed for changes and therefore will not update its dependents upon change",transformFunction:"You can only pass a function to the .withTransform() method",onlyOneDOMElement:"You can only pass one DOM element into SimplyBind unless it's a collection of radio/checkbox inputs",noNestedDOM:"You cannot pass nested properties for DOM attributes or input element values. Will only use the uppermost property."};X={jQuery:"undefined"!==typeof jQuery&&null!==jQuery,
IE9:!window.atob};h={silent:!1,liveProperties:!0,dispatchEvents:!1,updateEvenIfSame:!1,invokeOnBind:!0,overrideInheritedProps:!1,placeholderStart:"{{",placeholderEnd:"}}"};R=Object.keys(h);I={Start:"\\{\\{",End:"\\}\\}"};n={objects:[],props:[]};m={objects:[],placeholders:[]};Y=[];da=[];g=function(a){""===a&&S("emptyStringArg");if(!a&&0!==a||!W(a))if(null==a.constructor||a.constructor!==g.SimplyBoundedConstructor){S("invalidArg");return}return"object"===typeof a?(a.invoke("resetConditionals"),a):new V(a)};
V=function(a){var c,d,e,ea,n,w,p,l,q,D,x,m,B,T,r,I,t,y,M,U,f,z,E,u,k,A,F,J,K,Q,C,N,R,G,fa,ga,ha,L,O,P,ma,v;this.ID=this.type=null;c=this;E=v=D=U=null;p=[];l=[];q=[];f=z=null;L=[];u=C=a;O={};k=null;F=[];A=null;N=T=y=t=B=!1;Object.defineProperty(this,"value",{configurable:!0,enumerable:!0,get:function(){return D}});Object.defineProperty(this,"origObject",{configurable:!0,enumerable:!0,get:function(){return z||f}});Object.defineProperty(this,"dependents",{configurable:!0,enumerable:!0,get:function(){var b;
b=l.slice().map(function(b){var a;return null!=(a=g.boundedObjects[b])?a.origObject:void 0});p.forEach(function(a){return b.push(a)});return b}});R=function(b){return function(){b.ID=ja();return g.boundedObjects[b.ID]=b}}(this);ha=function(b){return function(){var a;if(!b.type&&(b.type="Object",a=null!=f.nodeName&&f.nodeType))return"value"===u?b.type="Value":"textContent"===u?b.type="Text":b.type="Attr"}}(this);fa=function(b){null==b&&(b=x());return aa(b,E,v)};ga=function(b){if(N)return[].slice.call(b.childNodes).forEach(function(b){if(3!==
b.nodeType)return ga(b);if(-1!==b.textContent.indexOf(h.placeholderStart+E+h.placeholderEnd)&&(aa(b,E,v),-1===Y.indexOf(b)))return Y.push(b),da.push(b.textContent)})};m=function(b,a){var H;H=Y.indexOf(b);return-1!==H?ea(b,da[H]):!1};x=function(){var b;if(L.length){c.ID||ha();if("Value"===c.type||"Attr"===c.type)return f;b=f;L.slice().reverse().forEach(function(a){return b=b[a]});return b}return f};w=function(b){return function(){var a,H;if("Value"===b.type||"Text"===b.type)if(a=function(a){if(!a.fromSimplyBind)return b.set(a.target.value)},
H=z?z[0].nodeName.toUpperCase():f.nodeName.toUpperCase(),"Text"===b.type||"INPUT"===H||"TEXTAREA"===H||"SELECT"===H){if("radio"===f.type||"checkbox"===f.type)return z.forEach(function(b){return b.addEventListener("change",a,!1)});f.addEventListener("input",a,!1);X.IE9&&f.addEventListener("keyup",a,!1);return f.addEventListener("change",a,!1)}}}(this);n=function(b){return N?[].slice.call(b.childNodes).forEach(function(b){var a;if(3!==b.nodeType)return n(b);a=m(b);if(!1!==a)return b.textContent=a}):
b.textContent=v};ma=function(b){return function(a){v=a;D=N?ea():a;if("Value"===b.type){if(z)return z.forEach(function(b){return b.value===a?(b.checked=!0,b.dispatchEvent(ba())):b.checked=!1});f.value=D;if(h.dispatchEvents)return f.dispatchEvent(ba())}else{if("Attr"===b.type)return f.setAttribute(u,D);if("Text"===b.type)return n(f,a)}}}(this);P=function(b){return function(b,a){var c,d,e,f;if(l.length)for(e=0,f=l.length;e<f;e++)d=l[e],c=g.boundedObjects[d],a&&-1!==q.indexOf(d)||(d=null!=O[d]?O[d](v,
c.value):v,c.set(d,b,!0));if(p.length){d=[];e=0;for(f=p.length;e<f;e++)c=p[e],d.push(c(v));return d}}}(this);ea=function(b,a){var d,c,e,f;null==b&&(b=x());null==a&&(a=U);fa(b);d=a;f=la(b);for(c in f)e=f[c],d=d.replace(e.regEx,e.lastValue);return d};M=function(b){return function(){var a;if("Object"===b.type&&h.liveProperties&&(a=h.overrideInheritedProps?!0:x().hasOwnProperty(u)))return Object.defineProperty(x(),u,{get:function(){return D},set:function(a){return b.update(a)}})}}(this);d=function(b){return function(a,
c){-1===l.indexOf(a)&&l.push(a);if(c){if(-1===q.indexOf(a))return q.push(a)}else if(-1!==g.boundedObjects[a].getPrivate("dependents").indexOf(b.ID))return g.boundedObjects[a].invoke("addToDependents",[b.ID,!0]),d(a,!0)}}(this);e=function(b){return function(b,a){return O[b]=a}}(this);J=function(b){return function(a,d){var c;c=l.indexOf(a);-1!==c&&l.splice(c,1);if(d&&(q.forEach(function(a){return g.boundedObjects[a].invoke("removeDependent",[b.ID])}),c=q.indexOf(a),-1!==c))return q.splice(c,1)}}(this);
K=function(b){return function(b){b=p.indexOf(b);return p.splice(b,1)}}(this);Q=function(b){return function(){T=t=y=!1;k=A=null;F=[];G();return b}}(this);G=function(b){return function(){delete b.of;delete b.to;delete b.and;delete b.set;delete b.update;delete b.get;delete b.update;delete b.withTransform;delete b.bothWays;delete b.bindTogether;B&&!y||A||(b.of=r.of);!B||t||y||(b.to=r.to);B&&t&&!y&&!T&&(b.and=r.and);B&&(b.set=r.set,b.update=r.set,b.get=r.get,b.val=r.get);B&&t&&!T&&null!=k&&!A&&(b.withTransform=
r.withTransform);B&&t&&!y&&null!=k&&!A&&(b.bothWays=r.bothWays,b.bindTogether=r.bothWays);if(B&&t&&!y&&(null!=k||A))return b.unBind=r.unBind}}(this);I=function(b){return function(a,c){null==c&&(c=[]);switch(a){case "addToDependents":return d.apply(b,c);case "addToTransforms":return e.apply(b,c);case "removeDependent":return J.apply(b,c);case "resetConditionals":return Q.call(b);case "removeFunction":return K.call(b,c)}}}(this);a=function(b){return function(b){switch(b){case "dependents":return l;
case "dependentFns":return p}}}(this);Object.defineProperty(this,"invoke",{configurable:!1,enumerable:!1,value:I});Object.defineProperty(this,"getPrivate",{configurable:!1,enumerable:!1,value:a});r={of:function(b){var a,c;a=null!=b?"object"===typeof b:!1;c=null!=b?W(b):!1;a||c||S("invalidArg");if(y)c=F.indexOf(k),k=k.of(b),F[c]=k,a&&(y=!1,t=!0,d(k.ID),P(this.ID,!0));else if(a){c=!1;b.constructor===g.SimplyBoundedConstructor&&(b=b.origObject);B=!0;X.jQuery&&b.constructor===jQuery&&(c=!0,b=ca(b));f=
b;a=x()[u];if("NodeList"===b.constructor.name||"HTMLCollection"===b.constructor.name||c&&b.length)f=null,z=[].slice.call(b),z.forEach(function(b){if(b.checked)return f=b}),f||(f=z[0]),b=f,a=f.value;if(c=null!=f.nodeName&&f.nodeType)"textContent"===u?(ga(f),a=f.textContent):"value"!==u&&(a=b.getAttribute(u)),L.length&&(Z("noNestedDOM"),u=C=b=L[L.length-1]);b=ka(x(),C);if(null!=b&&"function"===typeof b.invoke&&b.invoke("resetConditionals"))return b;void 0===a&&"object"===typeof x()&&(a=x()[u]=null);
U=a;N?(D=U,v=h.placeholderStart+E+h.placeholderEnd,fa()):v=D=U;R();ia(x(),C,this.ID);ha();M();w()}else c&&L.push(b);G();return this},to:function(b){if(null==b)return this;b.constructor===g.SimplyBoundedConstructor?(t=!0,k=b,F.push(k),d(k.ID),P(this.ID,!0)):W(b)?(y=!0,k=new V(b),F.push(k)):"function"===typeof b?(t=!0,-1===p.indexOf(b)&&p.push(b),A=b,h.invokeOnBind&&P(this.ID,!0)):S("invalidArg");G();t&&this.update(null,this.ID);return this},and:function(b){return r.to.bind(this)(b)},set:function(b,
a,c){null==c&&(c=!1);a===this.ID||b===v&&!h.updateEvenIfSame||(null==a&&(a=this.ID),"undefined"!==typeof b&&ma(b,a),P(a,c));return this},get:function(){return v},withTransform:function(a){var c,d,f;if("function"===typeof a){T=!0;c=0;for(d=F.length;c<d;c++)f=F[c],e(f.ID,a),-1!==q.indexOf(f.ID)&&f.invoke("addToTransforms",[this.ID,a]);P(this.ID,!0)}else Z("transformFunction");G();return this},bothWays:function(){null!=O[k.ID]?g(k).to(this).withTransform(O[k.ID]):g(k).to(this);d(k.ID,!0);G();return this},
unBind:function(a){A?(K(A),t=!1,A=null):(J(k.ID,a),t=!1,k=null);G();return this}};"number"===typeof C&&(C=C.toString());-1!==C.indexOf(".")&&(N=!0,a=C.split("."),u=a[0],E=a[1],2<a.length&&a.slice(2).forEach(function(a){return E+="."+a}));G();return this};g.setOption=function(a,c){if(-1!==R.indexOf(a))return-1!==a.indexOf("placeholder")&&(a.indexOf("Start"),I[a.slice(11)]=c.replace(/(.)/g,"\\$1")),h[a]=c};g.setOptions=function(a){var c;c=Object.keys(a);if(c.length)return c.forEach(function(c){return g.setOption(c,
a[c])})};g.options=function(){return h};g.unBindAll=function(a,c,d){var e,h,m,w,p,l,q;d||g.unBindAllFunctions(a);if(a&&"object"===typeof a&&(a=Q(a),d=null!=a.nodeName&&a.nodeType,e=n.objects.indexOf(a),-1!==e)){p=n.props[e];q=[];for(l in p)w=p[l],m=d&&"value"!==l?a.getAttribute(l):a[l],h=g.boundedObjects[w],e=h.getPrivate("dependents"),e.slice().forEach(function(a){return h.invoke("removeDependent",[a,c])}),c?(delete g.boundedObjects[w],"Value"!==h.type?q.push(Object.defineProperty(a,l,{value:m})):
q.push(void 0)):q.push(void 0);return q}};g.unBindAllFunctions=function(a,c){var d,e,h,m,w;if(a&&"object"===typeof a&&(e=n.objects.indexOf(a),-1!==e)){d=function(a){var c;if(a)return c=g.boundedObjects[a],a=c.getPrivate("dependentFns"),a.slice().forEach(function(a){return c.invoke("removeFunction",a)})};h=n.props[e];if(c)return d(h[c]);w=[];for(m in h)e=h[m],w.push(d(e));return w}};g.SimplyBoundedConstructor=V;g.boundedObjects={};return window.SimplyBind=g})()}).call(this);
;
function Util(){
	

	/* ==========================================================================
	   Function Helpers
	   ========================================================================== */
	
	// ==== Debounce =================================================================================
	/**
	 * Returns a function, that, as long as it continues to be invoked, will not
	 * be triggered. The function will be called after it stops being called for
	 * N milliseconds. If 'immediate' is passed, trigger the function on the
	 * leading edge, instead of the trailing.
	 *
	 *	Usage:
	 *		var myEfficientFn = debounce(function() {
	 *			// All the taxing stuff you do
	 *		}, 250);
	 *		window.addEventListener('resize', myEfficientFn);
	 *
	 * @param  {Function} func     	 Function to perform debouncing on.
	 * @param  {number} wait     	 Time in ms to wait before executing the function.
	 * @param  {bool} immediate 	 Indicate if the function should be triggered on the leading (true) or trailing (false) edge.
	 */
	this.debounce = function(func, wait, immediate) {
		var timeout;
		return function() {
			var context = this, args = arguments;
			var later = function() {
				timeout = null;
				if (!immediate) func.apply(context, args);
			};
			var callNow = immediate && !timeout;
			clearTimeout(timeout);
			timeout = setTimeout(later, wait);
			if (callNow) func.apply(context, args);
		};
	};




	// ==== Once =================================================================================
	/**
	 * Trigger a function only once and don't trigger when called after the first time.
	 *
	 *	Usage
	 *		var canOnlyFireOnce = once(function() {
	 *			console.log('Fired!');
	 *		});
	 *		canOnlyFireOnce(); // "Fired!"
	 *		canOnlyFireOnce(); // nada
	 *
	 * @param  {Function} fn      Function to trigger once.
	 * @param  {object}   context Optional context to set 'this' to.
	 */
	this.once = function(fn, context) { 
		var result;

		return function() { 
			if(fn) {
				result = fn.apply(context || this, arguments);
				fn = null;
			}

			return result;
		};
	}
































	/* ==========================================================================
	   Performance Test Utilities
	   ========================================================================== */
	this.perf = {
		/**
		 * Triggers an action repeatedly for a given time and returns the number of times the function completed.
		 * 
		 * @param  {Function} fn           Function to trigger.
		 * @param  {number}   milliSeconds The time that the function should trigger for.
		 * @return {number}                The number of times the function was triggered.
		 */
		count: function(fn, milliSeconds) {
			var startTime = performance.now(),
				endTime = 0,
				i = 0;

			if (typeof milliSeconds == 'undefined') {
				milliSeconds = 1000;
			}

			while ( endTime - startTime < milliSeconds ) {
				fn();
				i++;
				endTime = performance.now();
			}

			return i;
		},

		/**
		 * Triggers an action a given number of times and returns the average time it took for the function to complete.
		 * 
		 * @param  {Function} fn           Function to trigger.
		 * @param  {number}   times		   The number of times to trigger the functions.
		 * @return {number}                The times it took for the function to trigger under the given timeframe.
		 */
		average: function(fn) {
			var	startTime, endTime,
				i = 0;

			startTime = performance.now();
			while (i < 10000) {
				fn();
				i++;
			}
			endTime = performance.now();
		
			return (endTime - startTime)/10;
		},

		compare: function(fn1, fn2) {
			var fn1Time = this.average(fn1),
				fn2Time = this.average(fn2),
				difference;

			if (fn1Time > fn2Time) {
				difference = Math.round((fn1Time/fn2Time) * 100)/100;
				return 'Second is faster by '+difference+' times.';
			} else {
				difference = Math.round((fn2Time/fn1Time) * 100)/100;
				return 'First is faster by '+difference+' times.';
			}
		},



		'old': {
			count: function(fn, milliSeconds) {
				var startTime = new Date().getTime(),
					endTime = 0,
					repeatFunction = true,
					i = 0;

				if (typeof milliSeconds == 'undefined') {
					var milliSeconds = 5000;
				}

				while ( repeatFunction ) {
					fn.apply(this, arguments);
					i++

					if (endTime - startTime < milliSeconds) {
						endTime = new Date().getTime();
					} else {
						console.log('Completed function ' + i + ' times');
						repeatFunction = false;
					}

				}
			},
			time: function(fn, times) {
				var startTime = new Date().getTime();
				var i = 0;

				if (typeof times == 'undefined') {
					var times = 100000;
				}

				while (i < (times + 1)) {
					fn.apply(this, arguments);

					if (i === times) {
						var endTime = new Date().getTime(),
							finishTime = endTime - startTime;
						console.log(finishTime);
					}

					i++;
				}

			}
		}
	}





















	// ==========================================================================
	// Animation
	// ========================================================================== 
	// var animationFrame = (function(win, t) {
	//   return win["r" + t] || win["webkitR" + t] || win["mozR" + t] || win["msR" + t] || function(fn) { setTimeout(fn, 60); };
	// })(window, "equestAnimationFrame");

	// heightHistory = {'elements': [], 'heights': [], 'displays': []};

	// this.animateHeight = function(el, duration, height, customWidth, targetDisplay){
	// 	var	whenToEnd = Date.now() + duration,
	// 		remaining, startingHeight, targetHeight, currentProgress, inc, indexInHistory, display, onStart, onEnd;
		
	// 	if (typeof height === 'string') {
	// 		startingHeight = el.offsetHeight;
	// 		indexInHistory = heightHistory.elements.indexOf(el);
			
	// 		if (indexInHistory === -1) {
	// 			targetHeight = util.getHiddenElementHeight(el, customWidth);
	// 			display = targetDisplay || getComputedStyle(el).display;
	// 			display = display === 'none' && targetDisplay !== 'none' ? 'block' : display;
			
	// 			heightHistory.elements.push(el);
	// 			heightHistory.heights.push(targetHeight);
	// 			heightHistory.displays.push(display);
	// 		} else {
	// 			targetHeight = heightHistory.heights[indexInHistory];
	// 			display = heightHistory.displays[indexInHistory];
	// 		}


	// 		if (height === 'down') {
	// 			onStart = function(){el.style.overflow = 'hidden'; el.style.display = display;};
	// 			onEnd = function(){};
	// 		} else if (height === 'up') {
	// 			targetHeight = 0;
	// 			onStart = function(){el.style.overflow = 'hidden';};
	// 			onEnd = function(){el.style.display = 'none';};
	// 		}

	// 		// targetHeight = targetHeight - startingHeight;
	// 	}

	// 	return new Promise(function(resolve) {
	// 		currentProgress = startingHeight;
	// 		onStart();
	// 		console.log(startingHeight, targetHeight);

	// 		function step(){
	// 			remaining = whenToEnd - Date.now();
	// 			currentProgress = targetHeight - (remaining/duration)*(targetHeight-startingHeight);

	// 			if(remaining < 60) {
	// 				el.style.height = targetHeight+'px';
	// 				onEnd();
	// 				return resolve();

	// 			} else {
	// 				el.style.height = currentProgress+'px';
	// 			}

	// 			animationFrame(step);
	// 		}
	// 		animationFrame(step);
	// 	});
	// };
























	/* ==========================================================================
	   Object & Array helpers.
	   ========================================================================== */
	
	// ==== Form values to Object coversion for submission =================================================================================
	/**
	 * Finds all field values under a given form and converts the values intro a key:value pair format object for ajax submission.
	 * 
	 * @param  {object} $form jQuery Object that contains the form to be converted.
	 * @return {object}       Data object containing all form values.
	 */
	this.convertFormToObject = function($form, enableFormFields){
		if (enableFormFields) {
			var $inputFields = $form.find('input:disabled').not('disabled_forever');
			$inputFields.prop('disabled', false);
		}
		var fieldData = $form.serializeArray(),
			arrayRegEx = /\[\]$/;
			data = {};

		fieldData.forEach(function(item){
			if (!item.name.includes('_xyz_')) {
				if ( arrayRegEx.test(item.name) ) { // Check if the name of the field is an array
					item.name = item.name.replace('[]', '');
					if (data[item.name]) { // Check if array exists in the new data object.
						data[item.name].push(item.value); // If it does, just push the next value into that array.
					} else {
						if (item.value !== '') {
							data[item.name] = [item.value]; // If not, create a new array and append the first value to it.
						}
					}
				} else {
					data[item.name] = item.value; // If the name of the field isn't an array, just push it as a regular value to the data object.
				}
			}
		});
		if (enableFormFields) $inputFields.prop('disabled', true);
		return data;
	};



	// ==== Convert object to array. =================================================================================
	/**
	 * Converts objects that are number-indexed to an array.
	 * 
	 * @param  {object} object  object to convert to an array.
	 * @return {array}          Newly formed array.
	 */
	this.convertObjectToArray = function(object){
		return Object.keys(object).map(function(key) { return object[key] });
	};

































	/* ==========================================================================
	   Various
	   ========================================================================== */

	// ==== Get Object Length =================================================================================
	/**
	 * Iterites through each direct property in an object and increments an eventually-returned length var;
	 * @param  {obejct} object Object to iterate through
	 * @return {number}        Length of the given object
	 */
	this.objectLength = function(object){
		var length = 0;
		for (i in object) {
			length++;
		}
		return length;
	};

	// ==== String finder =================================================================================
	/**
	 * Searches a given string to see if it contains another string.
	 * @param  {string} haystack String to search in.
	 * @param  {string} needle   String to search for.
	 * @return {bool}         	 Indicator for whether or not the string was found.
	 */
	this.stringContains = function(haystack, needle){
		if (haystack.indexOf(needle) !== -1) {
			return true;
		} else {
			return false;
		}
	};


	// ==== Get the height of a hidden element =================================================================================
	/**
	 * Quickly displays the hidden element and takes it out of context in order to grab its dimensions and then returns it back to the original form.
	 * 
	 * @param  {element} $element       Hidden DOM element.
	 * @param  {string} setCustomWidth Optional width string to set the object to before grabbing the dimentions.
	 * @return {number}                Element's height.
	 */
	this.getHiddenElementHeight = function(el, setCustomWidth){
		var initialStyles = {
			position: 	el.style.position,
			visibility: el.style.visibility,
			display: 	el.style.display,
			width: 	el.style.width
		};
		el.style.position = 'absolute';
		el.style.visibility = 'hidden';
		el.style.display = 'block';
		if (setCustomWidth) {
			el.style.width = setCustomWidth;
		}
		var height = el.offsetHeight;
		
		el.style.position = initialStyles.position;
		el.style.visibility = initialStyles.visibility;
		el.style.display = initialStyles.display;
		if (setCustomWidth) {
			el.style.width = initialStyles.width;
		}

		return height;
	};





	// ==== Clone Node safely (preserving values) =================================================================================
	this.cloneSafe = function(el, returnJquery){
		if (el.constructor === jQuery) {
			el = el[0];
		}
		var cloned, 
			type = el.nodeName;
		
		cloned = el.cloneNode(false);
		if (type === 'TEXTAREA' || type === 'SELECT') {
			cloned.value = el.value;
		}
		if (el.childNodes.length) {
			[].slice.call(el.childNodes).forEach(function(child){
				cloned.appendChild( util.cloneSafe(child) );
			});
		}
		return returnJquery ? jQuery(cloned) : cloned;
	};
	this.cloneNode = this.cloneSafe;




	// ==== Random Number Generator =================================================================================
	this.random = function(decimals){
		var multiplier;
		if (!decimals) {
			multiplier = 10000000;
		} else {
			multiplier = 10;
			for (var i = 1; i < decimals; i++) {
				multiplier = multiplier * 10;
			}
		}

		return Math.floor(Math.random() * multiplier);
	};



	// ==== Get Keycode =================================================================================
	/**
	 * Goes through a given event object and returns the keycode from the property that's supported by the browser.
	 * 
	 * @param  {object} event 					Event Object
	 * @param  {bool} 	returnKeyType			Optional argument to indicate what should be returned form the func.
	 * @return {number || string || bool}       The event's keycode.
	 */
	this.getKeycode = function(event, returnKeyType){
		var keyPressed, explicitKey = false;

		if (event.charCode !== undefined && event.charCode !== 0) {
			keyPressed = event.charCode;
		} else if (event.keyCode !== undefined && event.keyCode !== 0) {
			keyPressed = event.keyCode;
		} else if (event.which !== undefined && event.which !== 0) {
			keyPressed = event.which;
		} else {
			explicitKey = true;
			if (event.key !== undefined) {
				keyPressed = event.key;
			} else if (event.keyIdentifier !== undefined) {
				keyPressed = event.keyIdentifier;
			}
		}
		if (returnKeyType) {
			return explicitKey;
		} else {
			return keyPressed;
		}
	};
	// Alias
	this.getKeyCode = function(event, returnKeyType){ return util.getKeycode(event, returnKeyType); };



	// ==== Capitalize a set of words =================================================================================
	this.capitalize = function(string, delimiter){
		delimiter = delimiter || ' ';
		string = string.split(delimiter)

		string = string.map(function(word){
			return word[0].toUpperCase() + word.slice(1);
		});
		
		return string.join(' ');
	}




	// ==== RegEx =================================================================================
	this.regEx = {
		whiteSpace: /^\s+|\s+$/g,
		email: new RegExp(/^(("[\w-\s]+")|([\w-]+(?:\.[\w-]+)*)|("[\w-\s]+")([\w-]+(?:\.[\w-]+)*))(@((?:[\w-]+\.)*\w[\w-]{0,66})\.([a-z]{2,6}(?:\.[a-z]{2})?)$)|(@\[?((25[0-5]\.|2[0-4][0-9]\.|1[0-9]{2}\.|[0-9]{1,2}\.))((25[0-5]|2[0-4][0-9]|1[0-9]{2}|[0-9]{1,2})\.){2}(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[0-9]{1,2})\]?$)/i),
		phone: /^[\W\d\s\-\(\)]+$/,
		fullName: /\w+\s+\w+/
	};






























	/* ==========================================================================
	   Date Helpers
	   ========================================================================== */
	// this.date = {};
	// 	// ==== Months =================================================================================
	// 	this.date.getMonthArray = function(){
	// 		return ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];
	// 	};
	// 	this.date.getMonthShortArray = function(){
	// 		return ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
	// 	};
	// 	this.date.getMonthName = function(index){
	// 		if (typeof index !== 'number') var index = parseFloat(index) - 1;
	// 		var monthNames = util.date.getMonthArray();
	// 		return monthNames[index];
	// 	};
	// 	this.date.getMonthShortName = function(index){
	// 		if (typeof index !== 'number') var index = parseFloat(index) - 1;
	// 		var monthNames = util.date.getMonthShortArray();
	// 		return monthNames[index];
	// 	};
	// 	this.date.getMonthDaysLimit = function(index){
	// 		if (typeof index !== 'number') var index = parseFloat(index) - 1;
	// 		var monthDays = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
	// 		return monthDays[index];
	// 	};
		
	// 	// ==== Days =================================================================================
	// 	this.date.getDayArray = function(){
	// 		return ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'];
	// 	};
	// 	this.date.getDayShortArray = function(){
	// 		return ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'];
	// 	};
	// 	this.date.getDayName = function(index){
	// 		if (typeof index !== 'number') var index = parseFloat(index);
	// 		var dayNames = util.date.getDayArray();
	// 		return dayNames[index];
	// 	};
	// 	this.date.getDayShortName = function(index){
	// 		if (typeof index !== 'number') var index = parseFloat(index);
	// 		var dayNames = util.date.getDayShortArray();
	// 		return dayNames[index];
	// 	};


	// 	this.date.getWeekSegment = function(date, month){
	// 		var date = parseFloat(date),
	// 			index;
			
	// 		if (date <= 31)	index = '4';
	// 		if (date <= 21)	index = '3';
	// 		if (date <= 14)	index = '2';
	// 		if (date <= 7) 	index = '1';

	// 		if (month) {
	// 			var weekName = util.date.getMonthShortName(month) + ' ' + index;
	// 		} else {
	// 			var weekName = 'Week ' + index;
	// 		}
	// 		return weekName;
	// 	};

	// 	this.date.goBack = function(date, range){
	// 		var dateBreakdown = date.match(/(\d+)(?:-|\/| |\.)(\d+)(?:-|\/| |\.)(\d+)/),
	// 			day = dateBreakdown[3],
	// 			month = dateBreakdown[2],
	// 			year = dateBreakdown[1];

	// 		if (typeof range === 'number') {
	// 			day = parseFloat(day) - range;
	// 			if (day < 1) { // Check if day is 0 or lower, which indicates that we must go to the previous month.
	// 				day = util.date.getMonthDaysLimit(parseFloat(month) - 2) + day;
	// 				month = parseFloat(month) - 1;
	// 				if (month < 1) { // Check if month is 0 or lower, which indicates that we must go to the previous year.
	// 					month = 12;
	// 					year = parseFloat(year) - 1;
	// 				}
	// 			}
	// 		}
	// 		if (range === 'week') {
	// 			day = parseFloat(day) - 6;
	// 			if (day < 1) { // Check if day is 0 or lower, which indicates that we must go to the previous month.
	// 				day = util.date.getMonthDaysLimit(parseFloat(month) - 2) + day;
	// 				month = parseFloat(month) - 1;
	// 				if (month < 1) { // Check if month is 0 or lower, which indicates that we must go to the previous year.
	// 					month = 12;
	// 					year = parseFloat(year) - 1;
	// 				}
	// 			}
	// 		}
	// 		if (range === 'month') {
	// 			month = parseFloat(month) - 1;
	// 			if (month < 1) { // Check if month is 0 or lower, which indicates that we must go to the previous year.
	// 				month = 12;
	// 				year = parseFloat(year) - 1;
	// 			}
	// 		}
	// 		if (range === 'year') {
	// 			year = parseFloat(year) - 1;
	// 			month = parseFloat(month) + 1;
	// 			day = 1;
	// 		}

	// 		month = month.toString().length < 2 ? '0'+month : month;

	// 		return year +'-'+ month +'-'+ day;
	// 	};





}; var util = new Util(); var utils = util;



// ==== Log =================================================================================
function log() {
  try {
    console.log.apply( console, arguments );
  } catch(e) {
    try {
      opera.postError.apply( opera, arguments );
    } catch(e){
      alert( Array.prototype.join.call( arguments, " " ) );
    }
  }
}





;
/* ==========================================================================
   Input event polyfill
   ========================================================================== */
!function(e){function t(e){var t=e.nodeName.toUpperCase();return"TEXTAREA"===t||"INPUT"===t}function n(e){m={el:e,value:e.value},d=Object.getOwnPropertyDescriptor(e.constructor.prototype,"value"),Object.defineProperty(m.el,"value",p),m.el.attachEvent("onpropertychange",o)}function u(){m.el&&(delete m.el.value,m.el.detachEvent("onpropertychange",o),m={el:null,value:null},d=null)}function c(t){a?t.fireEvent("on"+e,i()):t.dispatchEvent(i())}function o(e){if("value"===e.propertyName){var t=e.srcElement.value;t!==m.value&&(m.value=t,c(m.el))}}function l(){m.el&&m.el.value!==m.value&&(m.value=m.el.value,c(m.el))}var a="undefined"==typeof document.dispatchEvent,r=document.createElement("input"),v="oninput"in r&&(!("documentMode"in document)||document.documentMode>9),i=function(){var t;return a?(t=document.createEventObject(),t.type="change",t.bubbles=!0,t.cancelable=!1):(t=document.createEvent("CustomEvent"),t.initCustomEvent(e,!0,!1,{})),t},d=null,p={get:function(){return d.get.call(this)},set:function(e){m.value=e,d.set.call(this,e)}},m={el:null,value:null};v?"input"!==e&&document.addEventListener("input",function(e){c(e.target)},!1):(document.attachEvent("onfocusin",function(e){t(e.srcElement)&&(u(),n(e.srcElement))}),document.attachEvent("onfocusout",function(){u()}),document.attachEvent("onselectionchange",l),document.attachEvent("onkeyup",l),document.attachEvent("onkeydown",l))}("input");


/* ==========================================================================
   Placeholder Polyfill
   ========================================================================== */
!function(e,t,l){function n(e){function t(){return i=h(e)}function l(){setTimeout(function(){var l=i,n=t();l!==n&&e.__placeholder&&(e.value=n),e.__placeholder&&e.value!==n&&(e.__placeholder=!1)},0)}function n(){e.value?c():a()}function a(){e.__placeholder||e.value||r()}function r(){e.__placeholder=!0,e.value=t(),d(e,"-placeholder")}function c(){e.__placeholder&&(e.__placeholder=!1,e.value="",p(e,"-placeholder"))}if(null!=e.__placeholder)return void(e.__placeholder&&(e.value=t()));var i=h(e);e.value?(e.__placeholder=!1,e.value===t()&&r()):a(),o(e,"keyup",n),o(e,"keyDown",n),o(e,"blur",n),o(e,"focus",c),o(e,"click",c),e.addEventListener?o(e,"DOMAttrModified",l):e.attachEvent&&"onpropertychange"in e&&o(e,"propertychange",l)}function a(){var e=[];return c(arguments,function(t){"number"!=typeof t.length&&(t=[t]),e.push.apply(e,i(t,r))}),e}function r(e){var t=(e.nodeName||"").toLowerCase();return"textarea"===t||"input"===t&&("text"===e.type||"password"===e.type)}function o(e,t,l){e.addEventListener?e.addEventListener(t,l,!1):e.attachEvent&&e.attachEvent("on"+t,l)}function c(e,t){if(e.forEach)return e.forEach(t);for(var l=0,n=e.length;n>l;l++)t.call(null,e[l],l,e)}function i(e,t){if(e.filter)return e.filter(t);for(var l=[],n=0,a=e.length;a>n;n++)t.call(null,e[n],n,e)&&l.push(e[n]);return l}function u(e){return y[e]||(y[e]=new RegExp("(^|\\s)+"+e+"(\\s|$)+","g")),y[e]}function d(e,t){e.className+=" "+t}function p(e,t){e.className=e.className.replace(u(t)," ")}function h(e){return e.getAttribute("placeholder")||e.attributes.placeholder&&e.attributes.placeholder.nodeValue}function f(){var e=t.styleSheets&&t.styleSheets[0];if(!e){var l=(t.head||t.getElementsByTagName("head")[0],t.createElement("style"));l.appendChild(t.createTextNode("")),t.head.appendChild(l),e=l.sheet}return e}if("placeholder"in t.createElement("input"))return t.placeholderPolyfill=function(){},void(t.placeholderPolyfill.active=!1);var s=t.getElementsByTagName("input"),v=t.getElementsByTagName("textarea");t.placeholderPolyfill=function(e){e=e?a(e):a(s,v),c(e,n)},t.placeholderPolyfill.active=!0,t.placeholderPolyfill(),t.addEventListener?(t.addEventListener("DOMAttrModified",t.placeholderPolyfill),t.addEventListener("DOMNodeInserted",t.placeholderPolyfill)):t.attachEvent&&"onpropertychange"in t&&t.attachEvent("onpropertychange",t.placeholderPolyfill),f().addRule(".-placeholder","color: #888;",0);var y={}}(window,document);





/* ==========================================================================
   Collections polyfill
   ========================================================================== */
(function(e){function f(a,c){function b(a){if(!this||this.constructor!==b)return new b(a);this._keys=[];this._values=[];this._itp=[];this.objectOnly=c;a&&v.call(this,a)}c||w(a,"size",{get:x});a.constructor=b;b.prototype=a;return b}function v(a){this.add?a.forEach(this.add,this):a.forEach(function(a){this.set(a[0],a[1])},this)}function d(a){this.has(a)&&(this._keys.splice(b,1),this._values.splice(b,1),this._itp.forEach(function(a){b<a[0]&&a[0]--}));return-1<b}function m(a){return this.has(a)?this._values[b]:void 0}function n(a,c){if(this.objectOnly&&c!==Object(c))throw new TypeError("Invalid value used as weak collection key");if(c!=c||0===c)for(b=a.length;b--&&!y(a[b],c););else b=a.indexOf(c);return-1<b}function p(a){return n.call(this,this._values,a)}function q(a){return n.call(this,this._keys,a)}function r(a,c){this.has(a)?this._values[b]=c:this._values[this._keys.push(a)-1]=c;return this}function t(a){this.has(a)||this._values.push(a);return this}function h(){(this._keys||0).length=this._values.length=0}function z(){return k(this._itp,this._keys)}function l(){return k(this._itp,this._values)}function A(){return k(this._itp,this._keys,this._values)}function B(){return k(this._itp,this._values,this._values)}function k(a,c,b){var g=[0],e=!1;a.push(g);return{next:function(){var f,d=g[0];!e&&d<c.length?(f=b?[c[d],b[d]]:c[d],g[0]++):(e=!0,a.splice(a.indexOf(g),1));return{done:e,value:f}}}}function x(){return this._values.length}function u(a,c){for(var b=this.entries();;){var d=b.next();if(d.done)break;a.call(c,d.value[1],d.value[0],this)}}var b,w=Object.defineProperty,y=function(a,b){return isNaN(a)?isNaN(b):a===b};"undefined"==typeof WeakMap&&(e.WeakMap=f({"delete":d,clear:h,get:m,has:q,set:r},!0));"undefined"!=typeof Map&&"function"===typeof(new Map).values&&(new Map).values().next||(e.Map=f({"delete":d,has:q,get:m,set:r,keys:z,values:l,entries:A,forEach:u,clear:h}));"undefined"!=typeof Set&&"function"===typeof(new Set).values&&(new Set).values().next||(e.Set=f({has:p,add:t,"delete":d,clear:h,keys:l,values:l,entries:B,forEach:u}));"undefined"==typeof WeakSet&&(e.WeakSet=f({"delete":d,add:t,clear:h,has:p},!0))})("undefined"!=typeof exports&&"undefined"!=typeof global?global:window);




/* ==========================================================================
   Array.find()
   ========================================================================== */
if (!Array.prototype.find) {
	Array.prototype.find = function (callback, thisArg) {
		var val;
		this.forEach(function (elmVal, i, arr) {
			if (callback.call(thisArg, elmVal, i, arr)) {if (!val) val=elmVal;}
		});
		return val;
	};
}




/* ==========================================================================
   Array.findIndex()
   ========================================================================== */
// if (!Array.prototype.findIndex) {
//   Array.prototype.findIndex = function(predicate) {
//     if (this === null) {
//       throw new TypeError('Array.prototype.findIndex called on null or undefined');
//     }
//     if (typeof predicate !== 'function') {
//       throw new TypeError('predicate must be a function');
//     }
//     var list = Object(this),
//       length = list.length >>> 0;
//       thisArg = arguments[1];
//       value;

//     for (var i = 0; i < length; i++) {
//       value = list[i];
//       if (predicate.call(thisArg, value, i, list)) {
//         return i;
//       }
//     }
//     return -1;
//   };
// }



/* ==========================================================================
   Array.isArray()
   ========================================================================== */
if (!Array.prototype.isArray) {
	Array.prototype.isArray = function(arg) {
		return Object.prototype.toString.call(arg) === '[object Array]';
	};
}


/* ==========================================================================
   Array.includes()
   ========================================================================== */
if (!Array.prototype.includes) {
	Array.prototype.includes = function(searchElement) {return this.indexOf(searchElement);};
}



/* ==========================================================================
   Array.forEach()
   ========================================================================== */
if (!Array.prototype.forEach) {
	Array.prototype.forEach = function (fn, arg) {
		var arr = this,
			len = arr.length,
			thisArg = arg ? arg : undefined,
			i;
		for (i = 0; i < len; i += 1) {
			if (arr.hasOwnProperty(i)) {
				fn.call(thisArg, arr[i], i, arr);
			}
		}
		return undefined;
	};
}



/* ==========================================================================
   Array.from()
   ========================================================================== */
if (!Array.prototype.from) {
    Array.prototype.from = function (object){return [].slice.call(object);};
}








/* ==========================================================================
   String.includes()
   ========================================================================== */
if (!String.prototype.includes) {
	String.prototype.includes = function(str, start) {
		return String.prototype.indexOf(str, start||0) !== -1;
	};
}



/* ==========================================================================
   String.endsWith()
   ========================================================================== */
if (!String.prototype.endsWith) {
	String.prototype.endsWith = function(str) {
		return this.indexOf(str, this.length - str.length) !== -1;
	};
}


/* ==========================================================================
   String.startsWith()
   ========================================================================== */
if (!String.prototype.startsWith) {
	String.prototype.startsWith = function(str, pos) {
		return this.indexOf(str, pos||0) === 0;
	};
}



/* ==========================================================================
   String.repeat()
   ========================================================================== */
if (!String.prototype.repeat) {
	String.prototype.repeat = function(n) {
		var rpt = '', i;
		for (i = 0; i < n; i++) {
			rpt += str;
		}
		return rpt;
	}
}



/* ==========================================================================
   ClassList polyfill
   ========================================================================== */
(function () {
	if (typeof window.Element === "undefined" || "classList" in document.documentElement) return;

	var prototype = Array.prototype,
			push = prototype.push,
			splice = prototype.splice,
			join = prototype.join;

	function DOMTokenList(el) {
		this.el = el;
		// The className needs to be trimmed and split on whitespace
		// to retrieve a list of classes.
		var classes = el.className.replace(/^\s+|\s+$/g,'').split(/\s+/);
		for (var i = 0; i < classes.length; i++) {
			push.call(this, classes[i]);
		}
	};

	DOMTokenList.prototype = {
		add: function(token) {
			if(this.contains(token)) return;
			push.call(this, token);
			this.el.className = this.toString();
		},
		contains: function(token) {
			return this.el.className.indexOf(token) != -1;
		},
		item: function(index) {
			return this[index] || null;
		},
		remove: function(token) {
			if (!this.contains(token)) return;
			for (var i = 0; i < this.length; i++) {
				if (this[i] == token) break;
			}
			splice.call(this, i, 1);
			this.el.className = this.toString();
		},
		toString: function() {
			return join.call(this, ' ');
		},
		toggle: function(token) {
			if (!this.contains(token)) {
				this.add(token);
			} else {
				this.remove(token);
			}

			return this.contains(token);
		}
	};

	window.DOMTokenList = DOMTokenList;

	function defineElementGetter (obj, prop, getter) {
			if (Object.defineProperty) {
					Object.defineProperty(obj, prop,{
							get : getter
					});
			} else {
					obj.__defineGetter__(prop, getter);
			}
	}

	defineElementGetter(Element.prototype, 'classList', function () {
		return new DOMTokenList(this);
	});
})();






/* ==========================================================================
   Promises
   ========================================================================== */
if (!Promise) {
  	window.Promise = function(e){
    	"use strict";
    	if(!(this instanceof Promise)){throw new TypeError('Constructor Promise requires "new"')}if(this&&this._promise){throw new TypeError("Bad construction")}if(!oe.IsCallable(e)){throw new TypeError("not a valid resolver")}var t=ie(this,Promise,w,{_promise:{result:void 0,state:s,fulfillReactions:[],rejectReactions:[]}});var r=g(t);var n=r.reject;try{e(r.resolve,n)}catch(o){n(o)}return t
	};
};
// Generated by CoffeeScript 1.10.0
(function() {
  (function($) {
    var $window, Field, defaultFns, defaultOptions, fixWidth, messages, regEx, textChangeEvent;
    $window = $(window);
    textChangeEvent = 'input';
    messages = {
      'error': '<div class="results-message error">An unknown error has occured on the server, please contact customer support for help.</div>',
      'loading': '<div class="loading"><div class="loading-title">Processing your information...</div><div class="loading-gif"></div></div>'
    };
    defaultOptions = {
      'submitUrl': '/ajax',
      'stepClosedHeight': 39,
      'heightTransitions': false,
      'validateOnTyping': false,
      'preserveValuesAfterRefresh': true,
      'hasLoadingStep': true,
      'forceAjaxSubmit': false,
      'submitOnEnter': true,
      'dontDisableFields': false,
      'uniqueSteps': false,
      'customTransition': false,
      'customNext': false,
      'customBack': false,
      'customSubmit': false,
      'callbackOnPrepare': function() {},
      'callbackOnResults': function() {},
      'callbackOnValidate': function() {},
      'callbackOnNextStep': function() {},
      'callbackOnBackStep': function() {},
      'callbackOnEventAttachment': function() {}
    };
    window.Form = function($formEl, options) {
      this.options = $.extend(defaultOptions, options);
      this.window = $window;
      this.skippedAStep = false;
      this.disabled = false;
      this.step = {
        'current': null,
        'prev': null,
        'next': null
      };
      this.action = $formEl.data('action');
      if (this.action) {
        this.form = $formEl;
      } else {
        this.form = $formEl.find('form').first();
        this.action = this.form.data('action');
        if (!this.action) {
          this.form = $formEl;
        }
      }
      this.fields = [];
      this.fieldsByName = {};
      this.fieldsRequired = [];
      this.fieldsInSteps = [];
      this.stepIndexOffset = this.form.find('.step').first().index();
      if (this.stepIndexOffset < 0) {
        this.stepIndexOffset = 0;
      }
      this.resultsPlaceholder = this.form.find('.results');
      this.multiStep = this.form.find('.step').length > 1;
      this.focused_atleast_once = false;
      if (!this.form.data('Form')) {
        this.form.data('Form', this);
      }
      this.Prepare(true);
      if (this.options.heightTransitions && this.multiStep) {
        this.manageStepHeight(this.options.stepClosedHeight);
      }
      return this;
    };
    Field = function($field, formInstance, customFns) {
      var customMethod, instance, method, name, ref, ref1;
      if (customFns == null) {
        customFns = {};
      }
      $field.data('Field', this);
      instance = this;
      this.form = formInstance;
      this.step = $field.parents('.step').first();
      this.field = $field;
      this.input = this.field.find('.input');
      this.type = this.field.data('type');
      this.name = this.field.data('realname');
      this.nameReal = this.field.data('name');
      this.pattern = this.field.data('pattern');
      this.pattern = this.pattern ? new RegExp(this.pattern) : void 0;
      this.forcePattern = this.field.data('force_pattern');
      this.forceLive = this.field.data('force_live');
      this.comments = this.field.data('comments');
      this.desc = this.field.data('description');
      this.errorMsg = this.field.data('error');
      this["default"] = this.field.data('default_value');
      this.required = this.field.data('required') === '1' || this.field.data('required') === 1;
      this.minimum = this.field.data('minimum');
      this.maximum = this.field.data('maximum');
      this.collapsed = !!this.field.data('collapsed');
      this.disabled = this.field.data('disabled_forever') === '1' || false;
      this.disabledForever = this.disabled;
      this.height = this.field.data('height');
      this.dependsOn = this.field.data('depends_on');
      this.conditionScope = this.field.data('condition_scope');
      this.comparison = this.field.data('comparison') || '=';
      this.condition = this.field.data('condition');
      this.revealed = false;
      this.value = this["default"] || null;
      this.valid = false;
      if (this.disabled) {
        this.disable();
      }
      switch (this.forcePattern) {
        case 'slug':
          this.forceSpecial = true;
          break;
        case 'name':
          this.forceSpecial = true;
          break;
        case 'lower':
          this.forceSpecial = true;
          break;
        case 'upper':
          this.forceSpecial = true;
          break;
        default:
          this.forcePattern = new RegExp(this.forcePattern);
      }
      ref = Form.prototype.fieldProtos[this.type];
      for (name in ref) {
        method = ref[name];
        this[name] = method;
      }
      if (customFns[this.type] != null) {
        ref1 = customFns[this.type];
        for (name in ref1) {
          customMethod = ref1[name];
          this[name] = customMethod;
        }
      }
      this.prepare();
      if (this.dependsOn) {
        setTimeout(this.prepareConditional.bind(this), 0);
      }
      return this;
    };
    Form.prototype.Field = Field;
    regEx = {
      'slug': /^[a-z0-9-]+$/,
      'name': /^[a-z0-9_]+$/,
      'lower': /^[a-z]+$/,
      'upper': /^[A-Z]+$/
    };
    defaultFns = {
      'prepare': {
        input: function() {
          this.input.on("change " + textChangeEvent + " blur", (function(_this) {
            return function() {
              return _this.field.trigger('value_changed');
            };
          })(this));
          if (!!this.form.options.preserveValuesAfterRefresh) {
            this.value = this.input[0].value.replace(util.regEx.whiteSpace, '');
          } else {
            if (!this["default"]) {
              this.value = '';
            }
          }
          this.input.val(this.value);
          if (this.value) {
            this.makeFilled();
          }
          this.attachState();
          if (this.height != null) {
            this.input.css('height', this.height);
          }
          if (this.desc) {
            this.field.addClass('has_desc');
          }
          if (this.required) {
            this.attachValidation();
            if (this.test()) {
              return this.makeValid();
            } else {
              return this.makeInvalid();
            }
          } else {
            return this.makeValid();
          }
        },
        button: function() {
          var $checkedInputs, fieldInstance, values;
          fieldInstance = this;
          this.input = this.field.find('.input-button');
          this.input.on("click", (function(_this) {
            return function(event) {
              return _this.field.trigger('value_changed', $(event.target));
            };
          })(this));
          if (!!this.form.options.preserveValuesAfterRefresh) {
            $checkedInputs = this.field.find('[checked]');
            if ($checkedInputs.length === 0) {
              $checkedInputs = this.field.find(':checked');
            }
            if (this.type === 'radio') {
              $checkedInputs.each((function(_this) {
                return function(i, el) {
                  _this.value = el.value;
                  return _this.checkOn($(el).parents('.input-button'));
                };
              })(this));
            } else if (this.type === 'checkbox_single') {
              this.value = $checkedInputs ? true : false;
              if (this.value) {
                this.checkOn(this.input);
              }
            } else {
              values = [];
              $checkedInputs.each((function(_this) {
                return function(i, el) {
                  values.push(_this.value);
                  return _this.checkOn($(el).parents('.input-button'));
                };
              })(this));
              this.value = values;
            }
          } else {
            if (this["default"]) {
              values = this.value.split(/,\s?/);
              if (values.length) {
                this.input.each((function(_this) {
                  return function(i, el) {
                    if (values.includes($(el).find('.input').value)) {
                      return _this.checkOn($(el));
                    }
                  };
                })(this));
              }
            } else {
              this.value = this.type === 'radio' ? null : this.type === 'checkbox_single' ? false : [];
              this.input.each((function(_this) {
                return function(i, el) {
                  return _this.checkOff($(el));
                };
              })(this));
            }
          }
          if (this.type === 'radio' || this.type === 'checkbox_single') {
            if (this.value) {
              this.makeFilled();
            }
          } else {
            if (this.value.length) {
              this.makeFilled();
            }
          }
          if (this.height != null) {
            this.input.css('height', this.height);
          }
          if (this.desc) {
            this.field.addClass('has_desc');
          }
          this.attachState();
          if (this.required) {
            this.attachValidation();
            if (this.test()) {
              return this.makeValid();
            } else {
              return this.makeInvalid();
            }
          } else {
            return this.makeValid();
          }
        }
      },
      'prepareConditional': {
        input: function() {
          var $context;
          $context = (function() {
            switch (this.conditionScope) {
              case 'form':
                return this.form.form;
              case 'step':
                return this.step;
              case 'repeater':
                return this.field.parents('.repeater-items').first();
              case 'sibling':
                return this.field.parent();
              default:
                return this.form.form;
            }
          }).call(this);
          this.masterField = $context.find('[data-realname*="' + this.dependsOn + '"]').first();
          this.masterInstance = this.masterField.data('Field');
          this.disable();
          this.masterField.on('value_changed', (function(_this) {
            return function(i, el) {
              var conditions, hasValid, isValid;
              if (_this.condition) {
                conditions = _this.condition.split(/,\s?/);
                hasValid = false;
                conditions.forEach(function(condition) {
                  if (!hasValid) {
                    return hasValid = _this.masterInstance.value === condition;
                  }
                });
                isValid = hasValid;
              } else {
                isValid = _this.masterInstance.test();
              }
              if (_this.comparison !== '=') {
                isValid = !isValid;
              }
              if (isValid) {
                _this.field.addClass('reveal_dependant').trigger('reveal_dependant');
                _this.makeRequired();
                _this.enable();
                _this.revealed = true;
              } else {
                _this.field.removeClass('reveal_dependant').trigger('hide_dependant');
                _this.makeNotRequired();
                _this.disable();
                _this.revealed = false;
              }
              return setTimeout(function() {
                return _this.step.trigger('height_changed');
              }, 300);
            };
          })(this));
          return this.masterField.trigger('value_changed');
        }
      },
      'attachValidation': {
        input: function() {
          return this.field.on('value_changed', (function(_this) {
            return function() {
              if (_this.test()) {
                _this.makeValid();
              } else {
                _this.makeInvalid();
              }
              return _this.form.form.trigger('field_filled');
            };
          })(this));
        },
        button: function() {
          return this.field.on('value_changed', (function(_this) {
            return function(event, $button) {
              if ($button.constructor !== jQuery) {
                $button = $($button);
              }
              if (!$button.hasClass('checked')) {
                _this.makeValid();
              } else if (!$button.siblings().hasClass('checked')) {
                _this.makeInvalid();
              } else {
                _this.makeValid();
              }
              return _this.form.form.trigger('field_filled');
            };
          })(this));
        }
      },
      'attachState': {
        input: function() {
          if (!(!this.form.options.submitOnEnter || this.type === 'textarea')) {
            this.input.on('focus', (function(_this) {
              return function() {
                _this.field.addClass('focus');
                return $window.on('keypress.field_focused', function(event) {
                  if (event.which === 13) {
                    return _this.form.form.trigger('submit_current_step');
                  }
                });
              };
            })(this));
            this.input.on('blur', (function(_this) {
              return function() {
                _this.field.removeClass('focus');
                return $window.off('keypress.field_focused');
              };
            })(this));
          }
          if (this.forcePattern) {
            if (this.forceSpecial) {
              this.input.on('change', (function(_this) {
                return function(event) {
                  var value;
                  value = _this.input[0].value;
                  if (!regEx[_this.forcePattern].test(value)) {
                    switch (_this.forcePattern) {
                      case 'slug':
                        value = value.replace(/\s/g, '-').toLowerCase();
                        break;
                      case 'name':
                        value = value.replace(/\s/g, '_').toLowerCase();
                        break;
                      case 'lower':
                        value = value.toLowerCase();
                        break;
                      case 'upper':
                        value = value.toUpperCase();
                    }
                  }
                  _this.input[0].value = value;
                  return _this.value = value;
                };
              })(this));
            }
          }
          return this.field.on('value_changed', (function(_this) {
            return function() {
              _this.value = _this.input[0].value;
              if (_this.value) {
                return _this.makeFilled();
              } else {
                return _this.makeNotFilled();
              }
            };
          })(this));
        },
        button: function() {
          this.field.on('value_changed', (function(_this) {
            return function(event, $button) {
              var buttonValue;
              if ($button) {
                if ($button.constructor !== jQuery) {
                  $button = $($button);
                }
                buttonValue = $button.find('input').val();
                if (!$button.hasClass('checked')) {
                  _this.checkOn($button);
                  if (_this.type === 'checkbox_single') {
                    _this.value = true;
                  } else {
                    _this.value.push(buttonValue);
                  }
                } else {
                  _this.checkOff($button);
                  if (_this.type === 'checkbox_single') {
                    _this.value = false;
                  } else {
                    _this.value.splice(_this.value.indexOf(buttonValue), 1);
                  }
                }
                if (_this.value.length) {
                  return _this.makeFilled();
                } else {
                  return _this.makeNotFilled();
                }
              }
            };
          })(this));
          return this.field.find('label').on('click', function(event) {
            event.preventDefault();
            return $(this).parents('.input-button').trigger('click');
          });
        }
      },
      'detach': {
        input: function() {
          this.field.off();
          return this.input.off();
        },
        button: function() {
          this.field.off();
          this.input.off();
          return this.input.find('label').off();
        }
      },
      'disable': {
        input: function() {
          this.input.prop('disabled', true);
          return this.disabled = true;
        },
        button: function() {
          return this.disabled = true;
        }
      },
      'enable': {
        input: function() {
          this.input.prop('disabled', false);
          return this.disabled = false;
        },
        button: function() {
          return this.disabled = false;
        }
      },
      showError: function() {
        return this.field.addClass('error');
      },
      hideError: function() {
        return this.field.removeClass('error');
      },
      checkOn: function($button) {
        var $input;
        $button.addClass('checked');
        $input = $button.find('.input');
        if ($input.length) {
          $input[0].checked = true;
        }
        if ((this.type != null) && this.type === 'radio') {
          return this.checkOff($button.siblings());
        }
      },
      checkOff: function($button) {
        var $input;
        $button.removeClass('checked');
        $input = $button.find('.input');
        if ($input.length) {
          return $input[0].checked = false;
        }
      },
      makeValid: function() {
        this.field.addClass('valid').removeClass('invalid error show_error_msg');
        return this.valid = true;
      },
      makeInvalid: function(error) {
        var classesToAdd;
        classesToAdd = error ? 'invalid error' : 'invalid';
        this.field.addClass(classesToAdd).removeClass('valid');
        this.valid = false;
        if (this.errorMsg && error) {
          return this.field.addClass('show_error_msg');
        }
      },
      makeFilled: function() {
        return this.field.addClass('filled animate');
      },
      makeNotFilled: function() {
        return this.field.removeClass('filled animate');
      },
      makeRequired: function() {
        this.required = true;
        this.field.addClass('required');
        if (this.form.fieldsRequired.indexOf(this) !== -1) {
          return this.form.fieldsRequired.push(this);
        }
      },
      makeNotRequired: function() {
        this.required = false;
        this.field.removeClass('required');
        if (this.form.fieldsRequired.indexOf(this) !== -1) {
          return this.form.fieldsRequired.splice(this.form.fieldsRequired.indexOf(this), 1);
        }
      },
      'fetchValue': {
        input: function() {
          if (!this.value || typeof this.value === 'boolean') {
            return this.value;
          }
          if (this.value.toLowerCase() === 'true') {
            return true;
          } else if (this.value.toUpperCase() === 'false') {
            return false;
          } else {
            return this.value;
          }
        },
        button: function() {
          return this.value;
        }
      },
      'setValue': {
        input: function(value) {
          if (!(value == null)) {
            this.value = value;
          }
          this.input[0].value = value;
          if (value) {
            this.makeFilled();
            if (this.test()) {
              this.makeValid();
            } else {
              this.makeInvalid();
            }
          }
          return this.input.trigger('change');
        },
        button: function(value) {
          if (this.type === 'checkbox_single') {
            if (value) {
              this.value = true;
              this.checkOn(this.input);
              this.makeFilled();
              return this.makeValid();
            } else {
              this.value = false;
              return this.checkOff(this.input);
            }
          } else {
            if (!Array.isArray(value)) {
              value = [value];
            }
            this.value = value;
            value.forEach((function(_this) {
              return function(subValue) {
                var $matchedButton, $matchedInput;
                $matchedInput = _this.field.find("input[value='" + subValue + "']");
                if ($matchedInput.length) {
                  $matchedButton = $matchedInput.parents('.input-button').first();
                  return checkOn($matchedButton);
                } else {
                  return _this.value.splice(_this.value.indexOf(subValue), 1);
                }
              };
            })(this));
            if (this.value.length) {
              this.makeFilled();
              if (this.test()) {
                return this.makeValid();
              }
            }
          }
        }
      },
      'empty': {
        input: function() {
          this.field.removeClass('filled valid error blur focus');
          this.value = '';
          return this.input.val(this.value);
        },
        button: function() {
          this.field.removeClass('filled valid error blur focus');
          this.value = this.type === 'radio' ? '' : this.type === 'checkbox_single' ? false : [];
          return this.input.filter(function() {
            return $(this).hasClass('checked');
          }).each((function(_this) {
            return function(i, el) {
              return _this.checkOff($(el));
            };
          })(this));
        }
      },
      'test': {
        input: function() {
          var inputValue, passesTest, ref;
          inputValue = typeof this.input[0].value === 'boolean' ? this.input[0].value : (ref = this.input[0].value) != null ? ref.replace(util.regEx.whiteSpace, '') : void 0;
          passesTest = this.pattern ? this.pattern.test(inputValue) : inputValue;
          if (this.value !== inputValue) {
            this.value = inputValue;
          }
          if (this.disabledForever) {
            passesTest = true;
          }
          if (passesTest) {
            return true;
          } else {
            return false;
          }
        },
        button: function() {
          if (this.field.find('[checked]').length) {
            return true;
          } else {
            if (this.field.find(':checked').length) {
              return true;
            } else {
              if (this.type === 'radio' && (this.value != null)) {
                return true;
              } else {
                return false;
              }
            }
          }
        }
      }
    };
    Form.prototype.fieldProtos = {
      'text': {
        prepare: defaultFns.prepare.input,
        prepareConditional: defaultFns.prepareConditional.input,
        attachValidation: defaultFns.attachValidation.input,
        attachState: defaultFns.attachState.input,
        detach: defaultFns.detach.input,
        disable: defaultFns.disable.input,
        enable: defaultFns.enable.input,
        showError: defaultFns.showError,
        hideError: defaultFns.hideError,
        makeValid: defaultFns.makeValid,
        makeInvalid: defaultFns.makeInvalid,
        makeFilled: defaultFns.makeFilled,
        makeNotFilled: defaultFns.makeNotFilled,
        makeRequired: defaultFns.makeRequired,
        makeNotRequired: defaultFns.makeNotRequired,
        fetchValue: defaultFns.fetchValue.input,
        setValue: defaultFns.setValue.input,
        empty: defaultFns.empty.input,
        test: defaultFns.test.input
      },
      'full_name': {
        prepare: defaultFns.prepare.input,
        prepareConditional: defaultFns.prepareConditional.input,
        attachValidation: defaultFns.attachValidation.input,
        attachState: defaultFns.attachState.input,
        detach: defaultFns.detach.input,
        disable: defaultFns.disable.input,
        enable: defaultFns.enable.input,
        showError: defaultFns.showError,
        hideError: defaultFns.hideError,
        makeValid: defaultFns.makeValid,
        makeInvalid: defaultFns.makeInvalid,
        makeFilled: defaultFns.makeFilled,
        makeNotFilled: defaultFns.makeNotFilled,
        makeRequired: defaultFns.makeRequired,
        makeNotRequired: defaultFns.makeNotRequired,
        fetchValue: defaultFns.fetchValue.button,
        setValue: defaultFns.setValue.button,
        empty: defaultFns.empty.input,
        test: function() {
          var inputValue, passesTest, ref;
          inputValue = (ref = this.input[0].value) != null ? ref.replace(util.regEx.whiteSpace, '') : void 0;
          if (this.value !== inputValue) {
            this.value = inputValue;
          }
          if (this.disabledForever) {
            passesTest = true;
          }
          return inputValue !== '' && util.regEx.fullName.test(inputValue);
        }
      },
      'password': {
        prepare: defaultFns.prepare.input,
        prepareConditional: defaultFns.prepareConditional.input,
        attachValidation: defaultFns.attachValidation.input,
        attachState: defaultFns.attachState.input,
        detach: defaultFns.detach.input,
        disable: defaultFns.disable.input,
        enable: defaultFns.enable.input,
        showError: defaultFns.showError,
        hideError: defaultFns.hideError,
        makeValid: defaultFns.makeValid,
        makeInvalid: defaultFns.makeInvalid,
        makeFilled: defaultFns.makeFilled,
        makeNotFilled: defaultFns.makeNotFilled,
        makeRequired: defaultFns.makeRequired,
        makeNotRequired: defaultFns.makeNotRequired,
        fetchValue: defaultFns.fetchValue.button,
        setValue: defaultFns.setValue.button,
        empty: defaultFns.empty.input,
        test: function() {
          var $passwordOrig, inputValue, passesTest, passwordOrigValue, ref;
          inputValue = (ref = this.input[0].value) != null ? ref.replace(util.regEx.whiteSpace, '') : void 0;
          passesTest = inputValue;
          if (this.value !== inputValue) {
            this.value = inputValue;
          }
          if (this.name.includes('password_confirm')) {
            $passwordOrig = this.form.form.find('.fieldset.fieldtype_password');
            passwordOrigValue = $passwordOrig.find('input').val();
            passesTest = inputValue === passwordOrigValue;
          }
          return passesTest;
        }
      },
      'email': {
        prepare: defaultFns.prepare.input,
        prepareConditional: defaultFns.prepareConditional.input,
        attachValidation: defaultFns.attachValidation.input,
        attachState: defaultFns.attachState.input,
        detach: defaultFns.detach.input,
        disable: defaultFns.disable.input,
        enable: defaultFns.enable.input,
        showError: defaultFns.showError,
        hideError: defaultFns.hideError,
        makeValid: defaultFns.makeValid,
        makeInvalid: defaultFns.makeInvalid,
        makeFilled: defaultFns.makeFilled,
        makeNotFilled: defaultFns.makeNotFilled,
        makeRequired: defaultFns.makeRequired,
        makeNotRequired: defaultFns.makeNotRequired,
        fetchValue: defaultFns.fetchValue.button,
        setValue: defaultFns.setValue.button,
        empty: defaultFns.empty.input,
        test: function() {
          var inputValue, passesTest, ref;
          inputValue = (ref = this.input[0].value) != null ? ref.replace(util.regEx.whiteSpace, '') : void 0;
          if (this.value !== inputValue) {
            this.value = inputValue;
          }
          if (this.disabledForever) {
            passesTest = true;
          }
          return inputValue && util.regEx.email.test(inputValue);
        }
      },
      'tel': {
        prepare: defaultFns.prepare.input,
        prepareConditional: defaultFns.prepareConditional.input,
        attachValidation: defaultFns.attachValidation.input,
        attachState: defaultFns.attachState.input,
        detach: defaultFns.detach.input,
        disable: defaultFns.disable.input,
        enable: defaultFns.enable.input,
        showError: defaultFns.showError,
        hideError: defaultFns.hideError,
        makeValid: defaultFns.makeValid,
        makeInvalid: defaultFns.makeInvalid,
        makeFilled: defaultFns.makeFilled,
        makeNotFilled: defaultFns.makeNotFilled,
        makeRequired: defaultFns.makeRequired,
        makeNotRequired: defaultFns.makeNotRequired,
        fetchValue: defaultFns.fetchValue.button,
        setValue: defaultFns.setValue.button,
        empty: defaultFns.empty.input,
        test: function() {
          var inputValue, passesTest, ref;
          inputValue = (ref = this.input[0].value) != null ? ref.replace(util.regEx.whiteSpace, '') : void 0;
          if (this.value !== inputValue) {
            this.value = inputValue;
          }
          if (this.disabledForever) {
            passesTest = true;
          }
          return inputValue && inputValue.length >= 7 && util.regEx.phone.test(inputValue);
        }
      },
      'textarea': {
        prepare: defaultFns.prepare.input,
        prepareConditional: defaultFns.prepareConditional.input,
        attachValidation: defaultFns.attachValidation.input,
        attachState: defaultFns.attachState.input,
        detach: defaultFns.detach.input,
        disable: defaultFns.disable.input,
        enable: defaultFns.enable.input,
        showError: defaultFns.showError,
        hideError: defaultFns.hideError,
        makeValid: defaultFns.makeValid,
        makeInvalid: defaultFns.makeInvalid,
        makeFilled: defaultFns.makeFilled,
        makeNotFilled: defaultFns.makeNotFilled,
        makeRequired: defaultFns.makeRequired,
        makeNotRequired: defaultFns.makeNotRequired,
        fetchValue: defaultFns.fetchValue.input,
        setValue: defaultFns.setValue.input,
        empty: defaultFns.empty.input,
        test: defaultFns.test.input
      },
      'select': {
        prepare: function() {
          var setPseudoInputValue;
          if (!!this.form.options.preserveValuesAfterRefresh) {
            this.value = this.input[0].value;
          } else {
            if (!this["default"]) {
              this.value = '';
            }
          }
          this.input.val(this.value);
          if (this.value) {
            this.makeFilled();
          }
          this.input.on("change keypress blur", (function(_this) {
            return function() {
              return _this.field.trigger('value_changed');
            };
          })(this));
          if (this.height != null) {
            this.input.css('height', this.height);
          }
          this.attachState();
          if (this.required) {
            this.attachValidation();
            if (this.test()) {
              this.makeValid();
            } else {
              this.makeInvalid();
            }
          } else {
            this.makeValid();
          }
          setPseudoInputValue = (function(_this) {
            return function() {
              var $pseudoInput, inputValue, ref;
              $pseudoInput = _this.input.next();
              inputValue = (ref = _this.input.children('option:selected')[0]) != null ? ref.innerHTML : void 0;
              return $pseudoInput.html(inputValue);
            };
          })(this);
          setPseudoInputValue();
          return this.input.on('change keyup blur', (function(_this) {
            return function() {
              setPseudoInputValue();
              return _this.input.children(':selected').attr('selected', '').siblings().removeAttr('selected');
            };
          })(this));
        },
        prepareConditional: defaultFns.prepareConditional.input,
        attachValidation: defaultFns.attachValidation.input,
        attachState: defaultFns.attachState.input,
        detach: defaultFns.detach.input,
        disable: defaultFns.disable.input,
        enable: defaultFns.enable.input,
        showError: defaultFns.showError,
        hideError: defaultFns.hideError,
        makeValid: defaultFns.makeValid,
        makeInvalid: defaultFns.makeInvalid,
        makeFilled: defaultFns.makeFilled,
        makeNotFilled: defaultFns.makeNotFilled,
        makeRequired: defaultFns.makeRequired,
        makeNotRequired: defaultFns.makeNotRequired,
        fetchValue: defaultFns.fetchValue.input,
        setValue: defaultFns.setValue.input,
        empty: defaultFns.empty.input,
        test: defaultFns.test.input
      },
      'file': {
        prepare: function() {
          this.input.on("change " + textChangeEvent + " blur", (function(_this) {
            return function() {
              return _this.field.trigger('value_changed');
            };
          })(this));
          this.preview = this.field.find('.file-preview');
          this.value = this["default"] || null;
          this.base64 = this.value;
          if (this.value) {
            this.makeFilled();
          }
          this.attachState();
          this.input.trigger('change');
          if (this.height != null) {
            this.input.css('height', this.height);
          }
          if (this.desc) {
            this.field.addClass('has_desc');
          }
          if (this.required) {
            this.attachValidation();
            if (this.test()) {
              return this.makeValid();
            } else {
              return this.makeInvalid();
            }
          } else {
            return this.makeValid();
          }
        },
        prepareConditional: defaultFns.prepareConditional.input,
        attachValidation: defaultFns.attachValidation.input,
        attachState: function() {
          return this.field.add(this.input).on('value_changed change', (function(_this) {
            return function() {
              var uploadedFile;
              _this.value = _this.input[0].value;
              if (_this.value) {
                _this.makeFilled();
              } else {
                _this.makeNotFilled();
              }
              uploadedFile = _this.input[0].files[0];
              if (!uploadedFile) {
                return;
              }
              return _this.checkDimensions(uploadedFile).then(function() {
                var fileReader;
                fileReader = new FileReader();
                fileReader.onload = function() {
                  _this.base64 = fileReader.result;
                  if (_this.preview.length) {
                    return _this.preview.addClass('show').html("<img src=\"" + _this.base64 + "\">");
                  }
                };
                if (uploadedFile) {
                  return fileReader.readAsDataURL(uploadedFile);
                }
              }, function(reason) {
                if (reason === 'max') {
                  return alert("Image too large! Maximum allowed dimensions are " + _this.maximum.width + "x" + _this.maximum.height);
                } else {
                  return alert("Image too small! Minimum dimensions are " + _this.minimum.width + "x" + _this.minimum.height);
                }
              });
            };
          })(this));
        },
        detach: defaultFns.detach.input,
        disable: defaultFns.disable.input,
        enable: defaultFns.enable.input,
        showError: defaultFns.showError,
        hideError: defaultFns.hideError,
        makeValid: defaultFns.makeValid,
        makeInvalid: defaultFns.makeInvalid,
        makeFilled: defaultFns.makeFilled,
        makeNotFilled: defaultFns.makeNotFilled,
        makeRequired: defaultFns.makeRequired,
        makeNotRequired: defaultFns.makeNotRequired,
        fetchValue: function(regular) {
          if (!regular) {
            return this.base64;
          } else {
            return null;
          }
        },
        setValue: function(value) {
          if (value) {
            this.base64 = value;
          }
          if (this.preview.length) {
            return this.preview.addClass('show').html("<img src=\"" + this.base64 + "\">");
          }
        },
        empty: defaultFns.empty.input,
        test: defaultFns.test.input,
        checkDimensions: function(file) {
          if (!file) {
            return;
          }
          return new Promise((function(_this) {
            return function(resolve, reject) {
              var testImg;
              if (!_this.minimum && !_this.maximum) {
                resolve();
              }
              testImg = new Image();
              testImg.src = URL.createObjectURL(file);
              return testImg.onload = function() {
                var dimensions;
                if (_this.maximum) {
                  if (_this.maximum.constructor === String) {
                    dimensions = _this.maximum.split('x');
                    if (dimensions.length === 1) {
                      dimensions[1] = dimensions[0];
                    }
                    _this.maximum = {
                      width: dimensions[0],
                      height: dimensions[1]
                    };
                  }
                  if (_this.maximum.constructor === Number) {
                    _this.maximum = {
                      width: _this.maximum,
                      height: _this.maximum
                    };
                  }
                  if (testImg.width > _this.maximum.width || testImg.height > _this.maximum.height) {
                    reject('max');
                  } else {
                    if (_this.minimum == null) {
                      resolve();
                    }
                  }
                }
                if (_this.minimum) {
                  if (_this.minimum.constructor === String) {
                    dimensions = _this.minimum.split('x');
                    if (dimensions.length === 1) {
                      dimensions[1] = dimensions[0];
                    }
                    _this.minimum = {
                      width: dimensions[0],
                      height: dimensions[1]
                    };
                  }
                  if (_this.minimum.constructor === Number) {
                    _this.minimum = {
                      width: _this.minimum,
                      height: _this.minimum
                    };
                  }
                  if (testImg.width < _this.minimum.width || testImg.height < _this.minimum.height) {
                    return reject('min');
                  } else {
                    return resolve();
                  }
                }
              };
            };
          })(this));
        }
      },
      'radio': {
        prepare: defaultFns.prepare.button,
        prepareConditional: defaultFns.prepareConditional.input,
        attachValidation: function() {
          return this.field.on('value_changed', (function(_this) {
            return function() {
              _this.makeValid();
              return _this.form.form.trigger('field_filled');
            };
          })(this));
        },
        attachState: function() {
          this.field.on('value_changed', (function(_this) {
            return function(event, $button) {
              var newValue;
              if ($button.constructor !== jQuery) {
                $button = $($button);
              }
              newValue = $button.find('input').val();
              if (newValue != null) {
                _this.value = newValue;
              }
              _this.checkOn($button);
              return _this.makeFilled();
            };
          })(this));
          return this.field.find('label').on('click', function(event) {
            event.preventDefault();
            return $(this).parents('.input-button').trigger('click');
          });
        },
        detach: defaultFns.detach.button,
        disable: defaultFns.disable.button,
        enable: defaultFns.enable.button,
        showError: defaultFns.showError,
        hideError: defaultFns.hideError,
        makeValid: defaultFns.makeValid,
        makeInvalid: defaultFns.makeInvalid,
        makeFilled: defaultFns.makeFilled,
        makeNotFilled: defaultFns.makeNotFilled,
        makeRequired: defaultFns.makeRequired,
        makeNotRequired: defaultFns.makeNotRequired,
        checkOn: defaultFns.checkOn,
        checkOff: defaultFns.checkOff,
        fetchValue: defaultFns.fetchValue.button,
        setValue: function(value) {
          var $matchedButton, $matchedInput;
          $matchedInput = this.field.find("input[value='" + value + "']");
          if ($matchedInput.length) {
            this.value = value;
            $matchedButton = $matchedInput.parents('.input-button').first();
            this.checkOn($matchedButton);
            this.makeFilled();
            if (this.test()) {
              return this.makeValid();
            }
          }
        },
        empty: defaultFns.empty.button,
        test: defaultFns.test.button
      },
      'radio_hybrid': {
        prepare: defaultFns.prepare.button,
        prepareConditional: defaultFns.prepareConditional.input,
        attachValidation: defaultFns.attachValidation.button,
        attachState: defaultFns.attachState.button,
        detach: defaultFns.detach.button,
        disable: defaultFns.disable.button,
        enable: defaultFns.enable.button,
        showError: defaultFns.showError,
        hideError: defaultFns.hideError,
        makeValid: defaultFns.makeValid,
        makeInvalid: defaultFns.makeInvalid,
        makeFilled: defaultFns.makeFilled,
        makeNotFilled: defaultFns.makeNotFilled,
        makeRequired: defaultFns.makeRequired,
        makeNotRequired: defaultFns.makeNotRequired,
        checkOn: defaultFns.checkOn,
        checkOff: defaultFns.checkOff,
        fetchValue: defaultFns.fetchValue.button,
        setValue: defaultFns.setValue.button,
        empty: defaultFns.empty.button,
        test: defaultFns.test.button
      },
      'checkbox': {
        prepare: defaultFns.prepare.button,
        prepareConditional: defaultFns.prepareConditional.input,
        attachValidation: defaultFns.attachValidation.button,
        attachState: defaultFns.attachState.button,
        detach: defaultFns.detach.button,
        disable: defaultFns.disable.button,
        enable: defaultFns.enable.button,
        showError: defaultFns.showError,
        hideError: defaultFns.hideError,
        makeValid: defaultFns.makeValid,
        makeInvalid: defaultFns.makeInvalid,
        makeFilled: defaultFns.makeFilled,
        makeNotFilled: defaultFns.makeNotFilled,
        makeRequired: defaultFns.makeRequired,
        makeNotRequired: defaultFns.makeNotRequired,
        checkOn: defaultFns.checkOn,
        checkOff: defaultFns.checkOff,
        fetchValue: defaultFns.fetchValue.button,
        setValue: defaultFns.setValue.button,
        empty: defaultFns.empty.button,
        test: defaultFns.test.button
      },
      'checkbox_single': {
        prepare: defaultFns.prepare.button,
        prepareConditional: defaultFns.prepareConditional.input,
        attachValidation: defaultFns.attachValidation.button,
        attachState: defaultFns.attachState.button,
        detach: defaultFns.detach.button,
        disable: defaultFns.disable.button,
        enable: defaultFns.enable.button,
        showError: defaultFns.showError,
        hideError: defaultFns.hideError,
        makeValid: defaultFns.makeValid,
        makeInvalid: defaultFns.makeInvalid,
        makeFilled: defaultFns.makeFilled,
        makeNotFilled: defaultFns.makeNotFilled,
        makeRequired: defaultFns.makeRequired,
        makeNotRequired: defaultFns.makeNotRequired,
        checkOn: defaultFns.checkOn,
        checkOff: defaultFns.checkOff,
        fetchValue: defaultFns.fetchValue.input,
        setValue: defaultFns.setValue.button,
        empty: defaultFns.empty.input,
        test: defaultFns.test.button
      },
      'group': {
        prepare: function() {
          this.toggle = this.field.children('.group-toggle');
          this.container = this.field.children('.group-container');
          this.fieldsets = this.container.children('.fieldset');
          this.fields = [];
          this.fieldsRequired = [];
          this.fieldsets.each((function(_this) {
            return function(i, el) {
              var newField;
              newField = new Field($(el), _this.form);
              _this.fields.push(newField);
              if (newField.required) {
                return _this.fieldsRequired.push(newField);
              }
            };
          })(this));
          if (this.collapsed && this.toggle.length) {
            this.field.addClass('collapsed');
            if (this.container[0].offsetHeight === 0) {
              this.container[0].style.display = 'none';
            }
          }
          this.attachState();
          if (this.required) {
            this.attachValidation();
            if (this.test()) {
              this.makeValid();
            } else {
              this.makeInvalid();
            }
          } else {
            this.makeValid();
          }
          return fixWidth(this.fields);
        },
        prepareConditional: defaultFns.prepareConditional.input,
        attachValidation: function() {
          var $required, j, len, ref, results;
          ref = this.fieldsRequired;
          results = [];
          for (j = 0, len = ref.length; j < len; j++) {
            $required = ref[j];
            results.push($required.field.on('value_changed.for_group', (function(_this) {
              return function() {
                if (_this.test()) {
                  return _this.makeValid();
                } else {
                  return _this.makeInvalid();
                }
              };
            })(this)));
          }
          return results;
        },
        attachState: function() {
          if (this.toggle.length) {
            return this.toggle.on('click', (function(_this) {
              return function() {
                if (_this.collapsed) {
                  _this.field.removeClass('collapsed');
                  _this.container.slideDown(300);
                } else {
                  _this.field.addClass('collapsed');
                  _this.container.slideUp(300);
                }
                return _this.collapsed = !_this.collapsed;
              };
            })(this));
          }
        },
        detach: function() {
          this.fields.forEach(function(field) {
            return field.detach();
          });
          return this.toggle.off();
        },
        disable: function() {
          this.disabled = true;
          return this.fields.forEach(function(field) {
            return field.disable();
          });
        },
        enable: function() {
          this.disabled = false;
          return this.fields.forEach(function(field) {
            return field.enable();
          });
        },
        showError: defaultFns.showError,
        hideError: defaultFns.hideError,
        makeValid: defaultFns.makeValid,
        makeInvalid: defaultFns.makeInvalid,
        makeFilled: defaultFns.makeFilled,
        makeNotFilled: defaultFns.makeNotFilled,
        makeRequired: defaultFns.makeRequired,
        makeNotRequired: defaultFns.makeNotRequired,
        fetchValue: function(asArray) {
          var field, fieldKeyValPair, j, len, ref, values;
          values = asArray ? [] : {};
          ref = this.fields;
          for (j = 0, len = ref.length; j < len; j++) {
            field = ref[j];
            if (asArray) {
              fieldKeyValPair = {};
              fieldKeyValPair[field.name] = field.fetchValue();
              values.push(fieldKeyValPair);
            } else {
              values[field.name] = field.fetchValue();
            }
          }
          return values;
        },
        setValue: function(values) {
          if (!values || (values.constructor !== Object && values.constructor !== Array)) {
            return;
          }
          if (values.constructor === Array) {
            return values.forEach((function(_this) {
              return function(value, subIndex) {
                return _this.fieldsets.eq(subIndex).data('Field').setValue(value);
              };
            })(this));
          } else if (values.constructor === Object) {
            return this.fieldsets.each(function() {
              var fieldInstance, valueToSet;
              fieldInstance = $(this).data('Field');
              valueToSet = values[fieldInstance.name];
              if ((valueToSet != null) && fieldInstance) {
                return fieldInstance.setValue(valueToSet);
              }
            });
          } else {
            return this.fieldsets.first().data('Field').setValue(values);
          }
        },
        empty: function() {
          return this.fields.forEach(function(field) {
            return field.empty();
          });
        },
        test: function(showErrors, logBadFields) {
          var badFields, problem, showErrorsAsPassed;
          problem = false;
          badFields = [];
          showErrorsAsPassed = showErrors;
          this.fieldsRequired = this.fields.filter(function(field) {
            return field.required;
          });
          this.fieldsRequired.forEach((function(_this) {
            return function(field) {
              var isValid, validateByClass;
              validateByClass = field.field.hasClass('validate_by_class');
              if (field.field.hasClass('dont-error')) {
                showErrors = false;
              }
              isValid = validateByClass ? field.field.hasClass('valid') : field.test(showErrorsAsPassed, logBadFields);
              if (isValid) {
                return field.hideError();
              } else {
                if (showErrors) {
                  field.showError();
                }
                problem = true;
                return badFields.push(field);
              }
            };
          })(this));
          if (logBadFields) {
            console.log(badFields);
          }
          if (problem) {
            return false;
          } else {
            return true;
          }
        }
      },
      'repeater': {
        prepare: function() {
          this.toggle = this.field.children('.repeater-toggle');
          this.container = this.field.children('.repeater-container');
          this.placeholder = this.container.children('.repeater-placeholder');
          this.button = this.container.children('.repeater-button');
          this.repeaterItemsContainer = this.container.children('.repeater-items');
          this.repeaterTemplate = {
            'html': this.container.children('.repeater-template').html(),
            'el': this.container.children('.repeater-template').children()
          };
          this.collectFields(true);
          if (this.collapsed && this.toggle.length) {
            this.field.addClass('collapsed');
            if (this.container[0].offsetHeight === 0) {
              this.container[0].style.display = 'none';
            }
          }
          this.attachState();
          if (this.required) {
            this.attachValidation();
            if (this.test()) {
              this.makeValid();
            } else {
              this.makeInvalid();
            }
          } else {
            this.makeValid();
          }
          if (this.repeaterItems.length === 0) {
            this.hideButton();
          } else {
            this.showButton();
          }
          return fixWidth(this.fields);
        },
        collectFields: function(firstTime) {
          this.repeaterItems = [];
          this.repeaterItemsContainer.children('.repeater-item').each((function(_this) {
            return function(i, el) {
              return _this.repeaterItems.push(el);
            };
          })(this));
          this.repeaterIndex = this.repeaterItems.length;
          this.fields = [];
          this.repeaterItems.forEach((function(_this) {
            return function(repeaterItem) {
              var $additionalFieldsets;
              $additionalFieldsets = $(repeaterItem).children('.repeater-item-fields').children('.dynamic_block').children('.fieldset');
              return $(repeaterItem).children('.repeater-item-fields').children('.fieldset').add($additionalFieldsets).each(function(i, el) {
                var newField;
                newField = firstTime ? new Field($(el), _this.form) : $(el).data('Field');
                return _this.fields.push;
              });
            };
          })(this));
          return this.fieldsRequired = this.fields.filter(function(field) {
            return field.required;
          });
        },
        prepareConditional: defaultFns.prepareConditional.input,
        attachValidation: function() {
          var $required, j, len, ref, results;
          ref = this.fieldsRequired;
          results = [];
          for (j = 0, len = ref.length; j < len; j++) {
            $required = ref[j];
            results.push($required.field.on('value_changed.for_repeater', (function(_this) {
              return function() {
                if (_this.test()) {
                  return _this.makeValid();
                } else {
                  return _this.makeInvalid();
                }
              };
            })(this)));
          }
          return results;
        },
        attachState: function() {
          this.repeaterTemplate.el.find('.input').prop('disabled', true);
          if (this.repeaterIndex) {
            this.field.addClass('has_fields');
          }
          this.field.on('click', '.repeater-delete', (function(_this) {
            return function(event) {
              var $deleteButton, $repeaterItem;
              $deleteButton = $(event.target);
              if ($deleteButton.parents('.repeater-container').first()[0] === _this.container[0]) {
                if (_this.repeaterItems.length !== _this.minimum) {
                  $repeaterItem = $deleteButton.parents('.repeater-item').first();
                  _this["delete"]($repeaterItem);
                  if (_this.repeaterIndex === 0) {
                    _this.field.removeClass('has_fields');
                  }
                  if (!(_this.repeaterItems.length >= _this.maximum)) {
                    _this.enableButton();
                  }
                }
                if (_this.repeaterItems.length === 0) {
                  return _this.hideButton();
                }
              }
            };
          })(this));
          this.field.on('click', '.repeater-clone', (function(_this) {
            return function(event) {
              var $cloneButton, $repeaterItem;
              $cloneButton = $(event.target);
              if ($cloneButton.parents('.repeater-container').first()[0] === _this.container[0]) {
                if (!(_this.repeaterItems.length >= _this.maximum)) {
                  $repeaterItem = $cloneButton.parents('.repeater-item').first();
                  return _this.clone($repeaterItem);
                } else {
                  return _this.disableButton();
                }
              }
            };
          })(this));
          this.button.add(this.placeholder).on('click', (function(_this) {
            return function() {
              _this.showButton();
              if (!(_this.repeaterItems.length >= _this.maximum)) {
                _this.add();
                return _this.field.addClass('has_fields');
              } else {
                return _this.disableButton();
              }
            };
          })(this));
          if (this.toggle.length) {
            return this.toggle.on('click', (function(_this) {
              return function() {
                if (_this.collapsed) {
                  _this.field.removeClass('collapsed');
                  _this.container.slideDown(300);
                } else {
                  _this.field.addClass('collapsed');
                  _this.container.slideUp(300);
                }
                return _this.collapsed = !_this.collapsed;
              };
            })(this));
          }
        },
        detach: function() {
          this.fields.forEach(function(field) {
            return field.detach();
          });
          this.button.off();
          this.placeholder.off();
          this.toggle.off();
          this.field.find('.repeater-delete').off();
          return this.field.find('.repeater-clone').off();
        },
        disable: function() {
          this.disabled = true;
          return this.fields.forEach(function(field) {
            return field.disable();
          });
        },
        enable: function() {
          this.disabled = false;
          return this.fields.forEach(function(field) {
            return field.enable();
          });
        },
        showError: defaultFns.showError,
        hideError: defaultFns.hideError,
        makeValid: defaultFns.makeValid,
        makeInvalid: defaultFns.makeInvalid,
        makeRequired: defaultFns.makeRequired,
        makeNotRequired: defaultFns.makeNotRequired,
        fetchValue: function() {
          var $additionalFieldsets, $repeaterItem, j, len, ref, repeaterItem, repeaterItemIndex, values;
          values = [];
          ref = this.repeaterItems;
          for (repeaterItemIndex = j = 0, len = ref.length; j < len; repeaterItemIndex = ++j) {
            repeaterItem = ref[repeaterItemIndex];
            $repeaterItem = $(repeaterItem);
            if (this.type === 'repeater') {
              $repeaterItem.find('.fieldset').each(function() {
                var fieldsetInstance;
                fieldsetInstance = $(this).data('Field');
                return values.push(fieldsetInstance.fetchValue());
              });
            } else {
              values[repeaterItemIndex] = {};
              $additionalFieldsets = $repeaterItem.children('.repeater-item-fields').children('.dynamic_block').children('.fieldset');
              $repeaterItem.children('.repeater-item-fields').children('.fieldset').add($additionalFieldsets).each(function() {
                var fieldsetInstance, fieldsetName;
                fieldsetInstance = $(this).data('Field');
                fieldsetName = fieldsetInstance.name;
                fieldsetName = fieldsetName.replace('[]', '');
                return values[repeaterItemIndex][fieldsetName] = fieldsetInstance.fetchValue();
              });
            }
          }
          return values;
        },
        setValue: function(values) {
          if (!values) {
            return;
          }
          if (this.type === 'repeater_group' && !Array.isArray(values)) {
            values = [values];
          }
          values.forEach((function(_this) {
            return function(itemValues, index) {
              var $extraFields, $fields;
              if (_this.type === 'repeater_group') {
                if (itemValues.constructor !== Object && itemValues.constructor !== Array) {
                  return;
                }
              }
              if (index >= _this.repeaterItems.length) {
                _this.add();
              }
              $extraFields = $(_this.repeaterItems[index]).children('.repeater-item-fields').children('.dynamic_block').children('.fieldset');
              $fields = $(_this.repeaterItems[index]).children('.repeater-item-fields').children('.fieldset').add($extraFields);
              if (itemValues.constructor === Array) {
                return itemValues.forEach(function(value, subIndex) {
                  return $fields.eq(subIndex).data('Field').setValue(value);
                });
              } else if (itemValues.constructor === Object) {
                return $fields.each(function() {
                  var fieldInstance, fieldName, valueToSet;
                  fieldInstance = $(this).data('Field');
                  fieldName = fieldInstance.name;
                  valueToSet = itemValues[fieldName];
                  if ((valueToSet != null) && fieldInstance) {
                    return fieldInstance.setValue(valueToSet);
                  }
                });
              } else {
                return $fields.first().data('Field').setValue(itemValues);
              }
            };
          })(this));
          if (this.repeaterIndex) {
            this.showButton();
            return this.field.addClass('has_fields');
          }
        },
        empty: function() {
          return this.fields.forEach(function(field) {
            return field.empty();
          });
        },
        test: function(showErrors, logBadFields) {
          var badFields, problem, showErrorsAsPassed;
          problem = false;
          badFields = [];
          showErrorsAsPassed = showErrors;
          this.fieldsRequired = this.fields.filter(function(field) {
            return field.required;
          });
          this.fieldsRequired.forEach((function(_this) {
            return function(field) {
              var isValid, validateByClass;
              validateByClass = field.field.hasClass('validate_by_class');
              if (field.field.hasClass('dont-error')) {
                showErrors = false;
              }
              isValid = validateByClass ? field.field.hasClass('valid') : field.test(showErrorsAsPassed, logBadFields);
              if (isValid) {
                return field.hideError();
              } else {
                if (showErrors) {
                  field.showError();
                }
                problem = true;
                return badFields.push(field);
              }
            };
          })(this));
          if (logBadFields) {
            console.log(badFields);
          }
          if (problem) {
            return false;
          } else {
            return true;
          }
        },
        add: function() {
          var $newField, newFieldHTML;
          this.repeaterIndex++;
          $newField = $(document.createElement('div'));
          newFieldHTML = this.repeaterTemplate.html.replace(/xyz/g, (function(_this) {
            return function() {
              return _this.repeaterIndex;
            };
          })(this));
          $newField.html(newFieldHTML);
          $newField.find('.disabled_forever').removeClass('disabled_forever').data('disabled_forever', false);
          $newField.children().children('.repeater-item-fields').children('.fieldset').each((function(_this) {
            return function(i, el) {
              return _this.addChildField($(el));
            };
          })(this));
          this.repeaterItems.push($newField[0].children[0]);
          this.repeaterItemsContainer.append($newField[0].children[0]);
          return this.step.trigger('height_changed');
        },
        "delete": function($repeaterItem) {
          var $extraFields, $repeaterItemFields, indexOfLastField, indexOfRepeaterItem;
          this.repeaterIndex--;
          $extraFields = $repeaterItem.children('.repeater-item-fields').children('.dynamic_block').children('.fieldset');
          $repeaterItemFields = $repeaterItem.children('.repeater-item-fields').children('.fieldset').add($extraFields);
          indexOfRepeaterItem = $repeaterItem.index();
          indexOfLastField = $(this.repeaterItems[this.repeaterItems.length - 1]).index();
          this.repeaterItems.splice(this.repeaterItems.indexOf($repeaterItem[0]), 1);
          $repeaterItemFields.each((function(_this) {
            return function(i, el) {
              return _this.removeChildField($(el));
            };
          })(this));
          $repeaterItem.addClass('delete-started').animate({
            height: 0,
            opacity: 0
          }, 350, 'swing', function() {
            return $repeaterItem.remove();
          });
          if (indexOfRepeaterItem < indexOfLastField) {
            this.repeaterItems.forEach((function(_this) {
              return function(item, index) {
                if ($(item).index() >= indexOfRepeaterItem) {
                  return _this.resetIndex($(item), true);
                }
              };
            })(this));
          }
          return setTimeout((function(_this) {
            return function() {
              return _this.step.trigger('height_changed');
            };
          })(this), 400);
        },
        clone: function($repeaterItem) {
          var $cloned, $extraFields, indexOfLastField, indexOfRepeaterItem;
          this.repeaterIndex++;
          indexOfRepeaterItem = $repeaterItem.index();
          indexOfLastField = $(this.repeaterItems[this.repeaterItems.length - 1]).index();
          $cloned = util.cloneSafe($repeaterItem, true);
          $extraFields = $cloned.children('.repeater-item-fields').children('.dynamic_block').children('.fieldset');
          $cloned.insertAfter($repeaterItem);
          this.repeaterItems.splice(this.repeaterItems.indexOf($repeaterItem) + 2, 0, $cloned[0]);
          $cloned.children('.repeater-item-fields').children('.fieldset').add($extraFields).each((function(_this) {
            return function(i, el) {
              return _this.addChildField($(el));
            };
          })(this));
          if (indexOfRepeaterItem < indexOfLastField) {
            this.repeaterItems.forEach((function(_this) {
              return function(item) {
                if ($(item).index() >= indexOfRepeaterItem) {
                  return _this.resetIndex($(item));
                }
              };
            })(this));
          } else {
            this.resetIndex($cloned, false);
          }
          return this.step.trigger('height_changed');
        },
        resetIndex: function($repeaterItem, subtracted) {
          var $fieldsets, $title, newIndex, prevIndex;
          if (subtracted == null) {
            subtracted = false;
          }
          prevIndex = subtracted ? $repeaterItem.index() + 1 : $repeaterItem.index();
          newIndex = subtracted ? prevIndex - 1 : prevIndex + 1;
          $fieldsets = $repeaterItem.children('.repeater-item-fields').children('.fieldset');
          $title = $repeaterItem.children('.repeater-item-title');
          if ($title.length) {
            $title.html($title.html().replace(/\d$/, newIndex));
          }
          return $fieldsets.each(function() {
            var $fieldset, $inputs, $labels, currentID, newID;
            $fieldset = $(this);
            $labels = $fieldset.children('label');
            $inputs = $fieldset.children('input');
            if ($labels.length === 0) {
              $labels = $fieldset.children('.input-button').children('label');
            }
            if ($inputs.length === 0) {
              $inputs = $fieldset.children('.input-button').children('input');
            }
            currentID = $fieldset.data('id');
            newID = currentID.replace("_" + prevIndex + "_", "_" + newIndex + "_");
            $fieldset.data('id', newID);
            $labels.each(function() {
              var $label, currentLabel, newLabel;
              $label = $(this);
              currentLabel = $label.attr('for');
              newLabel = currentLabel.replace(currentID, newID);
              return $label.attr('for', newLabel);
            });
            return $inputs.each(function() {
              var $input;
              $input = $(this);
              currentID = $input.attr('id');
              newID = currentID.replace(currentID, newID);
              return $input.attr('id', newID);
            });
          });
        },
        enableButton: function() {
          return this.button.removeClass('disabled');
        },
        disableButton: function() {
          return this.button.addClass('disabled');
        },
        showButton: function() {
          this.button.addClass('show');
          return this.placeholder.removeClass('show');
        },
        hideButton: function() {
          this.button.removeClass('show');
          return this.placeholder.addClass('show');
        },
        addChildField: function($el) {
          var newField;
          newField = new Field($el, this.form);
          newField.enable();
          this.fields.push(newField);
          if (newField.required) {
            this.fieldsRequired.push(newField);
            return newField.field.on('value_changed.for_repeater', (function(_this) {
              return function() {
                if (_this.test()) {
                  return _this.makeValid();
                } else {
                  return _this.makeInvalid();
                }
              };
            })(this));
          }
        },
        removeChildField: function($el) {
          var fieldEl, fieldInstance;
          if ($el.constructor === Field) {
            fieldInstance = $el;
            fieldEl = fieldInstance.field;
          } else {
            fieldInstance = $el.data('Field');
            fieldEl = $el;
          }
          this.fields.splice(this.fields.indexOf(fieldInstance), 1);
          if (this.fieldsRequired.includes(fieldInstance)) {
            this.fieldsRequired.splice(this.fieldsRequired.indexOf(fieldInstance), 1);
          }
          return fieldInstance.detach();
        }
      }
    };
    Form.prototype.fieldProtos.repeater_group = Form.prototype.fieldProtos.repeater;
    fixWidth = function(fields) {
      var isLast, parseWidth, rowPercentage;
      rowPercentage = 0;
      parseWidth = function(string) {
        var delim, split;
        delim = string.includes('/') ? '/' : '-';
        split = string.split(delim);
        return parseFloat(split[0]) / parseFloat(split[1]);
      };
      isLast = function(fieldsetWidth) {
        rowPercentage += parseWidth(fieldsetWidth);
        if (rowPercentage >= 1) {
          rowPercentage = 0;
          return true;
        } else {
          return false;
        }
      };
      return fields.forEach(function(field) {
        var width;
        if (field.field.index() === 0) {
          rowPercentage = 0;
        }
        width = field.field.data('width');
        if (isLast(width)) {
          return field.field.addClass('is_last');
        } else {
          return field.field.removeClass('is_last');
        }
      });
    };

    /*==========================================================================
    		 Initial Preparation
    	==========================================================================
     */
    Form.prototype.Prepare = function(firstTime) {
      var formClassName;
      if (this.form.find('.step').length === 0) {
        formClassName = this.form[0].className.split(' ')[1];
        this.form.wrapInner("<div class=\"" + formClassName + " step show\"></div>");
      }
      if (firstTime) {
        this.form.find('.step').each((function(_this) {
          return function(i, el) {
            var $fieldsets, $step, stepIndex;
            _this.fieldsInSteps.push([]);
            stepIndex = _this.fieldsInSteps.length - 1;
            $step = $(el);
            $fieldsets = $step.children('.fieldset');
            if ($fieldsets.length === 0) {
              $fieldsets = $step.find('.step-innerwrap').children('.fieldset');
            }
            return $fieldsets.each(function(i, el) {
              return _this.addField($(el), stepIndex);
            });
          };
        })(this));
        this.form.find('.step').first().addClass('show');
        this.setCurrentStepTo('visible');
      }
      this.disableFields(this.form);
      this.enableFields(this.step.current);
      this.attachFormEvents();
      this.attachButtonEvents();
      this.attachExtraEvents();
      return this.options.callbackOnPrepare(this);
    };
    Form.prototype.AddStep = function($step) {
      var $fieldsets, stepIndex;
      this.fieldsInSteps.push([]);
      stepIndex = this.fieldsInSteps.length - 1;
      $fieldsets = $step.children('.fieldset');
      if ($fieldsets.length === 0) {
        $fieldsets = $step.find('.step-innerwrap').children('.fieldset');
      }
      $fieldsets.each((function(_this) {
        return function(i, el) {
          return _this.addField($(el), stepIndex);
        };
      })(this));
      return this.multiStep = true;
    };
    Form.prototype.RemoveStep = function(index) {
      var stepFields;
      if (this.fieldsInSteps[index] == null) {
        return 'Specified index wasn\'t found.';
      }
      stepFields = this.fieldsInSteps[index];
      stepFields.forEach((function(_this) {
        return function(field) {
          _this.fields.splice(_this.fields.indexOf(field), 1);
          if (field.required) {
            return _this.fieldsRequired.splice(_this.fieldsRequired.indexOf(field), 1);
          }
        };
      })(this));
      return this.fieldsInSteps.splice(index, 1);
    };
    Form.prototype.Reset = function(resetStep) {
      if (resetStep == null) {
        resetStep = true;
      }
      if (resetStep) {
        this.form.find('.step.show, .results.show').removeClass('show').end().find('.step').first().addClass('show');
        return this.setCurrentStepTo('visible');
      }
    };
    Form.prototype.ReInit = function(rePrepare, resetInputFields) {
      if (rePrepare == null) {
        rePrepare = true;
      }
      if (resetInputFields) {
        this.Reset();
      }
      this.form.off().find('.step').off().end().find('.next, .back, .submit').off();
      this.fields.forEach(function(field) {
        return field.empty();
      });
      if (rePrepare) {
        return this.Prepare();
      }
    };
    Form.prototype.Restart = Form.prototype.ReInit;

    /*==========================================================================
    		 Validation
    	==========================================================================
     */

    /**
    	 * Validation Engine
    	 * 
    	 * @param {bool} showErrors        Indicates whether or not the fields should be marked with errors if the fail to pass the validaiton.
    	 * @param {bool} showErrorMessages Indicates if we should reveal the error messages (if present) for each failed field.
     */
    Form.prototype.Validate = function(showErrors, showErrorMessages, logBadFields) {
      var badFields, fieldsToCheck, numberOfErrors, problem, stepFields, stepIndex;
      if (showErrors == null) {
        showErrors = true;
      }
      problem = false;
      badFields = [];
      numberOfErrors = 0;
      if (this.skippedAStep || !this.multiStep) {
        fieldsToCheck = this.fieldsRequired;
      } else {
        stepIndex = this.step.current.index() - this.stepIndexOffset;
        stepFields = this.fieldsInSteps[stepIndex];
        if (!stepFields) {
          return true;
        }
        fieldsToCheck = this.fieldsInSteps[stepIndex].filter(function(field) {
          return field.required;
        });
      }
      fieldsToCheck.forEach((function(_this) {
        return function(field) {
          var isValid, showErrorsAsPassed, validateByClass;
          validateByClass = field.field.hasClass('validate_by_class');
          showErrorsAsPassed = showErrors;
          if (field.field.hasClass('dont-error')) {
            showErrors = false;
          }
          isValid = validateByClass ? field.field.hasClass('valid') : field.test(showErrorsAsPassed, logBadFields);
          if (isValid) {
            return field.hideError();
          } else {
            if (logBadFields) {
              badFields.push(field);
            }
            if (showErrors) {
              field.showError();
            }
            problem = true;
            numberOfErrors++;
            if (_this.skippedAStep && numberOfErrors === 1 && field.step[0] !== _this.step.current[0]) {
              _this.revealSection(field.step);
              return _this.setCurrentStepTo(field.step);
            }
          }
        };
      })(this));
      if (logBadFields) {
        console.log(badFields, fieldsToCheck);
      }
      this.options.callbackOnValidate(this);
      if (problem) {
        this.step.current.trigger('notvalid');
        return false;
      } else {
        this.step.current.trigger('valid');
        return true;
      }
    };

    /*==========================================================================
    		 Events
    	==========================================================================
     */
    Form.prototype.attachFormEvents = function() {
      this.form.on('submit', function(event) {
        return event.preventDefault();
      });
      this.form.on('submit_current_step', util.debounce(((function(_this) {
        return function() {
          var $button;
          $button = _this.step.current.find('.next');
          $button = $button.length ? $button : _this.step.current.find('.submit');
          if ($button.length) {
            return $button.trigger('click');
          } else {
            return _this.Next();
          }
        };
      })(this)), 100));
      if (this.options.validateOnTyping) {
        return this.form.on('field_filled', (function(_this) {
          return function() {
            var allFieldsAreValid;
            allFieldsAreValid = _this.Validate(false);
            if (allFieldsAreValid) {
              _this.step.current.addClass('step_filled');
              return _this.form.addClass('form_filled').trigger('form_filled');
            } else {
              _this.form.removeClass('form_filled');
              return _this.step.current.removeClass('step_filled');
            }
          };
        })(this));
      }
    };
    Form.prototype.attachButtonEvents = function() {
      this.form.find('.next').on('click', (function(_this) {
        return function() {
          return _this.Next();
        };
      })(this));
      this.form.find('.back').on('click', (function(_this) {
        return function() {
          return _this.Back();
        };
      })(this));
      this.form.find('.submit').on('click', (function(_this) {
        return function() {
          return _this.Submit();
        };
      })(this));
      this.form.find('.next, .submit').on('focusin', function() {
        var $button;
        $button = $(this);
        return $window.on('keypress.button_focused', function(event) {
          var isEnterKey, isSpaceKey, isTabKey;
          isTabKey = event.which === 9;
          isEnterKey = event.which === 13;
          isSpaceKey = event.which === ' ' || event.which === 32;
          if (isTabKey) {
            $button.trigger('focusout');
          }
          if (isEnterKey || isSpaceKey) {
            return $button.trigger('focusout').trigger('click');
          }
        });
      });
      return this.form.find('.next, .submit').on('focusout', function() {
        return $window.off('keypress.button_focused');
      });
    };
    Form.prototype.attachExtraEvents = function() {
      return this.form.find('.step_toggle').on('click', (function(_this) {
        return function(event) {
          var $step;
          $step = $(event.target).parents('.step').first();
          _this.revealSection($step);
          _this.setCurrentStepTo($step);
          return _this.skippedAStep = true;
        };
      })(this));
    };

    /*==========================================================================
    		 Form Actions
    	==========================================================================
     */
    Form.prototype.Next = function() {
      if (this.options.customNext) {
        this.options.customNext();
      } else if (!this.disabled) {
        if (this.Validate()) {
          this.revealSection(this.step.next);
          this.setCurrentStepTo('next');
        } else {
          this.focusOnFirstErrorField();
        }
      }
      return this.options.callbackOnNextStep(this);
    };
    Form.prototype.Back = function() {
      if (this.options.customPrev) {
        this.options.customPrev();
      } else if (!this.disabled) {
        this.revealSection(this.step.prev);
        this.setCurrentStepTo('prev');
      }
      return this.options.callbackOnBackStep(this);
    };
    Form.prototype.Submit = function() {
      var formData;
      if (this.Validate()) {
        if (this.options.customSubmit) {
          return this.options.customSubmit();
        } else if (!this.disabled) {
          this.form.addClass('loading final');
          if (this.action || this.options.forceAjaxSubmit) {
            formData = this.fetchValues();
            if (this.action) {
              formData.action = this.action;
            }
            if (!formData.url) {
              formData.url = window.location.href;
            }
            if (!formData.referrer) {
              formData.referrer = document.referrer;
            }
            if (this.options.hasLoadingStep) {
              if (this.resultsPlaceholder.length) {
                this.resultsPlaceholder.html(messages.loading).addClass('show');
              }
              this.revealSection(this.resultsPlaceholder);
              this.setCurrentStepTo(this.resultsPlaceholder);
            }
            return $.post(this.options.submitUrl, formData, ((function(_this) {
              return function(response) {
                var type;
                if (!response) {
                  return _this.showGeneralErrorMessage();
                } else {
                  type = response.success === true ? 'success' : 'error';
                  _this.options.callbackOnResults(response, _this);
                  _this.form.trigger('submitted').removeClass('loading');
                  if (_this.resultsPlaceholder.length && response.message) {
                    return _this.resultsPlaceholder.html("<div class=\"results-message " + type + "\">" + response.message + "</div>").addClass('show');
                  }
                }
              };
            })(this)), 'JSON').fail((function(_this) {
              return function() {
                return _this.showGeneralErrorMessage();
              };
            })(this));
          }
        }
      } else {
        return this.focusOnFirstErrorField();
      }
    };

    /*========================================
    	=            Helper Functions            =
    	========================================
     */
    Form.prototype.addField = function($field, stepIndex) {
      var $parentStep, fieldInstance;
      fieldInstance = new Field($field, this);
      if (stepIndex == null) {
        $parentStep = $field.parents('.step').first();
        stepIndex = $parentStep.index() - this.stepIndexOffset;
      }
      this.fieldsInSteps[stepIndex].push(fieldInstance);
      this.fields.push(fieldInstance);
      if (fieldInstance.required) {
        this.fieldsRequired.push(fieldInstance);
      }
      return this.fieldsByName[fieldInstance.name] = fieldInstance;
    };
    Form.prototype.fetchValues = function() {
      var values;
      if (this.options.uniqueSteps) {
        values = [];
        this.fieldsInSteps.forEach(function(step, stepIndex) {
          var stepValues;
          stepValues = {};
          step.forEach(function(field) {
            if (!(field.dependsOn && !field.revealed)) {
              return stepValues[field.name] = field.fetchValue();
            }
          });
          return values.push(stepValues);
        });
      } else {
        values = {};
        this.fields.forEach(function(field) {
          if (!(field.dependsOn && !field.revealed)) {
            return values[field.name] = field.fetchValue();
          }
        });
        this.form.find('input[type="hidden"]').each(function() {
          return values[this.name] = this.value;
        });
      }
      return values;
    };
    Form.prototype.disable = function() {
      this.disabled = true;
      this.form.addClass('disabled');
      return this.disableFields(this.form);
    };
    Form.prototype.enable = function() {
      this.disabled = false;
      this.form.removeClass('disabled');
      return this.enableFields(this.form);
    };
    Form.prototype.disableFields = function($step) {
      if (this.options.dontDisableFields) {
        return;
      }
      if ($step === this.form || !this.multiStep) {
        return this.fields.forEach(function(field) {
          return field.disable();
        });
      } else {
        return $step.each((function(_this) {
          return function(i, el) {
            var stepIndex;
            stepIndex = $(el).index() - _this.stepIndexOffset;
            if (_this.fieldsInSteps[stepIndex]) {
              return _this.fieldsInSteps[stepIndex].forEach(function(field) {
                return field.disable();
              });
            }
          };
        })(this));
      }
    };
    Form.prototype.enableFields = function($step) {
      if ($step === this.form || !this.multiStep) {
        return this.fields.forEach(function(field) {
          return field.enable();
        });
      } else {
        return $step.each((function(_this) {
          return function(i, el) {
            var stepIndex;
            stepIndex = $(el).index() - _this.stepIndexOffset;
            if (_this.fieldsInSteps[stepIndex]) {
              return _this.fieldsInSteps[stepIndex].forEach(function(field) {
                return field.enable();
              });
            }
          };
        })(this));
      }
    };
    Form.prototype.setCurrentStepTo = function(stepToSet) {
      var current, next, prev, visibleStep;
      if (stepToSet == null) {
        stepToSet = 'visible';
      }
      current = this.step.current;
      prev = this.step.prev;
      next = this.step.next;
      switch (stepToSet) {
        case 'next':
          this.step = {
            'current': next,
            'prev': current,
            'next': next.next()
          };
          break;
        case 'prev':
          this.step = {
            'current': prev,
            'prev': prev.prev(),
            'next': current
          };
          break;
        case 'visible':
          visibleStep = this.form.find('.step.show');
          this.step = {
            'current': visibleStep,
            'prev': visibleStep.prev(),
            'next': visibleStep.next()
          };
          break;
        default:
          this.step = {
            'current': stepToSet,
            'prev': stepToSet.prev(),
            'next': stepToSet.next()
          };
      }
    };
    Form.prototype.revealSection = function($step) {
      if (this.options.customTransition) {
        this.options.customTransition($step, this);
      } else {
        this.enableFields($step);
        this.disableFields($step.siblings('.step'));
        $step.addClass('show').siblings('.show').removeClass('show');
        Form.utils.scrollTo($step);
        if (this.options.heightTransitions) {
          Form.utils.setSectionHeight($step, true);
        }
      }
    };
    Form.prototype.manageStepHeight = function(stepClosedHeight) {
      var $steps;
      if (stepClosedHeight == null) {
        stepClosedHeight = 39;
      }
      $steps = this.form.find('.step');
      Form.utils.saveSectionHeights($steps);
      $steps.first().addClass('show').each(function() {
        return $(this).height($(this).data('height'));
      }).siblings('.step').height(stepClosedHeight);
      $steps.on('height_changed', function() {
        return Form.utils.setSectionHeight($(this), false, true, stepClosedHeight);
      });
      return $window.on('resize', util.debounce(function() {
        Form.utils.saveSectionHeights($steps);
        return $steps.trigger('height_changed');
      }, 250));
    };
    Form.prototype.showGeneralErrorMessage = function() {
      this.form.removeClass('loading');
      this.options.callbackOnResults();
      if (this.resultsPlaceholder.length) {
        return this.resultsPlaceholder.html(messages.error);
      }
    };
    Form.prototype.focusOnFirstErrorField = function() {
      return this.step.current.find('.fieldset.error').not('.fieldtype_radio').not('.fieldtype_radio_hybrid').not('.fieldtype_checkbox').not('.fieldtype_checkbox_single').first().find('input').trigger('focus');
    };

    /*==================================
    	=            Form Utils            =
    	==================================
     */
    Form.utils = {
      setSectionHeight: function($section, hideOthers, setNewHeight, hiddenHeight) {
        if (hideOthers == null) {
          hideOthers = true;
        }
        if (setNewHeight == null) {
          setNewHeight = true;
        }
        if (hiddenHeight == null) {
          hiddenHeight = 40;
        }
        if (setNewHeight) {
          $section.data('height', $section.children('.step-innerwrap').height() + 70);
        }
        $section.height($section.data('height'));
        if (hideOthers) {
          return $section.siblings('.step').css('height', hiddenHeight + "px");
        }
      },
      saveSectionHeights: function($steps) {
        return $steps.each(function() {
          var $step, $stepInnerwrap, stepHeight;
          $step = $(this);
          $stepInnerwrap = $step.children('.step-innerwrap');
          $stepInnerwrap = $stepInnerwrap.length ? $stepInnerwrap : $step;
          stepHeight = $stepInnerwrap.height() + 70;
          return $step.data('height', stepHeight);
        });
      },
      scrollTo: function($openSection) {
        var dimensions;
        if ($openSection && $openSection.length) {
          dimensions = $openSection.offset();
          if (window.pageYOffset > dimensions.top) {
            return $$('html, body').animate({
              scrollTop: dimensions.top - 70
            }, 300);
          }
        }
      }
    };
  })(jQuery);

}).call(this);
;
var $window, isLeadManagement, isMobile, isMobileWidth, isPageManagement, isPostManagement;

(function($) {
  var ensureFullHeight;
  ensureFullHeight = function() {
    var $ctaDivider, $footer, $header, $hero, combinedHeight, ctaDividerHeight, footerHeight, headerHeight, heroHeight, pageHeight, windowHeight;
    windowHeight = window.innerHeight;
    pageHeight = document.getElementById('page').offsetHeight;
    $header = $$('header');
    $footer = $$('footer');
    $hero = $$('.hero');
    $ctaDivider = $$('.cta_divider');
    headerHeight = $header.length ? $header[0].offsetHeight : 0;
    footerHeight = $footer.length ? $footer[0].offsetHeight : 0;
    heroHeight = $hero.length ? $hero[0].offsetHeight : 0;
    ctaDividerHeight = $ctaDivider.length ? $ctaDivider[0].offsetHeight : 0;
    combinedHeight = headerHeight + footerHeight + heroHeight + ctaDividerHeight;
    if (pageHeight < windowHeight) {
      return $$('.page_innerwrap, .page').css('min-height', windowHeight - combinedHeight);
    }
  };
  $$(document).ready(ensureFullHeight);
  return $$(window).on('resize', util.debounce(ensureFullHeight, 200));
})(jQuery);

(function() {
  var $mobileNav, $mobileNavItems, $mobileNavTrigger, HEADERHEIGHT, SAFETYMARGIN, lockPage, revealItems, setMobileNavHeight, unlockPage;
  $mobileNav = $$('.header-mobile_nav');
  $mobileNavItems = $$('.header-mobile_nav-list-item');
  $mobileNavTrigger = $$('.header-mobile_nav-trigger');
  HEADERHEIGHT = 98;
  SAFETYMARGIN = 20;
  setMobileNavHeight = function() {
    return $mobileNav[0].style.height = ((window.innerHeight - HEADERHEIGHT) + SAFETYMARGIN) + 'px';
  };
  lockPage = function() {
    if (window.pageYOffset > 0) {
      $$('html, body').animate({
        scrollTop: 0
      }, 250);
    }
    return $$('body')[0].style.overflow = 'hidden';
  };
  unlockPage = function() {
    return $$('body')[0].style.overflow = '';
  };
  revealItems = function() {
    var iteration;
    iteration = 1;
    return $mobileNavItems.each(function() {
      return setTimeout((function(_this) {
        return function() {
          return $(_this).addClass('reveal');
        };
      })(this), 150 * iteration++);
    });
  };
  $mobileNavTrigger.on('click', function() {
    var open;
    open = $mobileNavTrigger.data('open');
    if (open) {
      unlockPage();
      $mobileNav[0].style = '';
      $mobileNavTrigger.add($mobileNav).removeClass('active rotate');
      setTimeout(function() {
        return $mobileNavItems.removeClass('reveal');
      }, 350);
    } else {
      lockPage();
      setMobileNavHeight();
      $mobileNavTrigger.add($mobileNav).addClass('active');
      revealItems();
      setTimeout(function() {
        return $mobileNavTrigger.addClass('rotate');
      }, 250);
    }
    return $mobileNavTrigger.data('open', !open);
  });
  return $$(window).on('resize', function() {
    if ($mobileNav.hasClass('active')) {
      return setMobileNavHeight();
    }
  });
})();

(function() {
  return $$('.header-nav-item.button, .hero-button').on('click', function(event) {
    if ($$('.cta_with_faqs').length) {
      event.preventDefault();
      return $$('html, body').animate({
        scrollTop: $$('.cta_with_faqs').offset().top + 60
      }, 500);
    }
  });
})();

/*! Sortable 1.4.2 - MIT | git://github.com/rubaxa/Sortable.git */
!function(a){"use strict";"function"==typeof define&&define.amd?define(a):"undefined"!=typeof module&&"undefined"!=typeof module.exports?module.exports=a():"undefined"!=typeof Package?Sortable=a():window.Sortable=a()}(function(){"use strict";function a(a,b){if(!a||!a.nodeType||1!==a.nodeType)throw"Sortable: 'el' must be HTMLElement, and not "+{}.toString.call(a);this.el=a,this.options=b=r({},b),a[L]=this;var c={group:Math.random(),sort:!0,disabled:!1,store:null,handle:null,scroll:!0,scrollSensitivity:30,scrollSpeed:10,draggable:/[uo]l/i.test(a.nodeName)?"li":">*",ghostClass:"sortable-ghost",chosenClass:"sortable-chosen",ignore:"a, img",filter:null,animation:0,setData:function(a,b){a.setData("Text",b.textContent)},dropBubble:!1,dragoverBubble:!1,dataIdAttr:"data-id",delay:0,forceFallback:!1,fallbackClass:"sortable-fallback",fallbackOnBody:!1};for(var d in c)!(d in b)&&(b[d]=c[d]);V(b);for(var f in this)"_"===f.charAt(0)&&(this[f]=this[f].bind(this));this.nativeDraggable=b.forceFallback?!1:P,e(a,"mousedown",this._onTapStart),e(a,"touchstart",this._onTapStart),this.nativeDraggable&&(e(a,"dragover",this),e(a,"dragenter",this)),T.push(this._onDragOver),b.store&&this.sort(b.store.get(this))}function b(a){v&&v.state!==a&&(h(v,"display",a?"none":""),!a&&v.state&&w.insertBefore(v,s),v.state=a)}function c(a,b,c){if(a){c=c||N,b=b.split(".");var d=b.shift().toUpperCase(),e=new RegExp("\\s("+b.join("|")+")(?=\\s)","g");do if(">*"===d&&a.parentNode===c||(""===d||a.nodeName.toUpperCase()==d)&&(!b.length||((" "+a.className+" ").match(e)||[]).length==b.length))return a;while(a!==c&&(a=a.parentNode))}return null}function d(a){a.dataTransfer&&(a.dataTransfer.dropEffect="move"),a.preventDefault()}function e(a,b,c){a.addEventListener(b,c,!1)}function f(a,b,c){a.removeEventListener(b,c,!1)}function g(a,b,c){if(a)if(a.classList)a.classList[c?"add":"remove"](b);else{var d=(" "+a.className+" ").replace(K," ").replace(" "+b+" "," ");a.className=(d+(c?" "+b:"")).replace(K," ")}}function h(a,b,c){var d=a&&a.style;if(d){if(void 0===c)return N.defaultView&&N.defaultView.getComputedStyle?c=N.defaultView.getComputedStyle(a,""):a.currentStyle&&(c=a.currentStyle),void 0===b?c:c[b];b in d||(b="-webkit-"+b),d[b]=c+("string"==typeof c?"":"px")}}function i(a,b,c){if(a){var d=a.getElementsByTagName(b),e=0,f=d.length;if(c)for(;f>e;e++)c(d[e],e);return d}return[]}function j(a,b,c,d,e,f,g){var h=N.createEvent("Event"),i=(a||b[L]).options,j="on"+c.charAt(0).toUpperCase()+c.substr(1);h.initEvent(c,!0,!0),h.to=b,h.from=e||b,h.item=d||b,h.clone=v,h.oldIndex=f,h.newIndex=g,b.dispatchEvent(h),i[j]&&i[j].call(a,h)}function k(a,b,c,d,e,f){var g,h,i=a[L],j=i.options.onMove;return g=N.createEvent("Event"),g.initEvent("move",!0,!0),g.to=b,g.from=a,g.dragged=c,g.draggedRect=d,g.related=e||b,g.relatedRect=f||b.getBoundingClientRect(),a.dispatchEvent(g),j&&(h=j.call(i,g)),h}function l(a){a.draggable=!1}function m(){R=!1}function n(a,b){var c=a.lastElementChild,d=c.getBoundingClientRect();return(b.clientY-(d.top+d.height)>5||b.clientX-(d.right+d.width)>5)&&c}function o(a){for(var b=a.tagName+a.className+a.src+a.href+a.textContent,c=b.length,d=0;c--;)d+=b.charCodeAt(c);return d.toString(36)}function p(a){var b=0;if(!a||!a.parentNode)return-1;for(;a&&(a=a.previousElementSibling);)"TEMPLATE"!==a.nodeName.toUpperCase()&&b++;return b}function q(a,b){var c,d;return function(){void 0===c&&(c=arguments,d=this,setTimeout(function(){1===c.length?a.call(d,c[0]):a.apply(d,c),c=void 0},b))}}function r(a,b){if(a&&b)for(var c in b)b.hasOwnProperty(c)&&(a[c]=b[c]);return a}var s,t,u,v,w,x,y,z,A,B,C,D,E,F,G,H,I,J={},K=/\s+/g,L="Sortable"+(new Date).getTime(),M=window,N=M.document,O=M.parseInt,P=!!("draggable"in N.createElement("div")),Q=function(a){return a=N.createElement("x"),a.style.cssText="pointer-events:auto","auto"===a.style.pointerEvents}(),R=!1,S=Math.abs,T=([].slice,[]),U=q(function(a,b,c){if(c&&b.scroll){var d,e,f,g,h=b.scrollSensitivity,i=b.scrollSpeed,j=a.clientX,k=a.clientY,l=window.innerWidth,m=window.innerHeight;if(z!==c&&(y=b.scroll,z=c,y===!0)){y=c;do if(y.offsetWidth<y.scrollWidth||y.offsetHeight<y.scrollHeight)break;while(y=y.parentNode)}y&&(d=y,e=y.getBoundingClientRect(),f=(S(e.right-j)<=h)-(S(e.left-j)<=h),g=(S(e.bottom-k)<=h)-(S(e.top-k)<=h)),f||g||(f=(h>=l-j)-(h>=j),g=(h>=m-k)-(h>=k),(f||g)&&(d=M)),(J.vx!==f||J.vy!==g||J.el!==d)&&(J.el=d,J.vx=f,J.vy=g,clearInterval(J.pid),d&&(J.pid=setInterval(function(){d===M?M.scrollTo(M.pageXOffset+f*i,M.pageYOffset+g*i):(g&&(d.scrollTop+=g*i),f&&(d.scrollLeft+=f*i))},24)))}},30),V=function(a){var b=a.group;b&&"object"==typeof b||(b=a.group={name:b}),["pull","put"].forEach(function(a){a in b||(b[a]=!0)}),a.groups=" "+b.name+(b.put.join?" "+b.put.join(" "):"")+" "};return a.prototype={constructor:a,_onTapStart:function(a){var b=this,d=this.el,e=this.options,f=a.type,g=a.touches&&a.touches[0],h=(g||a).target,i=h,k=e.filter;if(!("mousedown"===f&&0!==a.button||e.disabled)&&(h=c(h,e.draggable,d))){if(D=p(h),"function"==typeof k){if(k.call(this,a,h,this))return j(b,i,"filter",h,d,D),void a.preventDefault()}else if(k&&(k=k.split(",").some(function(a){return a=c(i,a.trim(),d),a?(j(b,a,"filter",h,d,D),!0):void 0})))return void a.preventDefault();(!e.handle||c(i,e.handle,d))&&this._prepareDragStart(a,g,h)}},_prepareDragStart:function(a,b,c){var d,f=this,h=f.el,j=f.options,k=h.ownerDocument;c&&!s&&c.parentNode===h&&(G=a,w=h,s=c,t=s.parentNode,x=s.nextSibling,F=j.group,d=function(){f._disableDelayedDrag(),s.draggable=!0,g(s,f.options.chosenClass,!0),f._triggerDragStart(b)},j.ignore.split(",").forEach(function(a){i(s,a.trim(),l)}),e(k,"mouseup",f._onDrop),e(k,"touchend",f._onDrop),e(k,"touchcancel",f._onDrop),j.delay?(e(k,"mouseup",f._disableDelayedDrag),e(k,"touchend",f._disableDelayedDrag),e(k,"touchcancel",f._disableDelayedDrag),e(k,"mousemove",f._disableDelayedDrag),e(k,"touchmove",f._disableDelayedDrag),f._dragStartTimer=setTimeout(d,j.delay)):d())},_disableDelayedDrag:function(){var a=this.el.ownerDocument;clearTimeout(this._dragStartTimer),f(a,"mouseup",this._disableDelayedDrag),f(a,"touchend",this._disableDelayedDrag),f(a,"touchcancel",this._disableDelayedDrag),f(a,"mousemove",this._disableDelayedDrag),f(a,"touchmove",this._disableDelayedDrag)},_triggerDragStart:function(a){a?(G={target:s,clientX:a.clientX,clientY:a.clientY},this._onDragStart(G,"touch")):this.nativeDraggable?(e(s,"dragend",this),e(w,"dragstart",this._onDragStart)):this._onDragStart(G,!0);try{N.selection?N.selection.empty():window.getSelection().removeAllRanges()}catch(b){}},_dragStarted:function(){w&&s&&(g(s,this.options.ghostClass,!0),a.active=this,j(this,w,"start",s,w,D))},_emulateDragOver:function(){if(H){if(this._lastX===H.clientX&&this._lastY===H.clientY)return;this._lastX=H.clientX,this._lastY=H.clientY,Q||h(u,"display","none");var a=N.elementFromPoint(H.clientX,H.clientY),b=a,c=" "+this.options.group.name,d=T.length;if(b)do{if(b[L]&&b[L].options.groups.indexOf(c)>-1){for(;d--;)T[d]({clientX:H.clientX,clientY:H.clientY,target:a,rootEl:b});break}a=b}while(b=b.parentNode);Q||h(u,"display","")}},_onTouchMove:function(b){if(G){a.active||this._dragStarted(),this._appendGhost();var c=b.touches?b.touches[0]:b,d=c.clientX-G.clientX,e=c.clientY-G.clientY,f=b.touches?"translate3d("+d+"px,"+e+"px,0)":"translate("+d+"px,"+e+"px)";I=!0,H=c,h(u,"webkitTransform",f),h(u,"mozTransform",f),h(u,"msTransform",f),h(u,"transform",f),b.preventDefault()}},_appendGhost:function(){if(!u){var a,b=s.getBoundingClientRect(),c=h(s),d=this.options;u=s.cloneNode(!0),g(u,d.ghostClass,!1),g(u,d.fallbackClass,!0),h(u,"top",b.top-O(c.marginTop,10)),h(u,"left",b.left-O(c.marginLeft,10)),h(u,"width",b.width),h(u,"height",b.height),h(u,"opacity","0.8"),h(u,"position","fixed"),h(u,"zIndex","100000"),h(u,"pointerEvents","none"),d.fallbackOnBody&&N.body.appendChild(u)||w.appendChild(u),a=u.getBoundingClientRect(),h(u,"width",2*b.width-a.width),h(u,"height",2*b.height-a.height)}},_onDragStart:function(a,b){var c=a.dataTransfer,d=this.options;this._offUpEvents(),"clone"==F.pull&&(v=s.cloneNode(!0),h(v,"display","none"),w.insertBefore(v,s)),b?("touch"===b?(e(N,"touchmove",this._onTouchMove),e(N,"touchend",this._onDrop),e(N,"touchcancel",this._onDrop)):(e(N,"mousemove",this._onTouchMove),e(N,"mouseup",this._onDrop)),this._loopId=setInterval(this._emulateDragOver,50)):(c&&(c.effectAllowed="move",d.setData&&d.setData.call(this,c,s)),e(N,"drop",this),setTimeout(this._dragStarted,0))},_onDragOver:function(a){var d,e,f,g=this.el,i=this.options,j=i.group,l=j.put,o=F===j,p=i.sort;if(void 0!==a.preventDefault&&(a.preventDefault(),!i.dragoverBubble&&a.stopPropagation()),I=!0,F&&!i.disabled&&(o?p||(f=!w.contains(s)):F.pull&&l&&(F.name===j.name||l.indexOf&&~l.indexOf(F.name)))&&(void 0===a.rootEl||a.rootEl===this.el)){if(U(a,i,this.el),R)return;if(d=c(a.target,i.draggable,g),e=s.getBoundingClientRect(),f)return b(!0),void(v||x?w.insertBefore(s,v||x):p||w.appendChild(s));if(0===g.children.length||g.children[0]===u||g===a.target&&(d=n(g,a))){if(d){if(d.animated)return;r=d.getBoundingClientRect()}b(o),k(w,g,s,e,d,r)!==!1&&(s.contains(g)||(g.appendChild(s),t=g),this._animate(e,s),d&&this._animate(r,d))}else if(d&&!d.animated&&d!==s&&void 0!==d.parentNode[L]){A!==d&&(A=d,B=h(d),C=h(d.parentNode));var q,r=d.getBoundingClientRect(),y=r.right-r.left,z=r.bottom-r.top,D=/left|right|inline/.test(B.cssFloat+B.display)||"flex"==C.display&&0===C["flex-direction"].indexOf("row"),E=d.offsetWidth>s.offsetWidth,G=d.offsetHeight>s.offsetHeight,H=(D?(a.clientX-r.left)/y:(a.clientY-r.top)/z)>.5,J=d.nextElementSibling,K=k(w,g,s,e,d,r);if(K!==!1){if(R=!0,setTimeout(m,30),b(o),1===K||-1===K)q=1===K;else if(D){var M=s.offsetTop,N=d.offsetTop;q=M===N?d.previousElementSibling===s&&!E||H&&E:N>M}else q=J!==s&&!G||H&&G;s.contains(g)||(q&&!J?g.appendChild(s):d.parentNode.insertBefore(s,q?J:d)),t=s.parentNode,this._animate(e,s),this._animate(r,d)}}}},_animate:function(a,b){var c=this.options.animation;if(c){var d=b.getBoundingClientRect();h(b,"transition","none"),h(b,"transform","translate3d("+(a.left-d.left)+"px,"+(a.top-d.top)+"px,0)"),b.offsetWidth,h(b,"transition","all "+c+"ms"),h(b,"transform","translate3d(0,0,0)"),clearTimeout(b.animated),b.animated=setTimeout(function(){h(b,"transition",""),h(b,"transform",""),b.animated=!1},c)}},_offUpEvents:function(){var a=this.el.ownerDocument;f(N,"touchmove",this._onTouchMove),f(a,"mouseup",this._onDrop),f(a,"touchend",this._onDrop),f(a,"touchcancel",this._onDrop)},_onDrop:function(b){var c=this.el,d=this.options;clearInterval(this._loopId),clearInterval(J.pid),clearTimeout(this._dragStartTimer),f(N,"mousemove",this._onTouchMove),this.nativeDraggable&&(f(N,"drop",this),f(c,"dragstart",this._onDragStart)),this._offUpEvents(),b&&(I&&(b.preventDefault(),!d.dropBubble&&b.stopPropagation()),u&&u.parentNode.removeChild(u),s&&(this.nativeDraggable&&f(s,"dragend",this),l(s),g(s,this.options.ghostClass,!1),g(s,this.options.chosenClass,!1),w!==t?(E=p(s),E>=0&&(j(null,t,"sort",s,w,D,E),j(this,w,"sort",s,w,D,E),j(null,t,"add",s,w,D,E),j(this,w,"remove",s,w,D,E))):(v&&v.parentNode.removeChild(v),s.nextSibling!==x&&(E=p(s),E>=0&&(j(this,w,"update",s,w,D,E),j(this,w,"sort",s,w,D,E)))),a.active&&((null===E||-1===E)&&(E=D),j(this,w,"end",s,w,D,E),this.save())),w=s=t=u=x=v=y=z=G=H=I=E=A=B=F=a.active=null)},handleEvent:function(a){var b=a.type;"dragover"===b||"dragenter"===b?s&&(this._onDragOver(a),d(a)):("drop"===b||"dragend"===b)&&this._onDrop(a)},toArray:function(){for(var a,b=[],d=this.el.children,e=0,f=d.length,g=this.options;f>e;e++)a=d[e],c(a,g.draggable,this.el)&&b.push(a.getAttribute(g.dataIdAttr)||o(a));return b},sort:function(a){var b={},d=this.el;this.toArray().forEach(function(a,e){var f=d.children[e];c(f,this.options.draggable,d)&&(b[a]=f)},this),a.forEach(function(a){b[a]&&(d.removeChild(b[a]),d.appendChild(b[a]))})},save:function(){var a=this.options.store;a&&a.set(this)},closest:function(a,b){return c(a,b||this.options.draggable,this.el)},option:function(a,b){var c=this.options;return void 0===b?c[a]:(c[a]=b,void("group"===a&&V(c)))},destroy:function(){var a=this.el;a[L]=null,f(a,"mousedown",this._onTapStart),f(a,"touchstart",this._onTapStart),this.nativeDraggable&&(f(a,"dragover",this),f(a,"dragenter",this)),Array.prototype.forEach.call(a.querySelectorAll("[draggable]"),function(a){a.removeAttribute("draggable")}),T.splice(T.indexOf(this._onDragOver),1),this._onDrop(),this.el=a=null}},a.utils={on:e,off:f,css:h,find:i,is:function(a,b){return!!c(a,b,a)},extend:r,throttle:q,closest:c,toggleClass:g,index:p},a.create=function(b,c){return new a(b,c)},a.version="1.4.2",a});;

$window = $$(window);

isMobileWidth = window.innerWidth <= 736;

isMobile = $$('html').hasClass('mobile');

isPageManagement = $$('body').hasClass('pages');

isPostManagement = $$('body').hasClass('posts');

isLeadManagement = $$('body').hasClass('leads');

(function($) {
  var DB, PAGES, POSTTYPES, PageItem, Post, PostType, SIDEBAR, SidebarItem, Variation, appendDynamicBlocks, applicableLeads, fieldTemplates, generateNewSlug, initForm, initSortables, makeGroupSortable, sectionIDs, sectionOffsets, setMinMax, setSidebarPosition, sidebarMinMax, updateSectionOffsets;
  fieldTemplates = {};
  $('#fieldTemplates').children().each(function() {
    var $template, name, template;
    $template = jQuery(this);
    name = $template.data('name');
    template = $template.html();
    return fieldTemplates[name] = template;
  });
  initForm = function($forms) {
    return $forms.each(function() {
      var $form;
      $form = $(this);
      if ($form.parent().parent().hasClass('fieldTemplates')) {
        return;
      }
      return new Form($form, {
        uniqueSteps: true,
        dontDisableFields: true,
        submitOnEnter: false
      });
    });
  };
  $('.manage-content-list').first().addClass('show').siblings().removeClass('show');
  DB = {
    'page': {
      insert: function(params) {
        var callback;
        callback = params.cb || function(res) {
          if (res.success) {
            return console.log('Page inserted successfuly!');
          }
        };
        return $.post('/api/insert/pages', params.data, callback, 'JSON');
      },
      update: function(params) {
        var callback, dataToSubmit;
        dataToSubmit = {
          'query': {
            '_id': params.id
          },
          'data': params.data || {}
        };
        if (!params.data) {
          dataToSubmit.data[params.name] = params.value;
        }
        callback = params.cb || function(res) {
          if (res.success) {
            return console.log('Page data successfuly updated!');
          }
        };
        return $.post('/api/update/pages', dataToSubmit, callback, 'JSON');
      },
      remove: function(params) {
        return $.post('/api/delete/pages', {
          _id: params.id
        }, params.cb, 'JSON');
      }
    },
    'variation': {
      update: function(params) {
        var callback, dataToSubmit;
        dataToSubmit = {
          'query': {
            '_id': params.id
          },
          'updateQuery': {
            '$set': params.data
          }
        };
        callback = params.cb || function(res) {
          if (res.success) {
            return console.log('Variation updated successfuly!');
          }
        };
        return $.post('/api/update/pages', dataToSubmit, callback, 'JSON');
      },
      save: function(params) {
        var callback, dataToSubmit;
        dataToSubmit = {
          'query': {
            '_id': params.id
          },
          'updateQuery': params.data
        };
        callback = params.cb || function(res) {
          if (res.success) {
            return console.log('Variation saved successfuly!');
          }
        };
        return $.post('/api/update/pages', dataToSubmit, callback, 'JSON');
      },
      remove: function(params) {
        var callback, dataToSubmit;
        dataToSubmit = {
          queries: [
            {
              'query': {
                '_id': params.id
              },
              'updateQuery': {
                '$unset': {}
              }
            }, {
              'query': {
                '_id': params.id
              },
              'updateQuery': {
                '$pull': {
                  'variations': 'null'
                }
              }
            }
          ]
        };
        dataToSubmit.queries[0].updateQuery.$unset["variations." + params.index] = 1;
        callback = params.cb || function(res) {
          if (res.success) {
            return console.log('Variation updated successfuly!');
          }
        };
        return $.ajax({
          method: 'POST',
          url: '/api/updatemulti/pages',
          data: dataToSubmit,
          contentType: 'application/x-www-form-urlencoded; charset=UTF-8',
          success: callback,
          dataType: 'json'
        });
      }
    },
    'post': {
      insert: function(params) {
        var callback;
        callback = params.cb || function(res) {
          if (res.success) {
            return console.log('Page inserted successfuly!');
          }
        };
        return $.post('/api/insert/posts', params.data, callback, 'JSON');
      },
      update: function(params) {
        var callback, dataToSubmit;
        dataToSubmit = {
          'query': {
            '_id': params.id
          },
          'data': params.data || {}
        };
        if (!params.data) {
          dataToSubmit.data[params.name] = params.value;
        }
        callback = params.cb || function(res) {
          if (res.success) {
            return console.log('Page data successfuly updated!');
          }
        };
        return $.post('/api/update/posts', dataToSubmit, callback, 'JSON');
      },
      remove: function(params) {
        return $.post('/api/delete/posts', {
          _id: params.id
        }, params.cb, 'JSON');
      }
    }
  };
  $('.logout').on('click', function() {
    return window.location = window.location.protocol + '//' + window.location.host + '/manage/logout';
  });
  window.existingSlugs = [];
  generateNewSlug = function(index) {
    var newSlug;
    if (index == null) {
      index = 1;
    }
    newSlug = 'new-page-' + index;
    if (existingSlugs.includes(newSlug)) {
      return newSlug = generateNewSlug(index + 1);
    } else {
      existingSlugs.push(newSlug);
      return newSlug;
    }
  };
  SIDEBAR = {
    'list': $('.manage-sidebar-list'),
    'template': $(fieldTemplates.sidebarItem),
    'items': [],
    addExisting: function($el) {
      var newItem;
      newItem = new SidebarItem($el.data('slug'), $el.children().html(), $el, $el.children());
      this.items.push(newItem);
      return newItem;
    },
    add: function(label, slug, itemToInsertAfter) {
      var $newItem, newItem;
      $newItem = $(this.template[0].cloneNode(true));
      newItem = new SidebarItem(slug, label, $newItem, $newItem.children());
      this.items.push(newItem);
      newItem.el.data('slug', newItem.slug).find('.manage-sidebar-list-item-text').html(newItem.label).end();
      if (itemToInsertAfter) {
        newItem.el.insertAfter(itemToInsertAfter);
      } else {
        newItem.el.appendTo(SIDEBAR.list);
      }
      newItem.show();
      return newItem;
    },
    remove: function(slug) {
      var indexOfItem, itemInArray;
      itemInArray = this.items.filter(function(item) {
        return item.slug === slug;
      });
      indexOfItem = this.items.indexOf(itemInArray);
      itemInArray[0].remove();
      if (indexOfItem !== -1) {
        this.items.splice(indexOfItem, 1);
        return true;
      } else {
        return false;
      }
    }
  };
  SidebarItem = function(slug, label, el, elTitle) {
    this.slug = slug || generateNewSlug();
    this.label = label || 'New Page';
    this.el = el;
    this.elTitle = elTitle;
    this.assocItem = null;
    this.el.data('item', this);
    SimplyBind('label').of(this).to('textContent').of(this.elTitle);
    if (slug) {
      existingSlugs.push(slug);
    }
    return this;
  };
  SidebarItem.prototype.show = function() {
    return this.el.addClass('active').siblings().removeClass('active');
  };
  SidebarItem.prototype.hide = function() {
    return this.el.removeClass('active');
  };
  SidebarItem.prototype.remove = function() {
    return this.el.removeClass('active').prev().addClass('active').end().remove();
  };
  $('.manage-sidebar-list-item').each(function() {
    return SIDEBAR.addExisting($(this));
  });

  /* ==========================================================================
  		 Sidebar - Fixed with scroll
  		 ==========================================================================
   */
  if ($('sidebar').length) {
    sidebarMinMax = void 0;
    setMinMax = function(afterInitLoad) {
      var padding;
      padding = afterInitLoad ? -60 : -30;
      sidebarMinMax = {
        min: $$('.header')[0].offsetHeight + 40,
        max: $$('body')[0].offsetHeight - ($$('.footer')[0].offsetHeight) - ($$('sidebar')[0].offsetHeight) + padding
      };
    };
    setSidebarPosition = function() {
      var maxWidth, overflowAmount, pageScroll, passedMax, passedMin;
      if (!isMobileWidth) {
        pageScroll = window.pageYOffset;
        passedMin = pageScroll >= sidebarMinMax.min;
        passedMax = pageScroll >= sidebarMinMax.max;
        maxWidth = $$('sidebar').parent()[0].offsetWidth - 1;
        if (passedMin && !passedMax) {
          $$('sidebar').addClass('fixed').css({
            'max-width': maxWidth,
            'top': '10px'
          });
        } else {
          if (!passedMin) {
            $$('sidebar').removeClass('fixed');
          }
          if (passedMax) {
            overflowAmount = (window.pageYOffset - (sidebarMinMax.max + 10)) * -1;
            $$('sidebar').css('top', overflowAmount);
          }
        }
      }
    };
    $window.on('scroll', setSidebarPosition);
    setMinMax();

    /* ==========================================================================
    			 Anchor link highlight on scroll
    			==========================================================================
     */
    $$('.manage-sidebar-list-item').first().addClass('active');
    $$('.manage-sidebar').on('click', '.manage-sidebar-list-item', function() {
      var sidebarItem;
      sidebarItem = $(this).data('item');
      sidebarItem.show();
      return sidebarItem.assocItem.show();
    });
    sectionOffsets = [];
    sectionIDs = [];
    updateSectionOffsets = function() {
      var index, length;
      length = $('.manage-content-list').length;
      index = 0;
      $$('.manage-faqs-list').each(function() {
        var $this, id, listOffset;
        $this = jQuery(this);
        id = $this.attr('id');
        listOffset = $this[0].offsetTop - 40;
        index++;
        if (sectionOffsets.length < length) {
          sectionOffsets.push(listOffset);
          return sectionIDs.push(id);
        } else {
          sectionOffsets[index] = listOffset;
          return sectionIDs[index] = id;
        }
      });
      return sectionOffsets[0] = 0;
    };
    updateSectionOffsets();
    $window.on('resize', util.debounce(function() {
      updateSectionOffsets();
      return setMinMax();
    }, 250));
  }
  if (isPageManagement) {
    Variation = function($el, page, isNew) {
      this.page = page;
      this["new"] = !!isNew;
      this.index = $el.data('variation') || $el.index() - 3 || 0;
      this.enabled = !$el.hasClass('disabled');
      this.el = $el;
      this.elTitle = $el.children('h6').children().eq(0);
      this.elNotes = $el.children('h6').children().eq(1);
      this.fieldNotes = $el.find('.varNotes').find('input');
      this.statusField = $el.find('.manage-content-list-item-content-status');
      $el.data('item', this);
      SimplyBind('index').of(this).to('textContent.index').of(this.elTitle).withTransform(function(newValue) {
        return newValue + 1;
      }).update();
      SimplyBind('value').of(this.fieldNotes).to('textContent.notes').of(this.elNotes).bothWays().withTransform(function(newValue) {
        if (newValue.toString()) {
          return "(" + newValue + ")";
        } else {
          return newValue.toString();
        }
      }).update();
      return this;
    };
    Variation.prototype.fetchValues = function() {
      return this.page.fetchValues()[this.index];
    };
    Variation.prototype.clone = function() {
      return this.page.addVariation(this);
    };
    Variation.prototype.disable = function() {
      var data;
      this.enabled = !this.enabled;
      data = {};
      data["variations." + this.index + ".enabled"] = this.enabled;
      return DB.variation.update({
        'id': this.page.id,
        'data': data,
        'cb': (function(_this) {
          return function(res) {
            if (res.success) {
              return _this.el.toggleClass('disabled');
            }
          };
        })(this)
      });
    };
    Variation.prototype["delete"] = function() {
      if (this.page.variations.length > 1) {
        if (confirm('Are you sure you want to delete this?')) {
          this.page.removeVariation(this);
          return DB.variation.remove({
            'id': this.page.id,
            'index': this.index,
            'cb': (function(_this) {
              return function(res) {
                return console.log("Variation #" + (_this.index + 1) + " successfuly removed");
              };
            })(this)
          });
        }
      } else {
        return alert('You must have at least one variation per page.');
      }
    };
    Variation.prototype.save = function() {
      var data, key, value, variationData;
      if (!this.page.form.Validate()) {
        this.page.form.focusOnFirstErrorField();
        this.statusField.html('Some fields have errors...');
        return setTimeout((function(_this) {
          return function() {
            return _this.statusField.html('');
          };
        })(this), 3500);
      } else {
        this.el.addClass('sending').removeClass('save_success save_error');
        data = {};
        variationData = this.fetchValues();
        if (this["new"]) {
          data.$push = {
            'variations': variationData
          };
        } else {
          data.$set = {};
          for (key in variationData) {
            value = variationData[key];
            data.$set["variations." + this.index + "." + key] = value;
          }
        }
        return DB.variation.save({
          'id': this.page.id,
          'data': data,
          'cb': (function(_this) {
            return function(res) {
              var state;
              state = res.success ? 'save_success' : 'save_error';
              _this.statusField.html(res.message);
              _this.el.removeClass('sending').addClass(state);
              setTimeout(function() {
                _this.el.removeClass('save_success save_error');
                return _this.statusField.html('');
              }, 3500);
              if (_this["new"]) {
                return _this["new"] = false;
              }
            };
          })(this)
        });
      }
    };
  }
  if (isPageManagement) {
    PAGES = {
      'list': $('.manage-content'),
      'template': $(fieldTemplates.page),
      'varTemplate': $(fieldTemplates.variation),
      'items': [],
      addExisting: function($el) {
        var newItem;
        newItem = new PageItem($el.attr('id'), $el.data('slug'), $el.find('.manage-content-list-title-text').html(), !$el.hasClass('disabled'), $el.data('rotation'), $el);
        this.items.push(newItem);
        return newItem;
      },
      add: function(sidebarItem, clone) {
        var $newItem, newItem;
        $newItem = clone ? $(clone[0].cloneNode(true)) : $(this.template[0].cloneNode(true));
        newItem = new PageItem('', sidebarItem.slug, sidebarItem.label, true, false, $newItem, sidebarItem);
        this.items.push(newItem);
        newItem.el.data('show', true).data('new', true).data('slug', newItem.slug).attr('id', '').addClass(newItem.slug).find('.manage-content-list-item').data('closed', true).end().appendTo(PAGES.list);
        newItem.show();
        return newItem;
      },
      remove: function(slug) {
        var indexOfItem, itemInArray;
        itemInArray = this.items.filter(function(item) {
          return item.slug === slug;
        });
        indexOfItem = this.items.indexOf(itemInArray);
        if (indexOfItem !== -1) {
          this.items.splice(indexOfItem, 1);
          return true;
        } else {
          return false;
        }
      }
    };
    PageItem = function(id, slug, name, enabled, rotation, el, sidebar) {
      var slugTransform;
      initForm(el);
      this.id = id;
      this.slug = slug;
      this.name = name;
      this.enabled = !!enabled;
      this.rotation = rotation;
      this.form = el.data('Form');
      this.el = el;
      this.elTitle = el.find('.manage-content-list-title-text').first();
      this.variations = el.find('.manage-content-list-item');
      this.sidebar = sidebar || SIDEBAR.items.filter((function(_this) {
        return function(item) {
          return item.slug === _this.slug;
        };
      })(this))[0];
      this.toggle = el.find('.rotation');
      this.button = el.find('.manage-content-list-add');
      this.fieldName = el.find('.page_data[name="name"]');
      this.fieldSlug = el.find('.page_data[name="slug"]');
      this.fieldVar = el.find('.currentVariation');
      this.currentVariation = this.fieldVar.val() || 0;
      this.variations = [];
      this.collectVariations();
      this.el.data('item', this);
      this.sidebar.assocItem = this;
      SimplyBind.setOption('invokeOnBind', false);
      SimplyBind('name').of(this).to('value').of(this.fieldName).bothWays();
      SimplyBind('value').of(this.fieldName).to('textContent').of(this.elTitle).and('label').of(this.sidebar).and((function(_this) {
        return function(newValue) {
          return DB.page.update({
            'id': _this.id,
            'name': 'name',
            'value': newValue
          });
        };
      })(this));
      slugTransform = function(val) {
        return val.toLowerCase().replace(/\s/g, '-');
      };
      SimplyBind('slug').of(this).to('slug').of(this.sidebar).bothWays().and('value').of(this.fieldSlug).bothWays().withTransform(slugTransform);
      SimplyBind('value').of(this.fieldSlug).to('class.slug').of(this.el).withTransform(slugTransform);
      SimplyBind('value').of(this.fieldSlug).to((function(_this) {
        return function(newValue) {
          return DB.page.update({
            'id': _this.id,
            'name': 'slug',
            'value': slugTransform(newValue)
          });
        };
      })(this));
      SimplyBind('value').of(this.fieldVar).to('currentVariation').of(this).and((function(_this) {
        return function(newValue) {
          return DB.page.update({
            'id': _this.id,
            'name': 'currentVariation',
            'value': newValue - 1
          });
        };
      })(this));
      SimplyBind('rotation').of(this).to('class.state').of(this.toggle);
      SimplyBind.setOption('invokeOnBind', true);
      return this;
    };
    PageItem.prototype.show = function() {
      return this.el.addClass('show').siblings().removeClass('show');
    };
    PageItem.prototype.hide = function() {
      return this.el.removeClass('show');
    };
    PageItem.prototype.disable = function() {
      this.enabled = !this.enabled;
      return DB.page.update({
        'id': this.el.attr('id'),
        'name': 'enabled',
        'value': this.enabled,
        'cb': (function(_this) {
          return function(res) {
            if (res.success) {
              return _this.el.toggleClass('disabled');
            }
          };
        })(this)
      });
    };
    PageItem.prototype.clone = function() {
      var cloneLabel, cloneSidebar, cloneSlug, clonedItem;
      cloneLabel = this.sidebar.label + ' (Copy)';
      cloneSlug = this.sidebar.slug + '-copy';
      cloneSidebar = SIDEBAR.add(cloneLabel, cloneSlug, this.sidebar.el);
      clonedItem = PAGES.add(cloneSidebar, this.el);
      clonedItem.show();
      return clonedItem.save(true);
    };
    PageItem.prototype.fetchValues = function() {
      var removeEmptyFileFields, variationsData;
      variationsData = this.el.data('Form').fetchValues();
      variationsData.forEach((function(_this) {
        return function(variation, index) {
          return variationsData[index].enabled = _this.variations[index].enabled;
        };
      })(this));
      removeEmptyFileFields = function(obj) {
        return obj;
      };
      variationsData = removeEmptyFileFields(variationsData);
      return variationsData;
    };
    PageItem.prototype.save = function(firstTime) {
      var data;
      data = {
        'name': this.name,
        'slug': this.slug,
        'enabled': this.enabled,
        'rotation': !!this.rotation,
        'currentVariation': this.currentVariation - 1,
        'variations': this.fetchValues()
      };
      if (firstTime) {
        return DB.page.insert({
          'data': data,
          'cb': (function(_this) {
            return function(res) {
              if (res.success) {
                console.log('Page created/added successfuly.');
                return $.post('/api/get/pages', {
                  slug: _this.slug
                }, function(res) {
                  _this.id = res[0]._id;
                  return _this.el.attr('id', res[0]._id);
                });
              }
            };
          })(this)
        });
      } else {
        return DB.page.update({
          'id': this.id,
          'data': data
        });
      }
    };
    PageItem.prototype.remove = function() {
      var isLastPage;
      isLastPage = !this.sidebar.el.siblings().length;
      if (isLastPage) {
        return alert('You cannot delete the last page in the database.');
      }
      if (confirm('Are you sure you want to delete this page?')) {
        PAGES.remove(this.slug);
        SIDEBAR.remove(this.slug);
        if (this.id) {
          return DB.page.remove({
            'id': this.id,
            'cb': (function(_this) {
              return function(res) {
                if (res.success) {
                  return _this.el.removeClass('show').prev().addClass('show').end().remove();
                }
              };
            })(this)
          });
        }
      }
    };
    PageItem.prototype.collectVariations = function() {
      var variations;
      variations = this.el.find('.step');
      variations.each((function(_this) {
        return function(i, el) {
          return _this.variations.push(new Variation($(el), _this));
        };
      })(this));
      return this.fieldVar.prop('max', this.variations.length);
    };
    PageItem.prototype.addVariation = function(varToClone) {
      var $newItem;
      $newItem = varToClone ? $(varToClone.el[0].cloneNode(true)) : $(fieldTemplates.variation);
      $newItem.addClass('closed').data('closed', true).data('new', true).data('variation', this.variations.length);
      if (varToClone) {
        $newItem.children('h6').children().eq(0).html('Variation {{index}}');
        $newItem.children('h6').children().eq(1).html(' {{notes}}');
      }
      this.button.before($newItem);
      this.variations.push(new Variation($newItem, this, true));
      this.fieldVar.prop('max', this.variations.length + 1);
      return this.form.AddStep($newItem);
    };
    PageItem.prototype.removeVariation = function(variation) {
      if (!variation) {
        return;
      }
      variation.el.remove();
      this.variations.splice(this.variations.indexOf(variation), 1);
      this.variations.forEach(function(variation, index) {
        return variation.index = index;
      });
      this.fieldVar.prop('max', this.variations.length + 1);
      return this.form.RemoveStep(variation.index);
    };
    $('.manage-content').find('.manage-content-list').each(function() {
      return PAGES.addExisting($(this));
    });
  }
  if (isPostManagement) {
    POSTTYPES = {
      'list': $('.manage-content'),
      'items': {},
      add: function($el) {
        var newItem;
        newItem = new PostType($el.attr('id'), $el.find('.manage-content-list-title-text').html(), $el);
        this.items[newItem.type] = newItem;
        return newItem;
      }
    };
    PostType = function(type, name, el, sidebar) {
      initForm(el);
      this.type = type;
      this.name = name;
      this.form = el.data('Form');
      this.el = el;
      this.elTitle = el.find('.manage-content-list-title-text').first();
      this.button = el.find('.manage-content-list-add');
      this.sidebar = sidebar || SIDEBAR.items.filter((function(_this) {
        return function(item) {
          return item.slug === _this.type;
        };
      })(this))[0];
      this.posts = [];
      this.el.data('item', this);
      this.sidebar.assocItem = this;
      this.collectPosts();
      return this;
    };
    PostType.prototype.show = function() {
      return this.el.addClass('show').siblings().removeClass('show');
    };
    PostType.prototype.hide = function() {
      return this.el.removeClass('show');
    };
    PostType.prototype.fetchValues = function() {
      var postsData, removeEmptyFileFields;
      postsData = this.el.data('Form').fetchValues();
      removeEmptyFileFields = function(obj) {
        if (obj.constructor === Array) {
          obj.forEach(function(subObj, index) {
            return obj[index] = removeEmptyFileFields(subObj);
          });
        }
        if (obj.constructor === Object) {
          Object.keys(obj).forEach(function(key) {
            var ref, ref1;
            if (key === 'image') {
              if (!obj[key]) {
                return delete obj[key];
              }
            } else {
              if (((ref = obj[key]) != null ? ref.constructor : void 0) === Object || ((ref1 = obj[key]) != null ? ref1.constructor : void 0) === Array) {
                return obj[key] = removeEmptyFileFields(obj[key]);
              }
            }
          });
        }
        return obj;
      };
      postsData = removeEmptyFileFields(postsData);
      return postsData;
    };
    PostType.prototype.collectPosts = function() {
      var posts;
      posts = this.el.find('.step');
      return posts.each((function(_this) {
        return function(i, el) {
          return _this.posts.push(new Post($(el), _this));
        };
      })(this));
    };
    PostType.prototype.addPost = function(postToClone) {
      var $newItem, newItem;
      $newItem = postToClone ? $(postToClone.el[0].cloneNode(true)) : $(fieldTemplates["post-" + this.type]);
      if (postToClone) {
        $newItem.removeClass('closed').data('closed', false).data('new', true);
        postToClone.toggle();
      } else {
        $newItem.addClass('closed').data('closed', true).data('new', true);
      }
      if (!postToClone) {
        $newItem.children('h6').html('New Item');
      }
      this.button.before($newItem);
      newItem = new Post($newItem, this, true);
      this.posts.push(newItem);
      if (postToClone) {
        newItem.name = postToClone.name + " (copy)";
        newItem.slug = postToClone.slug + "-copy";
        $newItem.siblings('.show').trigger('click');
      }
      return this.form.AddStep($newItem);
    };
    PostType.prototype.removePost = function(post) {
      if (!post) {
        return;
      }
      this.form.RemoveStep(post.el.index() - 1);
      post.el.remove();
      return this.posts.splice(this.posts.indexOf(post), 1);
    };
    Post = function($el, postType) {
      this.postType = postType;
      this.id = $el.attr('id');
      this.slug = $el.data('slug');
      this.single = $el.data('single');
      this.name = $el.data('name') || ("New " + this.single);
      this["new"] = $el.data('new');
      this.enabled = !$el.hasClass('disabled');
      this.el = $el;
      this.elTitle = $el.children('h6');
      this.statusField = $el.find('.manage-content-list-item-content-status');
      this.fieldSlug = $el.find('.fieldset.slug').first().find('input');
      switch (this.single) {
        case 'Pest':
          this.fieldName = $el.find('.fieldset.name').first().find('input');
          break;
        case 'Service':
          this.fieldName = $el.find('.fieldset.name').first().find('input');
          break;
        case 'FAQ':
          this.fieldName = $el.find('.fieldset.question').first().find('input');
          break;
        case 'FAQ Category':
          this.fieldName = $el.find('.fieldset.title').first().find('input');
      }
      $el.data('item', this);
      SimplyBind('name').of(this).to('value').of(this.fieldName).bothWays();
      SimplyBind('name').of(this).to('textContent').of(this.elTitle);
      if (this.fieldSlug.length) {
        SimplyBind('slug').of(this).to('value').of(this.fieldSlug).bothWays();
      }
      return this;
    };
    Post.prototype.toggle = function() {
      return this.elTitle.trigger('click');
    };
    Post.prototype.fetchValues = function() {
      return this.postType.fetchValues()[this.el.index() - 1];
    };
    Post.prototype.clone = function() {
      return this.postType.addPost(this);
    };
    Post.prototype.disable = function() {
      this.enabled = !this.enabled;
      return DB.post.update({
        'id': this.id,
        'data': {
          enabled: this.enabled
        },
        'cb': (function(_this) {
          return function(res) {
            if (res.success) {
              return _this.el.toggleClass('disabled');
            }
          };
        })(this)
      });
    };
    Post.prototype["delete"] = function() {
      if (this.postType.posts.length > 1) {
        if (confirm('Are you sure you want to delete this?')) {
          this.postType.removePost(this);
          if (this.id) {
            return DB.post.remove({
              'id': this.id,
              'cb': (function(_this) {
                return function(res) {
                  if (res.success) {
                    return console.log(_this.name + " successfuly removed");
                  }
                };
              })(this)
            });
          }
        }
      } else {
        return alert("You must have at least one " + this.single + ".");
      }
    };
    Post.prototype.save = function() {
      var data, postData;
      if (!this.postType.form.Validate()) {
        this.postType.form.focusOnFirstErrorField();
        this.statusField.html('Some fields have errors...');
        return setTimeout((function(_this) {
          return function() {
            return _this.statusField.html('');
          };
        })(this), 3500);
      } else {
        this.el.addClass('sending').removeClass('save_success save_error');
        data = {};
        postData = this.fetchValues();
        if (this["new"]) {
          postData.type = this.postType.type;
          postData.enabled = this.enabled;
          DB.post.insert({
            'data': postData,
            'cb': (function(_this) {
              return function(res) {
                var ref, state;
                if (res.success) {
                  console.log("Page inserted successfuly!");
                  if ((ref = res.result) != null ? ref._id : void 0) {
                    _this.id = res.result._id;
                  }
                  state = res.success ? 'save_success' : 'save_error';
                  _this.statusField.html(res.message);
                  _this.el.removeClass('sending').addClass(state);
                  return setTimeout(function() {
                    _this.el.removeClass('save_success save_error');
                    return _this.statusField.html('');
                  }, 3500);
                }
              };
            })(this)
          });
          return this["new"] = false;
        } else {
          return DB.post.update({
            'id': this.id,
            'data': postData,
            'cb': (function(_this) {
              return function(res) {
                var state;
                state = res.success ? 'save_success' : 'save_error';
                _this.statusField.html(res.message);
                _this.el.removeClass('sending').addClass(state);
                return setTimeout(function() {
                  _this.el.removeClass('save_success save_error');
                  return _this.statusField.html('');
                }, 3500);
              };
            })(this)
          });
        }
      }
    };
    $('.manage-content').find('.manage-content-list').each(function() {
      return POSTTYPES.add($(this));
    });
  }

  /**
  	 * In each campaign table there are actions available for each listed item
  	 * such as delete, mark as spam, etc. This script contains
  	 * the logic for each action and its reactions.
   */
  $$(document).on('click', '.lead-action', function(event, submitToDatabase) {
    var $actionButton, $leadStatus, action, currentStatus, data, leadID, newStatus, prevStatus, statusText, statusTextNegative, tooltipText, tooltipTextNegative;
    if (submitToDatabase == null) {
      submitToDatabase = true;
    }
    $actionButton = $(this);
    action = $actionButton.data('action');
    leadID = $actionButton.data('id');
    $leadStatus = $actionButton.parents('tr').find('.tbody-item-status');
    prevStatus = $leadStatus.data('status_old') || 'pending';
    currentStatus = $leadStatus.data('status');
    newStatus = action.match(/_(.+)$/);
    newStatus = newStatus ? newStatus[1] : '';
    tooltipText = newStatus === 'complete' ? 'Mark as Incomplete/Invalid' : 'Mark as Not Spam';
    statusText = newStatus === 'complete' ? 'Complete/Valid' : 'Spam';
    tooltipTextNegative = newStatus === 'complete' ? 'Mark as Complete/Valid' : 'Mark as Spam';
    statusTextNegative = 'Pending';

    /**
    		 * Action responsible for deleting a lead from the database.
     */
    if (action === 'delete') {
      if (submitToDatabase) {
        $.post('/api/delete/leads', {
          '_id': leadID
        });
      }
      $actionButton.parents('tr').fadeOut(450, function() {
        var data;
        $(this).remove();
      });
    }

    /**
    		 * Mark/Unmark as complete.
     */
    if (/^mark/.test(action)) {
      if (submitToDatabase) {
        data = {
          'query': {
            '_id': leadID
          },
          'data': {
            'status': newStatus,
            'status_old': currentStatus
          }
        };
        $.post('/api/update/leads', data);
      }
      $actionButton.attr("class", "tbody-item-actions-item lead-action un" + newStatus).data("action", "unmark_" + newStatus).find(".tbody-item-actions-item-text").html(tooltipText);
      $leadStatus.attr("class", "tbody-item-status " + newStatus).data("status", newStatus).data("status_old", currentStatus).find(".tbody-item-status-text").html(statusText);
    }
    if (/^unmark/.test(action)) {
      if (submitToDatabase) {
        data = {
          'query': {
            '_id': leadID
          },
          'data': {
            'status': prevStatus,
            'status_old': currentStatus
          }
        };
        $.post('/api/update/leads', data);
      }
      $actionButton.attr("class", "tbody-item-actions-item lead-action " + newStatus).data("action", "mark_" + newStatus).find(".tbody-item-actions-item-text").html(tooltipTextNegative);
      return $leadStatus.attr("class", "tbody-item-status " + prevStatus).data("status", prevStatus).data("status_old", currentStatus).find(".tbody-item-status-text").html(statusTextNegative);
    }
  });
  applicableLeads = [];
  $$(document).on('click', 'tbody .leads-table-checkbox', function() {
    var $checkbox, becameChecked, index, leadID;
    $checkbox = $(this);
    leadID = $checkbox.data('id');
    becameChecked = $checkbox.prop('checked');
    index = void 0;
    if (becameChecked) {
      return applicableLeads.push(leadID);
    } else {
      index = applicableLeads.indexOf(leadID);
      return applicableLeads.splice(index, 1);
    }
  });
  $$(document).on('click', 'thead .leads-table-checkbox', function() {
    var $checkbox, becameChecked, tableItems;
    $checkbox = $(this);
    becameChecked = $checkbox.prop('checked');
    applicableLeads = [];
    if (becameChecked) {
      return tableItems = $('.leads-table-checkbox', 'tbody').each(function() {
        var $checkbox;
        var leadID;
        $checkbox = $(this);
        leadID = $checkbox.data('id');
        applicableLeads.push(leadID);
        return $checkbox.prop('checked', true);
      });
    } else {
      return tableItems = $('.leads-table-checkbox', 'tbody').each(function() {
        return $(this).prop('checked', false);
      });
    }
  });
  $$('.leads-bulk-button').on('click', function() {
    var action, apiAction, bulkData;
    action = $$('#bulk-action').val();
    apiAction = 'lead_' + action.replace('unmark', 'mark');
    if (action && applicableLeads.length) {
      bulkData = {
        'bulk': true,
        'action': apiAction,
        'items': applicableLeads
      };
      switch (action) {
        case 'mark_complete':
          bulkData.complete = true;
          break;
        case 'unmark_complete':
          bulkData.complete = false;
          break;
        case 'mark_spam':
          bulkData.spam = true;
          break;
        case 'unmark_spam':
          bulkData.spam = false;
      }
      return applicableLeads.forEach(function(leadID) {
        var $leadRow;
        $leadRow = $('tr[data-id="' + leadID + '"]');
        if (action.includes('delete')) {
          return $leadRow.find('.lead-action.delete').trigger('click');
        } else if (action.includes('spam')) {
          if (action.includes('unmark')) {
            return $leadRow.find('.lead-action.unspam').trigger('click');
          } else {
            return $leadRow.find('.lead-action.spam').trigger('click');
          }
        } else if (action.includes('complete')) {
          if (action.includes('unmark')) {
            return $leadRow.find('.lead-action.incomplete').trigger('click');
          } else {
            return $leadRow.find('.lead-action.complete').trigger('click');
          }
        }
      });
    }
  });

  /**
  	 * The logic required to allow the admin to change the info
  	 * for a quote submission on the fly. This attaches event
  	 * listeners on the 'edit' element next to each field and
  	 * pushes the changes via ajax to the database.
   */
  $(document).on('click', '.lead-edit', function() {
    var $currentNode, $editButton, newNode, origValue;
    $editButton = $(this);
    $currentNode = $editButton.prev();
    origValue = $currentNode.text().replace(util.regEx.whiteSpace, '');
    newNode = '<input type="text" class="tbody-item-lead_details-item-value lead-value input_field" value="' + origValue + '" />';
    $currentNode.replaceWith(newNode);
    $editButton.prev().focus().select();
  });
  $(document).on('blur', '.lead-value.input_field', function() {
    var $inputNode, fieldName, fieldValue, firstname, lastname, leadID, newNode, submitValueChange, values;
    $inputNode = $(this);
    leadID = $inputNode.parents('tr').data('id');
    fieldName = $inputNode.parent().data('field_name');
    fieldValue = $inputNode.val();
    newNode = '<div class="tbody-item-lead_details-item-value lead-value"> ' + fieldValue + '</div>';
    submitValueChange = function(fieldName, fieldValue) {
      var dataToSubmit;
      dataToSubmit = {
        'query': {
          '_id': leadID
        },
        'data': {}
      };
      dataToSubmit.data[fieldName] = fieldValue;
      $.post('/api/update/leads', dataToSubmit);
    };
    $inputNode.replaceWith(newNode);
    if (fieldName === 'Full_Name') {
      values = fieldValue.split(' ');
      firstname = values[0];
      lastname = values[1];
      submitValueChange('First_Name', firstname);
      submitValueChange('Last_Name', lastname);
    } else {
      submitValueChange(fieldName, fieldValue);
    }
  });
  $('form').not('.manage_login-form').on('submit', function(event) {
    event.preventDefault();
    $(document.activeElement).blur();
  });

  /**
  	 * The logic and initialization of the table filters.
   */
  $$(document).ready(function() {
    $$('.campaign-table-filters').find('.input').each(function() {
      var $this;
      $this = jQuery(this);
      Form.prototype.attachEvents($this, 'change blur keypress');
    });
    $$('.campaign-table-filters-button').on('click', function() {
      $$('.campaign-table-filters').submit();
    });
    $$('.campaign-table-filters-item-input').on('keypress', function(e) {
      if (e.keyCode === 13) {
        $$('.campaign-table-filters').submit();
      }
    });
    if ($$('select.campaign-table-filters-item-input').length) {
      $$('select.campaign-table-filters-item-input').each(function() {
        var $this, fitlerValue;
        $this = jQuery(this);
        fitlerValue = $this[0].attributes.value.value;
        if (fitlerValue) {
          $this.val(fitlerValue).trigger('change');
        }
      });
    }
  });

  /**
  	 * This attaches an event listener to the question mark next to each
  	 * entry's IP address and upon hovering fetches data from ipinfo.io and
  	 * formats+inserts+shows the data in a tooltip.
   */
  $$(document).on('mouseover', '.tbody-item-ip_details', function() {
    var $parent, $this, address, loaded;
    $this = $(this);
    $parent = $this.parent();
    address = $this.data('ip');
    loaded = $this.data('loaded');
    if (!loaded) {
      $.get('http://ipinfo.io/' + address, (function(response) {
        var output;
        output = '';
        output += '<div class="tbody-item-ip_details-text-body-row">' + 'Country: <strong>' + response.country + '</strong>' + '</div>';
        output += '<div class="tbody-item-ip_details-text-body-row">' + 'City: <strong>' + response.city + ', ' + response.region + '</strong>' + '</div>';
        output += '<div class="tbody-item-ip_details-text-body-row">' + 'Zip Code: <strong>' + response.postal + '</strong>' + '</div>';
        output += '<div class="tbody-item-ip_details-text-body-row">' + 'Location: <strong>' + response.loc + '</strong>' + '</div>';
        output += '<div class="tbody-item-ip_details-text-body-row">' + 'Hostname: <strong>' + response.hostname + '</strong>' + '</div>';
        output += '<div class="tbody-item-ip_details-text-body-row">' + 'Organization: <strong>' + response.org + '</strong>' + '</div>';
        $this.addClass('ready').find('.tbody-item-ip_details-text-body').html(output);
      }), 'JSON');
      $this.data('loaded', !loaded);
    }
  });

  /**
  	 * Submits the value of the notes textbox everytime a 'change' event is triggered.
  	 * A change event is triggered mostly when the textfield is blurred.
   */
  $(document).on('change', '.tbody-item-notes', function() {
    var $field, dataToSubmit, leadID, notes;
    $field = $(this);
    notes = $field.val();
    leadID = $field.parents('tr').data('id');
    dataToSubmit = {
      'query': {
        '_id': leadID
      },
      'data': {
        'notes': notes
      }
    };
    $.post('/api/update/leads', dataToSubmit);
  });
  if (isPageManagement) {

    /* ==========================================================================
    			 Add Page
    			==========================================================================
     */
    $$('.manage-sidebar-outerwrap').on('click', '.add', function() {
      var page, sidebarItem;
      sidebarItem = SIDEBAR.add();
      page = PAGES.add(sidebarItem);
      page.save(true);
      return page.show();
    });

    /* ==========================================================================
    			 Disable page
    			==========================================================================
     */
    $$('.manage-content').on('click', '.disable_page', function() {
      var $page;
      $page = $(this).parents('form').first();
      return $page.data('item').disable();
    });

    /* ==========================================================================
    			 Delete page
    			==========================================================================
     */
    $$('.manage-content').on('click', '.delete_page', function() {
      var $page;
      $page = $(this).parents('form').first();
      return $page.data('item').remove();
    });

    /* ==========================================================================
    			 Clone page
    			==========================================================================
     */
    $$('.manage-content').on('click', '.clone_page', function() {
      var $page;
      $page = $(this).parents('form').first();
      return $page.data('item').clone();
    });

    /* ==========================================================================
    			 Enable Variation Rotation
    			==========================================================================
     */
    $('.manage-content').on('click', '.rotation', function() {
      var $page, $toggle, isOn, newState, page;
      $toggle = $(this);
      $page = $toggle.parents('form').first();
      page = $page.data('item');
      isOn = page.rotation;
      newState = isOn ? '' : 'on';
      DB.page.update({
        'id': page.id,
        'name': 'rotation',
        'value': !!newState
      });
      return page.rotation = newState;
    });

    /* ==========================================================================
    			 Add variation
    			==========================================================================
     */
    $$('.manage-content').on('click', '.manage-content-list-add.add', function() {
      var page;
      page = $(this).parents('form').first().data('item');
      return page.addVariation();
    });
  }
  if (isPostManagement) {

    /* ==========================================================================
    			 Add Post
    			==========================================================================
     */
    $$('.manage-content').on('click', '.manage-content-list-add.add', function() {
      var postType;
      postType = $(this).parents('form').first().data('item');
      return postType.addPost();
    });

    /* ==========================================================================
    			 Clone post
    			==========================================================================
     */
    $$('.manage-content').on('click', '.manage-content-list-item-content-button.clone', function() {
      var post;
      post = $(this).parents('.manage-content-list-item').first().data('item');
      return post.clone();
    });

    /* ==========================================================================
    			 Disable post
    			==========================================================================
     */
    $$('.manage-content').on('click', '.post_action.disable', function() {
      var post;
      post = $(this).parents('.manage-content-list-item').first().data('item');
      return post.disable();
    });

    /* ==========================================================================
    			 Delete post
    			==========================================================================
     */
    $$('.manage-content').on('click', '.manage-content-list-item-content-button.delete', function() {
      var post;
      post = $(this).parents('.manage-content-list-item').first().data('item');
      return post["delete"]();
    });

    /* ==========================================================================
    			 Save post
    			==========================================================================
     */
    $$('.manage-content').on('click', '.manage-content-list .save', function() {
      var post;
      post = $(this).parents('.manage-content-list-item').first().data('item');
      return post.save();
    });
  }
  if (isPageManagement) {

    /* ==========================================================================
    			 Clone variation
    			==========================================================================
     */
    $$('.manage-content').on('click', '.manage-content-list-item-content-button.clone', function() {
      var variation;
      variation = $(this).parents('.manage-content-list-item').first().data('item');
      return variation.clone();
    });

    /* ==========================================================================
    			 Disable variation
    			==========================================================================
     */
    $$('.manage-content').on('click', '.variation_action.disable', function() {
      var variation;
      variation = $(this).parents('.manage-content-list-item').first().data('item');
      return variation.disable();
    });

    /* ==========================================================================
    			 Delete variation
    			==========================================================================
     */
    $$('.manage-content').on('click', '.manage-content-list-item-content-button.delete', function() {
      var variation;
      variation = $(this).parents('.manage-content-list-item').first().data('item');
      return variation["delete"]();
    });

    /* ==========================================================================
    			 Save variation
    			==========================================================================
     */
    $$('.manage-content').on('click', '.manage-content-list .save', function() {
      var variation;
      variation = $(this).parents('.manage-content-list-item').first().data('item');
      return variation.save();
    });
  }

  /* ==========================================================================
  	   Block Dynamic Appension
  	   ==========================================================================
   */
  appendDynamicBlocks = function(selectField, blockValues) {
    var $backupBlock, $dynamicBlock, $extraFields, $fieldset, $repeaterItem, $selectField, dynamicBlockMarkup, fieldValues, formInstance, repeaterInstance, selectedBlock;
    $selectField = $(selectField);
    selectedBlock = $selectField.val();
    fieldValues = null;
    if (selectedBlock) {
      $fieldset = $selectField.parents('.fieldset').first();
      $repeaterItem = $fieldset.parent().parent();
      repeaterInstance = $fieldset.parents('.fieldset').first().data('Field');
      formInstance = repeaterInstance.form;
      blockValues = blockValues || repeaterInstance.comments;
      dynamicBlockMarkup = $("#block-" + selectedBlock).html();
      $dynamicBlock = $("<div class='dynamic_block' data-block='" + selectedBlock + "'>" + dynamicBlockMarkup + "</div>");
      $backupBlock = $("<div class='dynamic_block_backup'></div>");
      if (dynamicBlockMarkup) {
        $dynamicBlock.insertAfter($fieldset);
        $extraFields = $dynamicBlock.children('.dynamic_block').children('.fieldset');
        $dynamicBlock.children('.fieldset').add($extraFields).each(function() {
          var fieldInstance;
          repeaterInstance.addChildField($(this));
          fieldInstance = $(this).data('Field');
          if (blockValues) {
            fieldValues = blockValues[$repeaterItem.index()];
            if (fieldInstance.type.includes('repeater') && fieldValues[fieldInstance.name].constructor !== Array) {
              fieldValues[fieldInstance.name] = util.convertObjectToArray(fieldValues[fieldInstance.name]);
            }
            return fieldInstance.setValue(fieldValues[fieldInstance.name]);
          }
        });
        $dynamicBlock.find('[name="blocks---slug[]"]').not('.disabled_forever').each(function() {
          return appendDynamicBlocks(this, fieldValues.blocks);
        });
      }
      return $backupBlock.insertAfter($dynamicBlock);
    }
  };
  $('.manage-content').find('[name="blocks---slug[]"]').not('.disabled_forever').each(function() {
    return appendDynamicBlocks(this);
  });
  $(document).on('change', '[name="blocks---slug[]"]', function() {
    var $backupBlock, $currentDynamicBlock, $dynamicBlock, $existingBlockInBackup, $fieldset, $selectField, dynamicBlockMarkup, formInstance, repeaterInstance, selectedBlock;
    $selectField = $(this);
    $fieldset = $selectField.parents('.fieldset').first();
    selectedBlock = $selectField.val();
    repeaterInstance = $fieldset.parents('.fieldset').first().data('Field');
    formInstance = repeaterInstance.form;
    dynamicBlockMarkup = $("#block-" + selectedBlock).html();
    $currentDynamicBlock = $fieldset.next();
    $dynamicBlock = $("<div class='dynamic_block' data-block='" + selectedBlock + "'>" + dynamicBlockMarkup + "</div>");
    $backupBlock = $fieldset.siblings('.dynamic_block_backup');
    if ($backupBlock.length === 0) {
      $backupBlock = $("<div class='dynamic_block_backup'></div>");
      if ($currentDynamicBlock.length) {
        $backupBlock.insertAfter($currentDynamicBlock);
      } else {
        $backupBlock.insertAfter($fieldset);
      }
    }
    if ($currentDynamicBlock.length) {
      $currentDynamicBlock.children('.fieldset').each(function() {
        return repeaterInstance.removeChildField($(this));
      }).end().appendTo($backupBlock);
    }
    if ($backupBlock.children().length) {
      $existingBlockInBackup = $backupBlock.children().filter(function() {
        return $(this).data('block') === selectedBlock;
      });
      if ($existingBlockInBackup.length) {
        $dynamicBlock = $existingBlockInBackup;
      }
    }
    if (dynamicBlockMarkup) {
      $dynamicBlock.insertAfter($fieldset);
      return $dynamicBlock.children('.fieldset').each(function() {
        return repeaterInstance.addChildField($(this));
      });
    }
  });
  initForm($$('.manage_login-form'));
  $$('.manage_login-form').off();
  $$('.manage_login-form-button').on('click', function() {
    $$('.manage_login-form').submit();
  });

  /* ==========================================================================
  		 Item opening mechanism
  		==========================================================================
   */
  $$('.manage-content').find('.toggle_open').each(function() {
    var $item;
    $item = $(this).parents('.step').first();
    if (!$item.hasClass('start_opened')) {
      return $item.addClass('closed').data('closed', true);
    } else {
      return $item.addClass('show').data('closed', false);
    }
  });
  $$('.manage-content').on('click', '.toggle_open', function() {
    var $content, $item, $toggle, closed, formInstance;
    $toggle = jQuery(this).parent();
    $item = $(this).parents('.step').first();
    $content = $toggle.children('.toggled_content');
    closed = $toggle.data('closed');
    formInstance = $item.parents('form').first().data('Form');
    formInstance.setCurrentStepTo($item);
    if (closed) {
      $toggle.removeClass('closed').addClass('show').data('closed', true);
    } else {
      $toggle.addClass('closed').removeClass('show');
    }
    $content.slideToggle(300);
    $toggle.data('closed', !closed);
    return setTimeout(function() {
      return setMinMax(true);
    }, 700);
  });
  $$('.manage-content').on('mouseup touchend', '.repeater-toggle, .group-toggle', function() {
    return setTimeout(function() {
      return setMinMax(true);
    }, 700);
  });
  makeGroupSortable = function($group, groupChildrenName) {
    var group, groupName, variationName;
    group = $group[0];
    variationName = $group.parents('.manage-content-list-item').attr('id');
    groupName = group.classList[0];
    return $group.each(function() {
      var $groupItem, groupItem;
      $groupItem = $(this);
      groupItem = this;
      return $groupItem.data('Sortable', new Sortable(groupItem, {
        group: variationName + '___' + groupName,
        sort: true,
        draggable: groupChildrenName,
        onUpdate: function(event) {
          var parentRepeater;
          parentRepeater = $(event.target).parents('.fieldset').first().data('Field');
          return parentRepeater.collectFields();
        }
      }));
    });
  };
  initSortables = function($variation) {
    var $repeaterItems;
    $repeaterItems = $variation.find('.repeater-items');
    if ($repeaterItems.length) {
      return makeGroupSortable($repeaterItems, '.repeater-item');
    }
  };
  return $('.manage-content-list-item').each(function() {
    return initSortables($(this));
  });
})(jQuery);
