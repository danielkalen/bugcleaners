// Generated by CoffeeScript 1.10.0
(function() {
  var PAGES, PageItem;

  if (isPageManagement) {
    PAGES = {
      'list': $('.manage-content'),
      'template': $(fieldTemplates.page),
      'items': [],
      addExisting: function($el) {
        var newItem;
        newItem = new PageItem($el.attr('id'), $el.data('slug'), $el.find('.manage-content-list-title-text').html(), !$el.hasClass('disabled'), $el.data('rotation'), $el);
        this.items.push(newItem);
        return newItem;
      },
      add: function(sidebarItem, clone) {
        var $newItem, newItem;
        $newItem = clone ? clone.clone() : this.template.clone();
        newItem = new PageItem('', sidebarItem.slug, sidebarItem.label, true, false, $newItem, sidebarItem);
        this.items.push(newItem);
        newItem.el.data('show', true).data('new', true).data('slug', newItem.slug).attr('id', '').addClass(newItem.slug).find('.manage-content-list-item').data('closed', true).end().appendTo(PAGES.list);
        newItem.show();
        initForm(newItem.el);
        return newItem;
      },
      remove: function(slug) {
        var indexOfItem, itemInArray;
        itemInArray = this.items.filter(function(item) {
          return item.slug === slug;
        });
        indexOfItem = this.items.indexOf(itemInArray);
        if (indexOfItem !== -1) {
          this.items.splice(indexOfItem, 1);
          return true;
        } else {
          return false;
        }
      }
    };
    PageItem = function(id, slug, name, enabled, rotation, el, sidebar) {
      var slugTransform;
      this.id = id;
      this.slug = slug;
      this.name = name;
      this.enabled = !!enabled;
      this.rotation = rotation;
      this.el = el;
      this.elTitle = el.find('.manage-content-list-title-text').first();
      this.variations = el.find('.manage-content-list-item');
      this.sidebar = sidebar || SIDEBAR.items.filter((function(_this) {
        return function(item) {
          return item.slug === _this.slug;
        };
      })(this))[0];
      this.toggle = el.find('.rotation');
      this.fieldName = el.find('.page_data[name="name"]');
      this.fieldSlug = el.find('.page_data[name="slug"]');
      this.fieldVar = el.find('.currentVariation');
      this.currentVariation = this.fieldVar.val() || 0;
      this.el.data('item', this);
      this.sidebar.assocItem = this;
      SimplyBind('name').of(this).to('value').of(this.fieldName).bothWays();
      SimplyBind('value').of(this.fieldName).to('textContent').of(this.elTitle);
      SimplyBind('value').of(this.fieldName).to('label').of(this.sidebar);
      SimplyBind('value').of(this.fieldName).to((function(_this) {
        return function(newValue) {
          return DB.page.update({
            'id': _this.id,
            'name': 'name',
            'value': newValue
          });
        };
      })(this));
      slugTransform = function(val) {
        return val.toLowerCase().replace(/\s/g, '-');
      };
      SimplyBind('slug').of(this).to('slug').of(this.sidebar).bothWays().withTransform(slugTransform);
      SimplyBind('slug').of(this).to('value').of(this.fieldSlug).bothWays().withTransform(slugTransform);
      SimplyBind('value').of(this.fieldSlug).to('class.slug').of(this.el).withTransform(slugTransform);
      SimplyBind('value').of(this.fieldSlug).to((function(_this) {
        return function(newValue) {
          return DB.page.update({
            'id': _this.id,
            'name': 'slug',
            'value': slugTransform(newValue)
          });
        };
      })(this));
      SimplyBind('value').of(this.fieldVar).to('currentVariation').of(this);
      SimplyBind('value').of(this.fieldVar).to((function(_this) {
        return function(newValue) {
          return DB.page.update({
            'id': _this.id,
            'name': 'currentVariation',
            'value': newValue - 1
          });
        };
      })(this));
      SimplyBind('rotation').of(this).to('class.state').of(this.toggle);
      return this;
    };
    PageItem.prototype.show = function() {
      return this.el.addClass('show').siblings().removeClass('show');
    };
    PageItem.prototype.hide = function() {
      return this.el.removeClass('show');
    };
    PageItem.prototype.disable = function() {
      this.enabled = !this.enabled;
      DB.page.update({
        'id': this.el.attr('id'),
        'name': 'enabled',
        'value': this.enabled,
        'cb': (function(_this) {
          return function(res) {
            if (res.success) {
              return _this.el.toggleClass('disabled');
            }
          };
        })(this)
      });
      if (this.enabled) {
        this.el.addClass('disabled');
      } else {
        this.el.removeClass('disabled');
      }
      return log(this.enabled, this.el[0]);
    };
    PageItem.prototype.clone = function() {
      var cloneLabel, cloneSidebar, cloneSlug, clonedItem;
      cloneLabel = this.sidebar.label + ' (Copy)';
      cloneSlug = this.sidebar.slug + '-copy';
      cloneSidebar = SIDEBAR.add(cloneLabel, cloneSlug, this.sidebar.el);
      clonedItem = PAGES.add(cloneSidebar, this.el);
      clonedItem.show();
      return clonedItem.save(true);
    };
    PageItem.prototype.fetchValues = function() {
      var removeEmptyFileFields, variations;
      variations = this.el.data('Form').fetchValues();
      variations.forEach((function(_this) {
        return function(variation, index) {
          return variations[index].enabled = !_this.variations.eq(index).hasClass('disabled');
        };
      })(this));
      removeEmptyFileFields = function(obj) {
        if (obj.constructor === Array) {
          obj.forEach(function(subObj) {
            return removeEmptyFileFields(subObj);
          });
        }
        if (obj.constructor === Object) {
          return Object.keys(obj).forEach(function(key) {
            if (key === 'image') {
              if (!obj[key]) {
                return delete obj[key];
              }
            } else {
              if (obj[key].constructor === Object || obj[key].constructor === Array) {
                return removeEmptyFileFields(obj[key]);
              }
            }
          });
        }
      };
      removeEmptyFileFields(variations);
      return variations;
    };
    PageItem.prototype.save = function(firstTime) {
      var action, data;
      action = firstTime ? 'insert' : 'update';
      data = {
        'name': this.name,
        'slug': this.slug,
        'enabled': this.enabled,
        'rotation': !!this.rotation,
        'currentVariation': this.currentVariation - 1,
        'variations': this.fetchValues()
      };
      if (firstTime) {
        return DB.page.insert({
          'data': data,
          'cb': (function(_this) {
            return function(res) {
              if (res.success) {
                console.log('Page created/added successfuly.');
                return $.post('/api/get/pages', {
                  slug: _this.slug
                }, function(res) {
                  _this.id = res[0]._id;
                  return _this.el.attr('id', res[0]._id);
                });
              }
            };
          })(this)
        });
      } else {
        return DB.page.update({
          'id': this.id,
          'data': data
        });
      }
    };
    PageItem.prototype.remove = function() {
      var isLastPage;
      isLastPage = !this.sidebar.el.siblings().length;
      if (isLastPage) {
        return alert('You cannot delete the last page in the database.');
      }
      if (confirm('Are you sure you want to delete this page?')) {
        PAGES.remove(this.slug);
        SIDEBAR.remove(this.slug);
        if (this.id) {
          return DB.page.remove({
            'id': this.id,
            'cb': (function(_this) {
              return function(res) {
                if (res.success) {
                  return _this.el.removeClass('show').prev().addClass('show').end().remove();
                }
              };
            })(this)
          });
        }
      }
    };
    $('.manage-content').find('.manage-content-list').each(function() {
      return PAGES.addExisting($(this));
    });
  }

}).call(this);
