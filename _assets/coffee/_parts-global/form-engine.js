// Generated by CoffeeScript 1.10.0
(function() {
  (function($) {
    var $window, Field, defaultFns, defaultOptions, fixWidth, messages, parseWidth, regEx, textChangeEvent;
    $window = $(window);
    textChangeEvent = 'input';
    messages = {
      'error': '<div class="results-message error">An unknown error has occured on the server, please contact customer support for help.</div>',
      'loading': '<div class="loading"><div class="loading-title">Processing your information...</div><div class="loading-gif"></div></div>'
    };
    defaultOptions = {
      'submitUrl': '/ajax',
      'stepClosedHeight': 39,
      'heightTransitions': false,
      'validateOnTyping': false,
      'preserveValuesAfterRefresh': true,
      'hasLoadingStep': true,
      'forceAjaxSubmit': false,
      'submitOnEnter': true,
      'dontDisableFields': false,
      'uniqueSteps': false,
      'customTransition': false,
      'heightToggleAnimation': true,
      'customNext': false,
      'customBack': false,
      'customSubmit': false,
      'callbackOnPrepare': function() {},
      'callbackOnResults': function() {},
      'callbackOnValidate': function() {},
      'callbackOnNextStep': function() {},
      'callbackOnBackStep': function() {},
      'callbackOnEventAttachment': function() {}
    };
    window.Form = function($formEl, options) {
      this.options = $.extend(defaultOptions, options);
      this.window = $window;
      this.skippedAStep = false;
      this.disabled = false;
      this.step = {
        'current': null,
        'prev': null,
        'next': null
      };
      this.action = $formEl.data('action');
      if (this.action) {
        this.form = $formEl;
      } else {
        this.form = $formEl.find('form').first();
        this.action = this.form.data('action');
        if (!this.action) {
          this.form = $formEl;
        }
      }
      this.fields = [];
      this.fieldsByName = {};
      this.fieldsRequired = [];
      this.fieldsInSteps = [];
      this.stepIndexOffset = this.form.find('.step').first().index();
      if (this.stepIndexOffset < 0) {
        this.stepIndexOffset = 0;
      }
      this.resultsPlaceholder = this.form.find('.results');
      this.multiStep = this.form.find('.step').length > 1;
      this.focused_atleast_once = false;
      if (!this.form.data('Form')) {
        this.form.data('Form', this);
      }
      this.Prepare(true);
      if (this.options.heightTransitions && this.multiStep) {
        this.manageStepHeight(this.options.stepClosedHeight);
      }
      return this;
    };
    Field = function($field, formInstance, customFns) {
      var customMethod, instance, method, name, ref, ref1;
      if (customFns == null) {
        customFns = {};
      }
      $field.data('Field', this);
      instance = this;
      this.form = formInstance;
      this.step = $field.parents('.step').first();
      this.field = $field;
      this.data = this.field.data();
      this.input = this.field.find('.input');
      this.type = this.data.type;
      this.name = this.data.realname || this.data.name;
      this.nameReal = this.data.name;
      if (this.data.pattern) {
        this.pattern = new RegExp(this.data.pattern);
      }
      if (this.data.force_pattern) {
        this.forcePattern = this.data.force_pattern;
      }
      if (this.data.force_live) {
        this.forceLive = this.data.force_live;
      }
      if (this.data.comments) {
        this.comments = this.data.comments;
      }
      if (this.data.desc) {
        this.desc = this.data.desc;
      }
      if (this.data.error) {
        this.errorMsg = this.data.error;
      }
      this["default"] = this.data.default_value;
      this.required = this.data.required === '1' || this.data.required === 1;
      if (this.data.minimum != null) {
        this.minimum = this.data.minimum;
      }
      if (this.data.maximum != null) {
        this.maximum = this.data.maximum;
      }
      this.collapsed = !!this.data.collapsed;
      this.disabled = this.data.disabled_forever === '1' || false;
      if (this.data.disabled_forever) {
        this.disabledForever = this.disabled;
      }
      if (this.data.height) {
        this.height = this.data.height;
      }
      if (this.data.depends_on) {
        this.dependsOn = this.data.depends_on;
      }
      if (this.data.condition_scope) {
        this.conditionScope = this.data.condition_scope;
      }
      if (this.data.depends_on) {
        this.comparison = this.data.comparison || '=';
      }
      if (this.data.depends_on) {
        this.condition = this.data.condition;
      }
      if (this.data.conditional_values) {
        this.conditionalValues = this.data.conditional_values;
      }
      if (this.data.depends_on) {
        this.revealed = null;
      }
      this.value = this["default"] || null;
      this.valid = false;
      this.conditionalDeps = {};
      this.conditionalDeps.cbs = {
        'deps': [],
        'callbacks': []
      };
      if (this.disabled) {
        this.disable();
      }
      if (this.forcePattern) {
        switch (this.forcePattern) {
          case 'slug':
            this.forceSpecial = true;
            break;
          case 'name':
            this.forceSpecial = true;
            break;
          case 'lower':
            this.forceSpecial = true;
            break;
          case 'upper':
            this.forceSpecial = true;
            break;
          default:
            if (this.forcePattern) {
              this.forcePattern = new RegExp(this.forcePattern);
            }
        }
      }
      ref = Form.prototype.fieldProtos[this.type];
      for (name in ref) {
        method = ref[name];
        if (name === 'prepareConditional') {
          if (this.dependsOn) {
            this[name] = method;
          }
        } else {
          this[name] = method;
        }
      }
      if (customFns[this.type] != null) {
        ref1 = customFns[this.type];
        for (name in ref1) {
          customMethod = ref1[name];
          this[name] = customMethod;
        }
      }
      if (this.prepare != null) {
        this.prepare();
      } else {
        throw new Error("Invalid field type! Type: " + this.type + ", Name: " + this.name);
      }
      if (this.dependsOn) {
        if (this.required) {
          this.requiredOriginally = true;
        }
        setTimeout(this.prepareConditional.bind(this), 0);
      }
      if (this.conditionalValues) {
        setTimeout(this.prepareConditionalValues.bind(this), 0);
      }
      return this;
    };
    Form.prototype.Field = Field;
    regEx = {
      'slug': /^[a-z0-9-]+$/,
      'name': /^[a-z0-9_]+$/,
      'lower': /^[a-z]+$/,
      'upper': /^[A-Z]+$/
    };
    Field.prototype = {
      'constructor': Field,
      prepareConditional: function() {
        var $context;
        $context = (function() {
          switch (this.conditionScope) {
            case 'form':
              return this.form.form;
            case 'step':
              if (this.step.length) {
                return this.step;
              } else {
                return this.field.parents('.step').first();
              }
            case 'repeater':
              return this.field.parents('.fieldset').last();
            case 'repeater-1':
              return this.field.parents('.fieldset').eq(1);
            case 'repeater-2':
              return this.field.parents('.fieldset').eq(2);
            case 'sibling':
              return this.field.parent();
            default:
              return this.form.form;
          }
        }).call(this);
        this.masterField = $context.find('[data-realname*="' + this.dependsOn + '"]').first();
        this.masterInstance = this.masterField.data('Field');
        if (this.masterInstance == null) {
          return console.log("Conditional field '" + this.name + "' has no matching master field.", this);
        }
        return this.masterInstance.subscribe(this, this.condition, this.comparison);
      },
      prepareConditionalValues: function() {
        var callbacksOnMasterChange, label, masterChangeCallback, masterFields, optionsLabels;
        if (this.type !== 'select' && (typeof SimplyBind === "undefined" || SimplyBind === null)) {
          return;
        }
        masterFields = [];
        callbacksOnMasterChange = [];
        this.options = [];
        optionsLabels = {};
        label = this.input.children()[0].label;
        masterChangeCallback = (function(_this) {
          return function(passedTest, option) {
            var index, optionValue;
            optionValue = option.value;
            if (passedTest) {
              if (!_this.options.includes(optionValue)) {
                return _this.options.push(optionValue);
              }
            } else {
              index = _this.options.indexOf(optionValue);
              return _this.options.splice(index, 1);
            }
          };
        })(this);
        this.input.children().each((function(_this) {
          return function(i, opt) {
            if (i === 0) {
              return;
            }
            _this.options.push(opt.value);
            return optionsLabels[opt.value] = opt.label;
          };
        })(this));
        SimplyBind('options').of(this).to('prop:innerHTML').of(this.input).transform((function(_this) {
          return function(options) {
            var currentValue, optList;
            currentValue = _this.value;
            optList = "<option value=''>" + label + "</option>";
            options.sort(function(a, b) {
              if (a === '') {
                return -1;
              }
              if (optionsLabels[a] === optionsLabels[b]) {
                return 0;
              } else if (optionsLabels[a] < optionsLabels[b]) {
                return -1;
              } else {
                return 1;
              }
            });
            options.forEach(function(option) {
              return optList += "<option value='" + option + "'>" + optionsLabels[option] + "</option>";
            });
            setTimeout(function() {
              _this.input[0].value = currentValue;
              return _this.input.trigger('change');
            }, 50);
            return optList;
          };
        })(this));
        return this.conditionalValues.forEach((function(_this) {
          return function(option) {
            var $context, currentlyShown, element, masterField, masterInstance;
            currentlyShown = true;
            element = _this.input.children("option[value='" + option.value + "']")[0];
            if (!element) {
              return;
            }
            $context = (function() {
              switch (option.conditionScope) {
                case 'form':
                  return this.form.form;
                case 'step':
                  if (this.step.length) {
                    return this.step;
                  } else {
                    return this.field.parents('.step').first();
                  }
                case 'repeater':
                  return this.field.parents('.fieldset').last();
                case 'repeater-1':
                  return this.field.parents('.fieldset').eq(1);
                case 'repeater-2':
                  return this.field.parents('.fieldset').eq(2);
                case 'sibling':
                  return this.field.parent();
                default:
                  return this.form.form;
              }
            }).call(_this);
            masterField = $context.find('[data-realname*="' + option.depends_on + '"]').first();
            masterInstance = masterField.data('Field');
            if (masterInstance == null) {
              return console.log("Conditional value '" + _this.name + " (" + option.value + ")' has no matching master field.", _this);
            }
            return masterInstance.subscribe(element, option.condition, option.comparison, masterChangeCallback);
          };
        })(this));
      },
      showError: function() {
        return this.field.addClass('error');
      },
      hideError: function() {
        return this.field.removeClass('error');
      },
      checkOn: function($button) {
        var $input;
        $button.addClass('checked');
        $input = $button.find('.input');
        if ($input.length) {
          $input[0].checked = true;
        }
        if ((this.type != null) && this.type === 'radio') {
          return this.checkOff($button.siblings());
        }
      },
      checkOff: function($button) {
        var $input;
        $button.removeClass('checked');
        $input = $button.find('.input');
        if ($input.length) {
          return $input[0].checked = false;
        }
      },
      makeValid: function() {
        this.field.addClass('valid').removeClass('invalid error show_error_msg');
        return this.valid = true;
      },
      makeInvalid: function(error) {
        var classesToAdd;
        classesToAdd = error ? 'invalid error' : 'invalid';
        this.field.addClass(classesToAdd).removeClass('valid');
        this.valid = false;
        if (this.errorMsg && error) {
          return this.field.addClass('show_error_msg');
        }
      },
      makeFilled: function() {
        return this.field.addClass('filled animate');
      },
      makeNotFilled: function() {
        return this.field.removeClass('filled animate');
      },
      makeRequired: function() {
        if (this.requiredOriginally) {
          this.required = true;
        }
        this.field.addClass('required');
        if (this.form.fieldsRequired.indexOf(this) !== -1) {
          return this.form.fieldsRequired.push(this);
        }
      },
      makeNotRequired: function() {
        this.required = false;
        this.field.removeClass('required');
        if (this.form.fieldsRequired.indexOf(this) !== -1) {
          return this.form.fieldsRequired.splice(this.form.fieldsRequired.indexOf(this), 1);
        }
      },
      reveal: function() {
        this.field.addClass('reveal_dependant').trigger('reveal_dependant');
        this.makeRequired();
        this.enable();
        return this.revealed = true;
      },
      unreveal: function() {
        this.field.removeClass('reveal_dependant').trigger('hide_dependant');
        this.makeNotRequired();
        this.disable();
        return this.revealed = false;
      },
      subscribe: function(dep, condition, comparison, callback) {
        if (condition == null) {
          condition = '*';
        }
        if (comparison == null) {
          comparison = '=';
        }
        if (!dep) {
          return;
        }
        if (this.conditionalDeps[comparison] == null) {
          this.conditionalDeps[comparison] = {};
          this.conditionalDeps[comparison][condition] = [dep];
        } else {
          if (this.conditionalDeps[comparison][condition] == null) {
            this.conditionalDeps[comparison][condition] = [dep];
          } else {
            if (!this.conditionalDeps[comparison][condition].includes(dep)) {
              this.conditionalDeps[comparison][condition].push(dep);
            }
          }
        }
        if (callback) {
          if (!this.conditionalDeps.cbs.deps.includes(dep)) {
            this.conditionalDeps.cbs.deps.push(dep);
            this.conditionalDeps.cbs.callbacks.push(callback);
          }
        }
        return this.updateDeps();
      },
      updateDeps: function() {
        var thisPassedTest;
        if (!(util.objectLength(this.conditionalDeps) >= 1)) {
          return;
        }
        clearTimeout(this.depsUpdateTimeout);
        thisPassedTest = this.test();
        return this.depsUpdateTimeout = setTimeout((function(_this) {
          return function() {
            var caseMatched, cases, comparison, conditionCase, conditionCases, deps, passed, ref, results;
            ref = _this.conditionalDeps;
            results = [];
            for (comparison in ref) {
              cases = ref[comparison];
              if (comparison !== 'cbs') {
                results.push((function() {
                  var results1;
                  results1 = [];
                  for (conditionCase in cases) {
                    deps = cases[conditionCase];
                    caseMatched = false;
                    if (conditionCase.constructor === RegExp || conditionCase[0] === '/') {
                      if (conditionCase[0] === '/') {
                        conditionCase = new RegExp(conditionCase);
                      }
                      if (Array.isArray(this.value)) {
                        passed = false;
                        this.value.forEach((function(_this) {
                          return function(val) {
                            if (!passed) {
                              return caseMatched = conditionCase.test(val);
                            }
                          };
                        })(this));
                        caseMatched = passed;
                      } else {
                        caseMatched = conditionCase.test(this.value);
                      }
                    }
                    if (conditionCase === '*') {
                      caseMatched = thisPassedTest;
                    } else {
                      conditionCases = conditionCase.split(/,\s?/);
                      conditionCases.forEach((function(_this) {
                        return function(conditionCase) {
                          if (!caseMatched) {
                            return caseMatched = Array.isArray(_this.value) ? _this.value.includes(conditionCase) : _this.value === conditionCase;
                          }
                        };
                      })(this));
                    }
                    if (comparison === '!=') {
                      caseMatched = !caseMatched;
                    }
                    results1.push(deps.forEach((function(_this) {
                      return function(dep) {
                        var index, siblingFields;
                        if (dep.constructor === Field) {
                          if (caseMatched) {
                            dep.reveal();
                          } else {
                            dep.unreveal();
                          }
                          if (dep.data.width !== '1-1') {
                            siblingFields = [];
                            dep.field.parent().children('.fieldset').each(function() {
                              var instance;
                              instance = $(this).data('Field');
                              if (instance) {
                                if (!(instance.dependsOn && !instance.revealed)) {
                                  return siblingFields.push(instance);
                                }
                              }
                            });
                            setTimeout(function() {
                              if (siblingFields.length) {
                                return fixWidth(siblingFields);
                              }
                            }, 50);
                          }
                        }
                        if (_this.conditionalDeps.cbs.deps.includes(dep)) {
                          index = _this.conditionalDeps.cbs.deps.indexOf(dep);
                          return _this.conditionalDeps.cbs.callbacks[index](caseMatched, dep);
                        }
                      };
                    })(this)));
                  }
                  return results1;
                }).call(_this));
              } else {
                results.push(void 0);
              }
            }
            return results;
          };
        })(this), 75);
      }
    };
    defaultFns = {
      'prepare': {
        input: function() {
          this.input.on("change " + textChangeEvent + " blur", (function(_this) {
            return function() {
              return _this.field.trigger('value_changed');
            };
          })(this));
          if (!!this.form.options.preserveValuesAfterRefresh) {
            this.value = this.input[0].value.replace(util.regEx.whiteSpace, '');
          } else {
            if (!this["default"]) {
              this.value = '';
            }
          }
          this.input.val(this.value);
          if (this.value) {
            this.makeFilled();
          }
          this.attachState();
          if (this.height != null) {
            this.input.css('height', this.height);
          }
          if (this.desc) {
            this.field.addClass('has_desc');
          }
          if (this.required) {
            this.attachValidation();
            if (this.test()) {
              return this.makeValid();
            } else {
              return this.makeInvalid();
            }
          } else {
            return this.makeValid();
          }
        },
        button: function() {
          var $checkedInputs, fieldInstance, values;
          fieldInstance = this;
          this.input = this.field.find('.input-button');
          this.input.on("click", (function(_this) {
            return function(event) {
              return _this.field.trigger('value_changed', $(event.currentTarget));
            };
          })(this));
          if (!!this.form.options.preserveValuesAfterRefresh) {
            $checkedInputs = this.field.find('[checked]');
            if ($checkedInputs.length === 0) {
              $checkedInputs = this.field.find(':checked');
            }
            if (this.type === 'radio') {
              $checkedInputs.each((function(_this) {
                return function(i, el) {
                  _this.value = el.value;
                  return _this.checkOn($(el).parents('.input-button'));
                };
              })(this));
            } else if (this.type === 'checkbox_single') {
              this.value = $checkedInputs ? true : false;
              if (this.value) {
                this.checkOn(this.input);
              }
            } else {
              values = [];
              $checkedInputs.each((function(_this) {
                return function(i, el) {
                  values.push(el.value);
                  return _this.checkOn($(el).parents('.input-button'));
                };
              })(this));
              this.value = values;
            }
          } else {
            if (this["default"]) {
              values = this.value.split(/,\s?/);
              if (values.length) {
                this.input.each((function(_this) {
                  return function(i, el) {
                    if (values.includes($(el).find('.input').value)) {
                      return _this.checkOn($(el));
                    } else {
                      return _this.checkOff($(el));
                    }
                  };
                })(this));
              }
            } else {
              this.value = this.type === 'radio' ? null : this.type === 'checkbox_single' ? false : [];
              this.input.each((function(_this) {
                return function(i, el) {
                  return _this.checkOff($(el));
                };
              })(this));
            }
          }
          if (this.type === 'radio' || this.type === 'checkbox_single') {
            if (this.value) {
              this.makeFilled();
            }
          } else {
            if (this.value.length) {
              this.makeFilled();
            }
          }
          if (this.height != null) {
            this.input.css('height', this.height);
          }
          if (this.desc) {
            this.field.addClass('has_desc');
          }
          this.attachState();
          if (this.required) {
            this.attachValidation();
            if (this.test()) {
              return this.makeValid();
            } else {
              return this.makeInvalid();
            }
          } else {
            return this.makeValid();
          }
        }
      },
      'attachValidation': {
        input: function() {
          return this.field.on('value_changed', (function(_this) {
            return function() {
              if (_this.test()) {
                _this.makeValid();
              } else {
                _this.makeInvalid();
              }
              return _this.form.form.trigger('field_filled');
            };
          })(this));
        },
        button: function() {
          return this.field.on('value_changed', (function(_this) {
            return function(event, $button) {
              if ($button.constructor !== jQuery) {
                $button = $($button);
              }
              if (!$button.hasClass('checked')) {
                _this.makeValid();
              } else if (!$button.siblings().hasClass('checked')) {
                _this.makeInvalid();
              } else {
                _this.makeValid();
              }
              return _this.form.form.trigger('field_filled');
            };
          })(this));
        }
      },
      'attachState': {
        input: function() {
          var allowedKeys;
          this.input.on('focus', (function(_this) {
            return function() {
              _this.field.addClass('focus');
              if (!(!_this.form.options.submitOnEnter || _this.type === 'textarea')) {
                return $window.on('keypress.field_focused', function(event) {
                  if (event.which === 13) {
                    return _this.form.form.trigger('submit_current_step');
                  }
                });
              }
            };
          })(this));
          this.input.on('blur', (function(_this) {
            return function() {
              _this.field.removeClass('focus');
              if (!(!_this.form.options.submitOnEnter || _this.type === 'textarea')) {
                return $window.off('keypress.field_focused');
              }
            };
          })(this));
          if (this.forcePattern) {
            if (this.forceSpecial) {
              this.input.on('change', (function(_this) {
                return function(event) {
                  var value;
                  value = _this.input[0].value;
                  if (!regEx[_this.forcePattern].test(value)) {
                    switch (_this.forcePattern) {
                      case 'slug':
                        value = value.replace(/\s/g, '-').toLowerCase();
                        break;
                      case 'name':
                        value = value.replace(/\s/g, '_').toLowerCase();
                        break;
                      case 'lower':
                        value = value.toLowerCase();
                        break;
                      case 'upper':
                        value = value.toUpperCase();
                    }
                  }
                  _this.input[0].value = value;
                  return _this.value = value;
                };
              })(this));
            }
          }
          if (this.maximum) {
            allowedKeys = [8, 37, 38, 39, 40];
            this.input.on('keydown', (function(_this) {
              return function(event) {
                var ref, selectEnd, selectStart;
                if (((ref = _this.input[0].value) != null ? ref.length : void 0) >= _this.maximum) {
                  selectStart = _this.input[0].selectionStart || 0;
                  selectEnd = _this.input[0].selectionEnd || 0;
                  if (!(event.ctrlKey || event.metaKey || allowedKeys.includes(event.which) || (selectStart - selectEnd > 0))) {
                    event.preventDefault();
                    _this.field.addClass('has_warning').attr('data-warning', "Maximum # of characters allowed is " + _this.maximum);
                    return setTimeout(function() {
                      return _this.field.removeClass('has_warning');
                    }, 2000);
                  }
                }
              };
            })(this));
          }
          return this.field.on('value_changed', (function(_this) {
            return function() {
              var ref;
              if (_this.maximum && ((ref = _this.input[0].value) != null ? ref.length : void 0) > _this.maximum) {
                _this.input[0].value = _this.input[0].value.slice(0, _this.maximum);
                return _this.input.trigger('change');
              } else {
                _this.value = _this.input[0].value;
                if (_this.value) {
                  _this.makeFilled();
                } else {
                  _this.makeNotFilled();
                }
                return _this.updateDeps();
              }
            };
          })(this));
        },
        button: function() {
          this.field.on('value_changed', (function(_this) {
            return function(event, $button) {
              var buttonValue;
              if ($button) {
                if ($button.constructor !== jQuery) {
                  $button = $($button);
                }
                buttonValue = $button.find('input').val();
                if (!$button.hasClass('checked')) {
                  _this.checkOn($button);
                  if (_this.type === 'checkbox_single') {
                    _this.value = true;
                  } else {
                    _this.value.push(buttonValue);
                  }
                } else {
                  _this.checkOff($button);
                  if (_this.type === 'checkbox_single') {
                    _this.value = false;
                  } else {
                    _this.value.splice(_this.value.indexOf(buttonValue), 1);
                  }
                }
                if (_this.value.length) {
                  _this.makeFilled();
                } else {
                  _this.makeNotFilled();
                }
                return _this.updateDeps();
              }
            };
          })(this));
          return this.field.find('label').on('click', function(event) {
            event.preventDefault();
            return $(this).parents('.input-button').trigger('click');
          });
        }
      },
      'detach': {
        input: function() {
          this.field.off();
          return this.input.off();
        },
        button: function() {
          this.field.off();
          this.input.off();
          return this.input.find('label').off();
        }
      },
      'disable': {
        input: function() {
          this.input.prop('disabled', true);
          return this.disabled = true;
        },
        button: function() {
          return this.disabled = true;
        }
      },
      'enable': {
        input: function() {
          this.input.prop('disabled', false);
          return this.disabled = false;
        },
        button: function() {
          return this.disabled = false;
        }
      },
      'fetchValue': {
        input: function() {
          if (!this.value || typeof this.value === 'boolean') {
            return this.value;
          }
          if (this.value.toLowerCase() === 'true') {
            return true;
          } else if (this.value.toUpperCase() === 'false') {
            return false;
          } else {
            return this.value;
          }
        },
        button: function() {
          if (!this.value || typeof this.value === 'boolean' || (typeof this.value === 'object' && this.value.constructor === Array)) {
            return this.value;
          }
          if (this.value.toLowerCase() === 'true') {
            return true;
          } else if (this.value.toUpperCase() === 'false') {
            return false;
          } else {
            return this.value;
          }
        }
      },
      'setValue': {
        input: function(value) {
          if (!(value == null)) {
            this.value = value;
          }
          this.input[0].value = value;
          if (value) {
            this.makeFilled();
            if (this.test()) {
              this.makeValid();
            } else {
              this.makeInvalid();
            }
          }
          return this.input.trigger('change');
        },
        button: function(value) {
          if (this.type === 'checkbox_single') {
            if (value) {
              this.value = true;
              this.checkOn(this.input);
              this.makeFilled();
              return this.makeValid();
            } else {
              this.value = false;
              return this.checkOff(this.input);
            }
          } else {
            if (!Array.isArray(value)) {
              value = [value];
            }
            this.value = value;
            value.forEach((function(_this) {
              return function(subValue) {
                var $matchedButton, $matchedInput;
                $matchedInput = _this.field.find("input[value='" + subValue + "']");
                if ($matchedInput.length) {
                  $matchedButton = $matchedInput.parents('.input-button').first();
                  return checkOn($matchedButton);
                } else {
                  return _this.value.splice(_this.value.indexOf(subValue), 1);
                }
              };
            })(this));
            if (this.value.length) {
              this.makeFilled();
              if (this.test()) {
                return this.makeValid();
              }
            }
          }
        }
      },
      'empty': {
        input: function() {
          this.field.removeClass('filled valid error blur focus');
          this.value = '';
          return this.input.val(this.value);
        },
        button: function() {
          this.field.removeClass('filled valid error blur focus');
          this.value = this.type === 'radio' ? '' : this.type === 'checkbox_single' ? false : [];
          return this.input.filter(function() {
            return $(this).hasClass('checked');
          }).each((function(_this) {
            return function(i, el) {
              return _this.checkOff($(el));
            };
          })(this));
        }
      },
      'test': {
        input: function() {
          var inputValue, passesTest, ref;
          inputValue = typeof this.input[0].value === 'boolean' ? this.input[0].value : (ref = this.input[0].value) != null ? ref.replace(util.regEx.whiteSpace, '') : void 0;
          passesTest = this.pattern ? this.pattern.test(inputValue) : inputValue;
          if (this.value !== inputValue) {
            this.value = inputValue;
          }
          if (this.disabledForever) {
            passesTest = true;
          }
          if (passesTest) {
            return true;
          } else {
            return false;
          }
        },
        button: function() {
          if (this.field.find('[checked]').length) {
            return true;
          } else {
            if (this.field.find(':checked').length) {
              return true;
            } else {
              if (this.type === 'radio' && (this.value != null)) {
                return true;
              } else {
                return false;
              }
            }
          }
        }
      }
    };
    Form.prototype.fieldProtos = {
      'text': {
        prepare: defaultFns.prepare.input,
        attachValidation: defaultFns.attachValidation.input,
        attachState: defaultFns.attachState.input,
        detach: defaultFns.detach.input,
        disable: defaultFns.disable.input,
        enable: defaultFns.enable.input,
        fetchValue: defaultFns.fetchValue.input,
        setValue: defaultFns.setValue.input,
        empty: defaultFns.empty.input,
        test: defaultFns.test.input
      },
      'full_name': {
        prepare: defaultFns.prepare.input,
        attachValidation: defaultFns.attachValidation.input,
        attachState: defaultFns.attachState.input,
        detach: defaultFns.detach.input,
        disable: defaultFns.disable.input,
        enable: defaultFns.enable.input,
        fetchValue: defaultFns.fetchValue.button,
        setValue: defaultFns.setValue.button,
        empty: defaultFns.empty.input,
        test: function() {
          var inputValue, passesTest, ref;
          inputValue = (ref = this.input[0].value) != null ? ref.replace(util.regEx.whiteSpace, '') : void 0;
          if (this.value !== inputValue) {
            this.value = inputValue;
          }
          if (this.disabledForever) {
            passesTest = true;
          }
          return inputValue !== '' && util.regEx.fullName.test(inputValue);
        }
      },
      'password': {
        prepare: defaultFns.prepare.input,
        attachValidation: defaultFns.attachValidation.input,
        attachState: defaultFns.attachState.input,
        detach: defaultFns.detach.input,
        disable: defaultFns.disable.input,
        enable: defaultFns.enable.input,
        fetchValue: defaultFns.fetchValue.button,
        setValue: defaultFns.setValue.button,
        empty: defaultFns.empty.input,
        test: function() {
          var $passwordOrig, inputValue, passesTest, passwordOrigValue, ref;
          inputValue = (ref = this.input[0].value) != null ? ref.replace(util.regEx.whiteSpace, '') : void 0;
          passesTest = inputValue;
          if (this.value !== inputValue) {
            this.value = inputValue;
          }
          if (this.name.includes('password_confirm')) {
            $passwordOrig = this.form.form.find('.fieldset.fieldtype_password');
            passwordOrigValue = $passwordOrig.find('input').val();
            passesTest = inputValue === passwordOrigValue;
          }
          return passesTest;
        }
      },
      'email': {
        prepare: defaultFns.prepare.input,
        attachValidation: defaultFns.attachValidation.input,
        attachState: defaultFns.attachState.input,
        detach: defaultFns.detach.input,
        disable: defaultFns.disable.input,
        enable: defaultFns.enable.input,
        fetchValue: defaultFns.fetchValue.button,
        setValue: defaultFns.setValue.button,
        empty: defaultFns.empty.input,
        test: function() {
          var inputValue, passesTest, ref;
          inputValue = (ref = this.input[0].value) != null ? ref.replace(util.regEx.whiteSpace, '') : void 0;
          if (this.value !== inputValue) {
            this.value = inputValue;
          }
          if (this.disabledForever) {
            passesTest = true;
          }
          return inputValue && util.regEx.email.test(inputValue);
        }
      },
      'tel': {
        prepare: defaultFns.prepare.input,
        attachValidation: defaultFns.attachValidation.input,
        attachState: defaultFns.attachState.input,
        detach: defaultFns.detach.input,
        disable: defaultFns.disable.input,
        enable: defaultFns.enable.input,
        fetchValue: defaultFns.fetchValue.button,
        setValue: defaultFns.setValue.button,
        empty: defaultFns.empty.input,
        test: function() {
          var inputValue, passesTest, ref;
          inputValue = (ref = this.input[0].value) != null ? ref.replace(util.regEx.whiteSpace, '') : void 0;
          if (this.value !== inputValue) {
            this.value = inputValue;
          }
          if (this.disabledForever) {
            passesTest = true;
          }
          return inputValue && inputValue.length >= 7 && util.regEx.phone.test(inputValue);
        }
      },
      'textarea': {
        prepare: defaultFns.prepare.input,
        attachValidation: defaultFns.attachValidation.input,
        attachState: defaultFns.attachState.input,
        detach: defaultFns.detach.input,
        disable: defaultFns.disable.input,
        enable: defaultFns.enable.input,
        fetchValue: defaultFns.fetchValue.input,
        setValue: defaultFns.setValue.input,
        empty: defaultFns.empty.input,
        test: defaultFns.test.input
      },
      'select': {
        prepare: function() {
          var $pseudoInput, setPseudoInputValue;
          if (!!this.form.options.preserveValuesAfterRefresh) {
            this.value = this.input[0].value;
          } else {
            if (!this["default"]) {
              this.value = '';
            }
          }
          this.input.val(this.value);
          if (this.value) {
            this.makeFilled();
          }
          this.input.on("change keypress blur", (function(_this) {
            return function() {
              return _this.field.trigger('value_changed');
            };
          })(this));
          if (this.height != null) {
            this.input.css('height', this.height);
          }
          this.attachState();
          if (this.required) {
            this.attachValidation();
            if (this.test()) {
              this.makeValid();
            } else {
              this.makeInvalid();
            }
          } else {
            this.makeValid();
          }
          this.label = this.field.children('label').html();
          $pseudoInput = this.input.next();
          setPseudoInputValue = (function(_this) {
            return function() {
              var inputValue, ref, ref1;
              inputValue = ((ref = _this.input.children('option[selected]')[0]) != null ? ref.innerHTML : void 0) || ((ref1 = _this.input.children('option:selected')[0]) != null ? ref1.innerHTML : void 0);
              return $pseudoInput.html(inputValue || _this.value || _this.label);
            };
          })(this);
          setPseudoInputValue();
          return this.input.on('change keyup blur', (function(_this) {
            return function() {
              _this.input.children(':selected').attr('selected', '').siblings().removeAttr('selected');
              return setPseudoInputValue();
            };
          })(this));
        },
        attachValidation: defaultFns.attachValidation.input,
        attachState: defaultFns.attachState.input,
        detach: defaultFns.detach.input,
        disable: defaultFns.disable.input,
        enable: defaultFns.enable.input,
        fetchValue: defaultFns.fetchValue.input,
        setValue: defaultFns.setValue.input,
        empty: defaultFns.empty.input,
        test: defaultFns.test.input
      },
      'file': {
        prepare: function() {
          this.input.on("change " + textChangeEvent + " blur", (function(_this) {
            return function() {
              return _this.field.trigger('value_changed');
            };
          })(this));
          this.preview = this.field.find('.file-preview');
          this.value = this["default"] || null;
          this.base64 = this.value;
          if (this.value) {
            this.makeFilled();
          }
          this.attachState();
          this.input.trigger('change');
          if (this.height != null) {
            this.input.css('height', this.height);
          }
          if (this.desc) {
            this.field.addClass('has_desc');
          }
          if (this.required) {
            this.attachValidation();
            if (this.test()) {
              return this.makeValid();
            } else {
              return this.makeInvalid();
            }
          } else {
            return this.makeValid();
          }
        },
        attachValidation: defaultFns.attachValidation.input,
        attachState: function() {
          return this.field.add(this.input).on('value_changed change', (function(_this) {
            return function() {
              var uploadedFile;
              _this.value = _this.input[0].value;
              if (_this.value) {
                _this.makeFilled();
              } else {
                _this.makeNotFilled();
              }
              _this.updateDeps();
              uploadedFile = _this.input[0].files[0];
              if (!uploadedFile) {
                return;
              }
              return _this.checkDimensions(uploadedFile).then(function() {
                var fileReader;
                fileReader = new FileReader();
                fileReader.onload = function() {
                  _this.base64 = fileReader.result;
                  if (_this.preview.length && _this.base64) {
                    return _this.preview.addClass('show').html("<img src=\"" + _this.base64 + "\">");
                  }
                };
                if (uploadedFile) {
                  return fileReader.readAsDataURL(uploadedFile);
                }
              }, function(reason) {
                if (reason === 'max') {
                  return alert("Image too large! Maximum allowed dimensions are " + _this.maximum.width + "x" + _this.maximum.height);
                } else {
                  return alert("Image too small! Minimum dimensions are " + _this.minimum.width + "x" + _this.minimum.height);
                }
              });
            };
          })(this));
        },
        detach: defaultFns.detach.input,
        disable: defaultFns.disable.input,
        enable: defaultFns.enable.input,
        fetchValue: function(regular) {
          if (!regular) {
            return this.base64;
          } else {
            return null;
          }
        },
        setValue: function(value) {
          if (value) {
            this.base64 = value;
          }
          if (this.preview.length) {
            return this.preview.addClass('show').html("<img src=\"" + this.base64 + "\">");
          }
        },
        empty: defaultFns.empty.input,
        test: defaultFns.test.input,
        checkDimensions: function(file) {
          if (!file) {
            return;
          }
          return new Promise((function(_this) {
            return function(resolve, reject) {
              var testImg;
              if (!_this.minimum && !_this.maximum) {
                resolve();
              }
              testImg = new Image();
              testImg.src = URL.createObjectURL(file);
              return testImg.onload = function() {
                var dimensions;
                if (_this.maximum) {
                  if (_this.maximum.constructor === String) {
                    dimensions = _this.maximum.split('x');
                    if (dimensions.length === 1) {
                      dimensions[1] = dimensions[0];
                    }
                    _this.maximum = {
                      width: dimensions[0],
                      height: dimensions[1]
                    };
                  }
                  if (_this.maximum.constructor === Number) {
                    _this.maximum = {
                      width: _this.maximum,
                      height: _this.maximum
                    };
                  }
                  if (testImg.width > _this.maximum.width || testImg.height > _this.maximum.height) {
                    reject('max');
                  } else {
                    if (_this.minimum == null) {
                      resolve();
                    }
                  }
                }
                if (_this.minimum) {
                  if (_this.minimum.constructor === String) {
                    dimensions = _this.minimum.split('x');
                    if (dimensions.length === 1) {
                      dimensions[1] = dimensions[0];
                    }
                    _this.minimum = {
                      width: dimensions[0],
                      height: dimensions[1]
                    };
                  }
                  if (_this.minimum.constructor === Number) {
                    _this.minimum = {
                      width: _this.minimum,
                      height: _this.minimum
                    };
                  }
                  if (testImg.width < _this.minimum.width || testImg.height < _this.minimum.height) {
                    return reject('min');
                  } else {
                    return resolve();
                  }
                }
              };
            };
          })(this));
        }
      },
      'radio': {
        prepare: defaultFns.prepare.button,
        attachValidation: function() {
          return this.field.on('value_changed', (function(_this) {
            return function() {
              _this.makeValid();
              return _this.form.form.trigger('field_filled');
            };
          })(this));
        },
        attachState: function() {
          this.field.on('value_changed', (function(_this) {
            return function(event, $button) {
              var newValue;
              if ($button.constructor !== jQuery) {
                $button = $($button);
              }
              newValue = $button.find('input').val();
              if (newValue != null) {
                _this.value = newValue;
              }
              _this.checkOn($button);
              _this.makeFilled();
              return _this.updateDeps();
            };
          })(this));
          return this.field.find('label').on('click', function(event) {
            event.preventDefault();
            return $(this).parents('.input-button').trigger('click');
          });
        },
        detach: defaultFns.detach.button,
        disable: defaultFns.disable.button,
        enable: defaultFns.enable.button,
        fetchValue: defaultFns.fetchValue.button,
        setValue: function(value) {
          var $matchedButton, $matchedInput;
          $matchedInput = this.field.find("input[value='" + value + "']");
          if ($matchedInput.length) {
            this.value = value;
            $matchedButton = $matchedInput.parents('.input-button').first();
            this.checkOn($matchedButton);
            this.makeFilled();
            if (this.test()) {
              return this.makeValid();
            }
          }
        },
        empty: defaultFns.empty.button,
        test: defaultFns.test.button
      },
      'radio_hybrid': {
        prepare: defaultFns.prepare.button,
        attachValidation: defaultFns.attachValidation.button,
        attachState: defaultFns.attachState.button,
        detach: defaultFns.detach.button,
        disable: defaultFns.disable.button,
        enable: defaultFns.enable.button,
        fetchValue: defaultFns.fetchValue.button,
        setValue: defaultFns.setValue.button,
        empty: defaultFns.empty.button,
        test: defaultFns.test.button
      },
      'checkbox': {
        prepare: defaultFns.prepare.button,
        attachValidation: defaultFns.attachValidation.button,
        attachState: defaultFns.attachState.button,
        detach: defaultFns.detach.button,
        disable: defaultFns.disable.button,
        enable: defaultFns.enable.button,
        fetchValue: defaultFns.fetchValue.button,
        setValue: defaultFns.setValue.button,
        empty: defaultFns.empty.button,
        test: defaultFns.test.button
      },
      'checkbox_single': {
        prepare: defaultFns.prepare.button,
        attachValidation: defaultFns.attachValidation.button,
        attachState: defaultFns.attachState.button,
        detach: defaultFns.detach.button,
        disable: defaultFns.disable.button,
        enable: defaultFns.enable.button,
        fetchValue: defaultFns.fetchValue.input,
        setValue: defaultFns.setValue.button,
        empty: defaultFns.empty.input,
        test: defaultFns.test.button
      },
      'group': {
        prepare: function() {
          this.toggle = this.field.children('.group-toggle');
          this.container = this.field.children('.group-container');
          this.fieldsets = this.container.children('.fieldset');
          this.fields = [];
          this.fieldsRequired = [];
          this.fieldsets.each((function(_this) {
            return function(i, el) {
              var newField;
              newField = new Field($(el), _this.form);
              _this.fields.push(newField);
              if (newField.required) {
                _this.fieldsRequired.push(newField);
              }
              return newField.insideGroup = true;
            };
          })(this));
          if (this.collapsed && this.toggle.length) {
            this.field.addClass('collapsed');
            if (this.container[0].offsetHeight === 0) {
              this.container[0].style.display = 'none';
            }
          }
          this.attachState();
          if (this.required) {
            this.attachValidation();
            if (this.test()) {
              this.makeValid();
            } else {
              this.makeInvalid();
            }
          } else {
            this.makeValid();
          }
          return fixWidth(this.fields);
        },
        attachValidation: function() {
          var $required, j, len, ref, results;
          ref = this.fieldsRequired;
          results = [];
          for (j = 0, len = ref.length; j < len; j++) {
            $required = ref[j];
            results.push($required.field.on('value_changed.for_group', (function(_this) {
              return function() {
                if (_this.test()) {
                  return _this.makeValid();
                } else {
                  return _this.makeInvalid();
                }
              };
            })(this)));
          }
          return results;
        },
        attachState: function() {
          if (this.toggle.length) {
            return this.toggle.on('click', (function(_this) {
              return function() {
                if (_this.collapsed) {
                  _this.field.removeClass('collapsed');
                  if (_this.form.options.heightToggleAnimation) {
                    _this.container.slideDown(300);
                  } else {
                    _this.container.css('display', 'block');
                  }
                } else {
                  _this.field.addClass('collapsed');
                  if (_this.form.options.heightToggleAnimation) {
                    _this.container.slideUp(300);
                  } else {
                    _this.container.css('display', 'none');
                  }
                }
                return _this.collapsed = !_this.collapsed;
              };
            })(this));
          }
        },
        detach: function() {
          this.fields.forEach(function(field) {
            return field.detach();
          });
          return this.toggle.off();
        },
        disable: function() {
          this.disabled = true;
          return this.fields.forEach(function(field) {
            return field.disable();
          });
        },
        enable: function() {
          this.disabled = false;
          return this.fields.forEach(function(field) {
            return field.enable();
          });
        },
        fetchValue: function(asArray) {
          var field, fieldKeyValPair, j, len, ref, values;
          values = asArray ? [] : {};
          ref = this.fields;
          for (j = 0, len = ref.length; j < len; j++) {
            field = ref[j];
            if (asArray) {
              fieldKeyValPair = {};
              fieldKeyValPair[field.name] = field.fetchValue();
              values.push(fieldKeyValPair);
            } else {
              values[field.name] = field.fetchValue();
            }
          }
          return values;
        },
        setValue: function(values) {
          if (!values || (values.constructor !== Object && values.constructor !== Array)) {
            return;
          }
          if (values.constructor === Array) {
            return values.forEach((function(_this) {
              return function(value, subIndex) {
                return _this.fieldsets.eq(subIndex).data('Field').setValue(value);
              };
            })(this));
          } else if (values.constructor === Object) {
            return this.fieldsets.each(function() {
              var fieldInstance, valueToSet;
              fieldInstance = $(this).data('Field');
              valueToSet = values[fieldInstance.name];
              if ((valueToSet != null) && fieldInstance) {
                return fieldInstance.setValue(valueToSet);
              }
            });
          } else {
            return this.fieldsets.first().data('Field').setValue(values);
          }
        },
        empty: function() {
          return this.fields.forEach(function(field) {
            return field.empty();
          });
        },
        test: function(showErrors, logBadFields) {
          var badFields, problem, showErrorsAsPassed;
          problem = false;
          badFields = [];
          showErrorsAsPassed = showErrors;
          this.fieldsRequired = this.fields.filter(function(field) {
            return field.required;
          });
          this.fieldsRequired.forEach((function(_this) {
            return function(field) {
              var isValid, validateByClass;
              validateByClass = field.field.hasClass('validate_by_class');
              if (field.field.hasClass('dont-error')) {
                showErrors = false;
              }
              isValid = validateByClass ? field.field.hasClass('valid') : field.test(showErrorsAsPassed, logBadFields);
              if (isValid) {
                return field.hideError();
              } else {
                if (showErrors) {
                  field.showError();
                }
                problem = true;
                return badFields.push(field);
              }
            };
          })(this));
          if (logBadFields) {
            console.log(badFields);
          }
          if (problem) {
            if (showErrors) {
              this.showError();
            }
            return false;
          } else {
            this.hideError();
            return true;
          }
        }
      },
      'repeater': {
        prepare: function() {
          this.toggle = this.field.children('.repeater-toggle');
          this.container = this.field.children('.repeater-container');
          this.placeholder = this.container.children('.repeater-placeholder');
          this.button = this.container.children('.repeater-button');
          this.repeaterItemsContainer = this.container.children('.repeater-items');
          this.repeaterTemplate = {
            'html': this.container.children('.repeater-template').html(),
            'el': this.container.children('.repeater-template').children()
          };
          this.collectFields(true);
          if (this.collapsed && this.toggle.length) {
            this.field.addClass('collapsed');
            if (this.container[0].offsetHeight === 0) {
              this.container[0].style.display = 'none';
            }
          }
          this.attachState();
          if (this.required) {
            this.attachValidation();
            if (this.test()) {
              this.makeValid();
            } else {
              this.makeInvalid();
            }
          } else {
            this.makeValid();
          }
          if (this.repeaterItems.length === 0) {
            this.hideButton();
          } else {
            this.showButton();
          }
          return fixWidth(this.fields);
        },
        collectFields: function(firstTime) {
          this.repeaterItems = [];
          this.repeaterItemsContainer.children('.repeater-item').each((function(_this) {
            return function(i, el) {
              return _this.repeaterItems.push(el);
            };
          })(this));
          this.repeaterIndex = this.repeaterItems.length;
          this.fields = [];
          this.repeaterItems.forEach((function(_this) {
            return function(repeaterItem) {
              var $additionalFieldsets;
              $additionalFieldsets = $(repeaterItem).children('.repeater-item-fields').children('.dynamic_block').children('.fieldset');
              return $(repeaterItem).children('.repeater-item-fields').children('.fieldset').add($additionalFieldsets).each(function(i, el) {
                var newField;
                newField = firstTime ? new Field($(el), _this.form) : $(el).data('Field');
                _this.fields.push(newField);
                return newField.insideRepeater = true;
              });
            };
          })(this));
          return this.fieldsRequired = this.fields.filter(function(field) {
            return field.required;
          });
        },
        attachValidation: function() {
          var $required, j, len, ref, results;
          ref = this.fieldsRequired;
          results = [];
          for (j = 0, len = ref.length; j < len; j++) {
            $required = ref[j];
            results.push($required.field.on('value_changed.for_repeater', (function(_this) {
              return function() {
                if (_this.test()) {
                  return _this.makeValid();
                } else {
                  return _this.makeInvalid();
                }
              };
            })(this)));
          }
          return results;
        },
        attachState: function() {
          this.repeaterTemplate.el.find('.input').prop('disabled', true);
          if (this.repeaterIndex) {
            this.field.addClass('has_fields');
          }
          this.field.on('click', '.repeater-delete', (function(_this) {
            return function(event) {
              var $deleteButton, $repeaterItem;
              $deleteButton = $(event.target);
              if ($deleteButton.parents('.repeater-container').first()[0] === _this.container[0]) {
                if (_this.repeaterItems.length !== _this.minimum) {
                  $repeaterItem = $deleteButton.parents('.repeater-item').first();
                  _this["delete"]($repeaterItem);
                  if (_this.repeaterIndex === 0) {
                    _this.field.removeClass('has_fields');
                  }
                  if (!(_this.repeaterItems.length >= _this.maximum)) {
                    _this.enableButton();
                  }
                }
                if (_this.repeaterItems.length === 0) {
                  return _this.hideButton();
                }
              }
            };
          })(this));
          this.field.on('click', '.repeater-clone', (function(_this) {
            return function(event) {
              var $cloneButton, $repeaterItem;
              $cloneButton = $(event.target);
              if ($cloneButton.parents('.repeater-container').first()[0] === _this.container[0]) {
                if (!(_this.repeaterItems.length >= _this.maximum)) {
                  $repeaterItem = $cloneButton.parents('.repeater-item').first();
                  return _this.clone($repeaterItem);
                } else {
                  return _this.disableButton();
                }
              }
            };
          })(this));
          this.button.add(this.placeholder).on('click', (function(_this) {
            return function() {
              _this.showButton();
              if (!(_this.repeaterItems.length >= _this.maximum)) {
                _this.add();
                return _this.field.addClass('has_fields');
              } else {
                return _this.disableButton();
              }
            };
          })(this));
          if (this.toggle.length) {
            return this.toggle.on('click', (function(_this) {
              return function() {
                if (_this.collapsed) {
                  _this.field.removeClass('collapsed');
                  if (_this.form.options.heightToggleAnimation) {
                    _this.container.slideDown(300);
                  } else {
                    _this.container.css('display', 'block');
                  }
                } else {
                  _this.field.addClass('collapsed');
                  if (_this.form.options.heightToggleAnimation) {
                    _this.container.slideUp(300);
                  } else {
                    _this.container.css('display', 'none');
                  }
                }
                return _this.collapsed = !_this.collapsed;
              };
            })(this));
          }
        },
        detach: function() {
          this.fields.forEach(function(field) {
            return field.detach();
          });
          this.button.off();
          this.placeholder.off();
          this.toggle.off();
          this.field.find('.repeater-delete').off();
          return this.field.find('.repeater-clone').off();
        },
        disable: function() {
          this.disabled = true;
          return this.fields.forEach(function(field) {
            return field.disable();
          });
        },
        enable: function() {
          this.disabled = false;
          return this.fields.forEach(function(field) {
            return field.enable();
          });
        },
        fetchValue: function() {
          var $additionalFieldsets, $repeaterItem, j, len, ref, repeaterItem, repeaterItemIndex, values;
          values = [];
          ref = this.repeaterItems;
          for (repeaterItemIndex = j = 0, len = ref.length; j < len; repeaterItemIndex = ++j) {
            repeaterItem = ref[repeaterItemIndex];
            $repeaterItem = $(repeaterItem);
            if (this.type === 'repeater') {
              $repeaterItem.find('.fieldset').each(function() {
                var fieldsetInstance;
                fieldsetInstance = $(this).data('Field');
                return values.push(fieldsetInstance.fetchValue());
              });
            } else {
              values[repeaterItemIndex] = {};
              $additionalFieldsets = $repeaterItem.children('.repeater-item-fields').children('.dynamic_block').children('.fieldset');
              $repeaterItem.children('.repeater-item-fields').children('.fieldset').add($additionalFieldsets).each(function() {
                var fieldsetInstance, fieldsetName;
                fieldsetInstance = $(this).data('Field');
                fieldsetName = fieldsetInstance.name;
                fieldsetName = fieldsetName.replace('[]', '');
                return values[repeaterItemIndex][fieldsetName] = fieldsetInstance.fetchValue();
              });
            }
          }
          return values;
        },
        setValue: function(values) {
          if (!values) {
            return;
          }
          if (this.type === 'repeater_group' && !Array.isArray(values)) {
            values = [values];
          }
          values.forEach((function(_this) {
            return function(itemValues, index) {
              var $extraFields, $fields;
              if (_this.type === 'repeater_group') {
                if (itemValues.constructor !== Object && itemValues.constructor !== Array) {
                  return;
                }
              }
              if (index >= _this.repeaterItems.length) {
                _this.add();
              }
              $extraFields = $(_this.repeaterItems[index]).children('.repeater-item-fields').children('.dynamic_block').children('.fieldset');
              $fields = $(_this.repeaterItems[index]).children('.repeater-item-fields').children('.fieldset').add($extraFields);
              if (itemValues.constructor === Array) {
                return itemValues.forEach(function(value, subIndex) {
                  return $fields.eq(subIndex).data('Field').setValue(value);
                });
              } else if (itemValues.constructor === Object) {
                return $fields.each(function() {
                  var fieldInstance, fieldName, valueToSet;
                  fieldInstance = $(this).data('Field');
                  fieldName = fieldInstance.name;
                  valueToSet = itemValues[fieldName];
                  if ((valueToSet != null) && fieldInstance) {
                    return fieldInstance.setValue(valueToSet);
                  }
                });
              } else {
                return $fields.first().data('Field').setValue(itemValues);
              }
            };
          })(this));
          if (this.repeaterIndex) {
            this.showButton();
            return this.field.addClass('has_fields');
          }
        },
        empty: function() {
          return this.fields.forEach(function(field) {
            return field.empty();
          });
        },
        test: function(showErrors, logBadFields) {
          var badFields, problem, showErrorsAsPassed;
          problem = false;
          badFields = [];
          showErrorsAsPassed = showErrors;
          this.fieldsRequired = this.fields.filter(function(field) {
            return field.required;
          });
          this.fieldsRequired.forEach((function(_this) {
            return function(field) {
              var isValid, validateByClass;
              validateByClass = field.field.hasClass('validate_by_class');
              if (field.field.hasClass('dont-error')) {
                showErrors = false;
              }
              isValid = validateByClass ? field.field.hasClass('valid') : field.test(showErrorsAsPassed, logBadFields);
              if (isValid) {
                return field.hideError();
              } else {
                if (showErrors) {
                  field.showError();
                }
                problem = true;
                return badFields.push(field);
              }
            };
          })(this));
          if (logBadFields) {
            console.log(badFields);
          }
          if (problem) {
            if (showErrors) {
              this.showError();
            }
            return false;
          } else {
            this.hideError();
            return true;
          }
        },
        add: function() {
          var $newField, newFieldHTML;
          this.repeaterIndex++;
          $newField = $(document.createElement('div'));
          newFieldHTML = this.repeaterTemplate.html.replace(/xyz/g, (function(_this) {
            return function() {
              return _this.repeaterIndex;
            };
          })(this));
          $newField.html(newFieldHTML);
          $newField.find('.disabled_forever').removeClass('disabled_forever').data('disabled_forever', false);
          $newField.children().children('.repeater-item-fields').children('.fieldset').each((function(_this) {
            return function(i, el) {
              return _this.addChildField($(el));
            };
          })(this));
          this.repeaterItems.push($newField[0].children[0]);
          this.repeaterItemsContainer.append($newField[0].children[0]);
          return this.step.trigger('height_changed');
        },
        "delete": function($repeaterItem) {
          var $extraFields, $repeaterItemFields, indexOfLastField, indexOfRepeaterItem;
          this.repeaterIndex--;
          $extraFields = $repeaterItem.children('.repeater-item-fields').children('.dynamic_block').children('.fieldset');
          $repeaterItemFields = $repeaterItem.children('.repeater-item-fields').children('.fieldset').add($extraFields);
          indexOfRepeaterItem = $repeaterItem.index();
          indexOfLastField = $(this.repeaterItems[this.repeaterItems.length - 1]).index();
          this.repeaterItems.splice(this.repeaterItems.indexOf($repeaterItem[0]), 1);
          $repeaterItemFields.each((function(_this) {
            return function(i, el) {
              return _this.removeChildField($(el));
            };
          })(this));
          $repeaterItem.addClass('delete-started').animate({
            height: 0,
            opacity: 0
          }, 350, 'swing', function() {
            return $repeaterItem.remove();
          });
          if (indexOfRepeaterItem < indexOfLastField) {
            this.repeaterItems.forEach((function(_this) {
              return function(item, index) {
                if ($(item).index() >= indexOfRepeaterItem) {
                  return _this.resetIndex($(item), true);
                }
              };
            })(this));
          }
          return setTimeout((function(_this) {
            return function() {
              return _this.step.trigger('height_changed');
            };
          })(this), 400);
        },
        clone: function($repeaterItem) {
          var $cloned, $extraFields, indexOfLastField, indexOfRepeaterItem;
          this.repeaterIndex++;
          indexOfRepeaterItem = $repeaterItem.index();
          indexOfLastField = $(this.repeaterItems[this.repeaterItems.length - 1]).index();
          $cloned = util.cloneSafe($repeaterItem, true);
          $extraFields = $cloned.children('.repeater-item-fields').children('.dynamic_block').children('.fieldset');
          $cloned.insertAfter($repeaterItem);
          this.repeaterItems.splice(this.repeaterItems.indexOf($repeaterItem) + 2, 0, $cloned[0]);
          $cloned.children('.repeater-item-fields').children('.fieldset').add($extraFields).each((function(_this) {
            return function(i, el) {
              return _this.addChildField($(el));
            };
          })(this));
          if (indexOfRepeaterItem < indexOfLastField) {
            this.repeaterItems.forEach((function(_this) {
              return function(item) {
                if ($(item).index() >= indexOfRepeaterItem) {
                  return _this.resetIndex($(item));
                }
              };
            })(this));
          } else {
            this.resetIndex($cloned, false);
          }
          return this.step.trigger('height_changed');
        },
        resetIndex: function($repeaterItem, subtracted) {
          var $fieldsets, $title, newIndex, prevIndex;
          if (subtracted == null) {
            subtracted = false;
          }
          prevIndex = subtracted ? $repeaterItem.index() + 1 : $repeaterItem.index();
          newIndex = subtracted ? prevIndex - 1 : prevIndex + 1;
          $fieldsets = $repeaterItem.children('.repeater-item-fields').children('.fieldset');
          $title = $repeaterItem.children('.repeater-item-title');
          if ($title.length) {
            $title.html($title.html().replace(/\d$/, newIndex));
          }
          return $fieldsets.each(function() {
            var $fieldset, $inputs, $labels, currentID, newID;
            $fieldset = $(this);
            $labels = $fieldset.children('label');
            $inputs = $fieldset.children('input');
            if ($labels.length === 0) {
              $labels = $fieldset.children('.input-button').children('label');
            }
            if ($inputs.length === 0) {
              $inputs = $fieldset.children('.input-button').children('input');
            }
            currentID = $fieldset.data('id');
            newID = currentID.replace("_" + prevIndex + "_", "_" + newIndex + "_");
            $fieldset.data('id', newID);
            $labels.each(function() {
              var $label, currentLabel, newLabel;
              $label = $(this);
              currentLabel = $label.attr('for');
              newLabel = currentLabel.replace(currentID, newID);
              return $label.attr('for', newLabel);
            });
            return $inputs.each(function() {
              var $input;
              $input = $(this);
              currentID = $input.attr('id');
              newID = currentID.replace(currentID, newID);
              return $input.attr('id', newID);
            });
          });
        },
        enableButton: function() {
          return this.button.removeClass('disabled');
        },
        disableButton: function() {
          return this.button.addClass('disabled');
        },
        showButton: function() {
          this.button.addClass('show');
          return this.placeholder.removeClass('show');
        },
        hideButton: function() {
          this.button.removeClass('show');
          return this.placeholder.addClass('show');
        },
        addChildField: function($el) {
          var newField;
          newField = new Field($el, this.form);
          newField.enable();
          this.fields.push(newField);
          if (newField.required) {
            this.fieldsRequired.push(newField);
            return newField.field.on('value_changed.for_repeater', (function(_this) {
              return function() {
                if (_this.test()) {
                  return _this.makeValid();
                } else {
                  return _this.makeInvalid();
                }
              };
            })(this));
          }
        },
        removeChildField: function($el) {
          var fieldEl, fieldInstance;
          if ($el.constructor === Field) {
            fieldInstance = $el;
            fieldEl = fieldInstance.field;
          } else {
            fieldInstance = $el.data('Field');
            fieldEl = $el;
          }
          this.fields.splice(this.fields.indexOf(fieldInstance), 1);
          if (this.fieldsRequired.includes(fieldInstance)) {
            this.fieldsRequired.splice(this.fieldsRequired.indexOf(fieldInstance), 1);
          }
          return fieldInstance.detach();
        }
      }
    };
    Form.prototype.fieldProtos.repeater_group = Form.prototype.fieldProtos.repeater;
    parseWidth = function(string) {
      var delim, split;
      delim = string.includes('/') ? '/' : '-';
      split = string.split(delim);
      return parseFloat(split[0]) / parseFloat(split[1]);
    };
    fixWidth = function(fields) {
      var isLast, rowPercentage;
      rowPercentage = 0;
      isLast = function(fieldsetWidth) {
        rowPercentage += parseWidth(fieldsetWidth);
        if (rowPercentage >= 1) {
          rowPercentage = 0;
          return true;
        } else {
          return false;
        }
      };
      return fields.forEach(function(field) {
        var width;
        if (field.field.index() === 0) {
          rowPercentage = 0;
        }
        width = field.field.data('width');
        if (isLast(width)) {
          return field.field.addClass('is_last');
        } else {
          return field.field.removeClass('is_last');
        }
      });
    };

    /*==========================================================================
    		 Initial Preparation
    	==========================================================================
     */
    Form.prototype.Prepare = function(firstTime) {
      var formClassName;
      if (this.form.length === 0) {
        return;
      }
      if (this.form.find('.step').length === 0) {
        formClassName = this.form[0].className.split(' ')[1];
        this.form.wrapInner("<div class=\"" + formClassName + " step show\"></div>");
      }
      if (firstTime) {
        this.form.find('.step').each((function(_this) {
          return function(i, el) {
            var $fieldsets, $step, stepIndex;
            _this.fieldsInSteps.push([]);
            stepIndex = _this.fieldsInSteps.length - 1;
            $step = $(el);
            $fieldsets = $step.children('.fieldset');
            if ($fieldsets.length === 0) {
              $fieldsets = $step.find('.step-innerwrap').children('.fieldset');
            }
            return $fieldsets.each(function(i, el) {
              return _this.addField($(el), stepIndex);
            });
          };
        })(this));
        this.form.find('.step').first().addClass('show');
        this.setCurrentStepTo('visible');
      }
      this.disableFields(this.form);
      if (this.options.dontDisableFields) {
        this.enableFields(this.form);
      } else {
        this.enableFields(this.step.current);
      }
      this.attachFormEvents();
      this.attachButtonEvents();
      this.attachExtraEvents();
      return this.options.callbackOnPrepare(this);
    };
    Form.prototype.AddStep = function($step) {
      var $fieldsets, stepIndex;
      this.fieldsInSteps.push([]);
      stepIndex = this.fieldsInSteps.length - 1;
      $fieldsets = $step.children('.fieldset');
      if ($fieldsets.length === 0) {
        $fieldsets = $step.find('.step-innerwrap').children('.fieldset');
      }
      $fieldsets.each((function(_this) {
        return function(i, el) {
          return _this.addField($(el), stepIndex);
        };
      })(this));
      return this.multiStep = true;
    };
    Form.prototype.RemoveStep = function(index) {
      var stepFields;
      if (this.fieldsInSteps[index] == null) {
        return 'Specified index wasn\'t found.';
      }
      stepFields = this.fieldsInSteps[index];
      stepFields.forEach((function(_this) {
        return function(field) {
          _this.fields.splice(_this.fields.indexOf(field), 1);
          if (field.required) {
            return _this.fieldsRequired.splice(_this.fieldsRequired.indexOf(field), 1);
          }
        };
      })(this));
      return this.fieldsInSteps.splice(index, 1);
    };
    Form.prototype.Reset = function(resetStep) {
      if (resetStep == null) {
        resetStep = true;
      }
      if (resetStep) {
        this.form.find('.step.show, .results.show').removeClass('show').end().find('.step').first().addClass('show');
        return this.setCurrentStepTo('visible');
      }
    };
    Form.prototype.ReInit = function(rePrepare, resetInputFields) {
      if (rePrepare == null) {
        rePrepare = true;
      }
      if (resetInputFields) {
        this.Reset();
      }
      this.form.off().find('.step').off().end().find('.next, .back, .submit').off();
      this.fields.forEach(function(field) {
        return field.empty();
      });
      if (rePrepare) {
        return this.Prepare();
      }
    };
    Form.prototype.Restart = Form.prototype.ReInit;

    /*==========================================================================
    		 Validation
    	==========================================================================
     */

    /**
    	 * Validation Engine
    	 * 
    	 * @param {bool} showErrors        Indicates whether or not the fields should be marked with errors if the fail to pass the validaiton.
    	 * @param {bool} showErrorMessages Indicates if we should reveal the error messages (if present) for each failed field.
     */
    Form.prototype.Validate = function(showErrors, showErrorMessages, logBadFields) {
      var badFields, fieldsToCheck, numberOfErrors, problem, stepFields, stepIndex;
      if (showErrors == null) {
        showErrors = true;
      }
      problem = false;
      badFields = [];
      numberOfErrors = 0;
      if (this.skippedAStep || !this.multiStep) {
        fieldsToCheck = this.fieldsRequired;
      } else {
        stepIndex = this.step.current.index() - this.stepIndexOffset;
        stepFields = this.fieldsInSteps[stepIndex];
        if (!stepFields) {
          return true;
        }
        fieldsToCheck = this.fieldsInSteps[stepIndex].filter(function(field) {
          return field.required;
        });
      }
      fieldsToCheck.forEach((function(_this) {
        return function(field) {
          var isValid, showErrorsAsPassed, validateByClass;
          validateByClass = field.field.hasClass('validate_by_class');
          showErrorsAsPassed = showErrors;
          if (field.field.hasClass('dont-error')) {
            showErrors = false;
          }
          isValid = validateByClass ? field.field.hasClass('valid') : field.test(showErrorsAsPassed, logBadFields);
          if (isValid) {
            return field.hideError();
          } else {
            if (logBadFields) {
              badFields.push(field);
            }
            if (showErrors) {
              field.showError();
            }
            problem = true;
            numberOfErrors++;
            if (_this.skippedAStep && numberOfErrors === 1 && field.step[0] !== _this.step.current[0]) {
              _this.revealSection(field.step);
              return _this.setCurrentStepTo(field.step);
            }
          }
        };
      })(this));
      if (logBadFields) {
        console.log(badFields, fieldsToCheck);
      }
      this.options.callbackOnValidate(this);
      if (problem) {
        this.step.current.trigger('notvalid');
        return false;
      } else {
        this.step.current.trigger('valid');
        return true;
      }
    };

    /*==========================================================================
    		 Events
    	==========================================================================
     */
    Form.prototype.attachFormEvents = function() {
      this.form.on('submit', function(event) {
        return event.preventDefault();
      });
      this.form.on('submit_current_step', util.debounce(((function(_this) {
        return function() {
          var $button;
          if (_this.step.current.hasClass('results')) {
            return;
          }
          $button = _this.step.current.find('.next');
          $button = $button.length ? $button : _this.step.current.find('.submit');
          if ($button.length) {
            return $button.trigger('click');
          } else {
            return _this.Next();
          }
        };
      })(this)), 100));
      if (this.options.validateOnTyping) {
        return this.form.on('field_filled', (function(_this) {
          return function() {
            var allFieldsAreValid;
            allFieldsAreValid = _this.Validate(false);
            if (allFieldsAreValid) {
              _this.step.current.addClass('step_filled');
              return _this.form.addClass('form_filled').trigger('form_filled');
            } else {
              _this.form.removeClass('form_filled');
              return _this.step.current.removeClass('step_filled');
            }
          };
        })(this));
      }
    };
    Form.prototype.attachButtonEvents = function() {
      this.form.find('.next').on('click', (function(_this) {
        return function() {
          return _this.Next();
        };
      })(this));
      this.form.find('.back').on('click', (function(_this) {
        return function() {
          return _this.Back();
        };
      })(this));
      this.form.find('.submit').on('click', (function(_this) {
        return function() {
          return _this.Submit();
        };
      })(this));
      this.form.find('.next, .submit').on('focusin', function() {
        var $button;
        $button = $(this);
        return $window.on('keypress.button_focused', function(event) {
          var isEnterKey, isSpaceKey, isTabKey;
          isTabKey = event.which === 9;
          isEnterKey = event.which === 13;
          isSpaceKey = event.which === ' ' || event.which === 32;
          if (isTabKey) {
            $button.trigger('focusout');
          }
          if (isEnterKey || isSpaceKey) {
            return $button.trigger('focusout').trigger('click');
          }
        });
      });
      return this.form.find('.next, .submit').on('focusout', function() {
        return $window.off('keypress.button_focused');
      });
    };
    Form.prototype.attachExtraEvents = function() {
      return this.form.find('.step_toggle').on('click', (function(_this) {
        return function(event) {
          var $step;
          $step = $(event.target).parents('.step').first();
          _this.revealSection($step);
          _this.setCurrentStepTo($step);
          return _this.skippedAStep = true;
        };
      })(this));
    };

    /*==========================================================================
    		 Form Actions
    	==========================================================================
     */
    Form.prototype.Next = function() {
      if (!this.disabled) {
        if (this.options.customNext) {
          this.options.customNext();
        } else {
          if (this.Validate()) {
            this.revealSection(this.step.next);
            this.setCurrentStepTo('next');
          } else {
            this.focusOnFirstErrorField();
          }
        }
        return this.options.callbackOnNextStep(this);
      }
    };
    Form.prototype.Back = function() {
      if (!this.disabled) {
        if (this.options.customPrev) {
          this.options.customPrev();
        } else {
          this.revealSection(this.step.prev);
          this.setCurrentStepTo('prev');
        }
        return this.options.callbackOnBackStep(this);
      }
    };
    Form.prototype.Submit = function() {
      var formData;
      if (!this.disabled) {
        if (this.Validate()) {
          if (this.options.customSubmit) {
            return this.options.customSubmit();
          } else {
            this.form.addClass('loading final');
            if (this.action || this.options.forceAjaxSubmit) {
              formData = this.fetchValues();
              if (this.action) {
                formData.action = this.action;
              }
              if (!formData.url) {
                formData.url = window.location.href;
              }
              if (!formData.referrer) {
                formData.referrer = document.referrer;
              }
              if (this.options.hasLoadingStep) {
                if (this.resultsPlaceholder.length) {
                  this.resultsPlaceholder.html(messages.loading).addClass('show');
                }
                this.revealSection(this.resultsPlaceholder);
                this.setCurrentStepTo(this.resultsPlaceholder);
              }
              return $.post(this.options.submitUrl, formData, ((function(_this) {
                return function(response) {
                  var type;
                  if (!response) {
                    return _this.showGeneralErrorMessage();
                  } else {
                    type = response.success === true ? 'success' : 'error';
                    _this.options.callbackOnResults(response, _this);
                    _this.form.trigger('submitted').removeClass('loading');
                    if (_this.resultsPlaceholder.length && response.message) {
                      return _this.resultsPlaceholder.html("<div class=\"results-message " + type + "\">" + response.message + "</div>").addClass('show');
                    }
                  }
                };
              })(this)), 'JSON').fail((function(_this) {
                return function() {
                  return _this.showGeneralErrorMessage();
                };
              })(this));
            }
          }
        } else {
          return this.focusOnFirstErrorField();
        }
      }
    };

    /*========================================
    	=            Helper Functions            =
    	========================================
     */
    Form.prototype.addField = function($field, stepIndex) {
      var $parentStep, fieldInstance;
      fieldInstance = new Field($field, this);
      if (stepIndex == null) {
        $parentStep = $field.parents('.step').first();
        if ($parentStep.length) {
          stepIndex = $parentStep.index() - this.stepIndexOffset;
        }
      }
      if (!(stepIndex == null)) {
        this.fieldsInSteps[stepIndex].push(fieldInstance);
      }
      this.fields.push(fieldInstance);
      if (fieldInstance.required) {
        this.fieldsRequired.push(fieldInstance);
      }
      return this.fieldsByName[fieldInstance.name] = fieldInstance;
    };
    Form.prototype.fetchValues = function() {
      var values;
      if (this.options.uniqueSteps) {
        values = [];
        this.fieldsInSteps.forEach(function(step, stepIndex) {
          var stepValues;
          stepValues = {};
          step.forEach(function(field) {
            if (!(field.dependsOn && !field.revealed)) {
              return stepValues[field.name] = field.fetchValue();
            }
          });
          return values.push(stepValues);
        });
      } else {
        values = {};
        this.fields.forEach(function(field) {
          if (!(field.dependsOn && !field.revealed)) {
            return values[field.name] = field.fetchValue();
          }
        });
        this.form.find('input[type="hidden"]').each(function() {
          return values[this.name] = this.value;
        });
      }
      return values;
    };
    Form.prototype.disable = function() {
      this.disabled = true;
      this.form.addClass('disabled');
      return this.disableFields(this.form, true);
    };
    Form.prototype.enable = function() {
      this.disabled = false;
      this.form.removeClass('disabled');
      return this.enableFields(this.form);
    };
    Form.prototype.disableFields = function($step, force) {
      if (this.options.dontDisableFields && !force) {
        return;
      }
      if ($step === this.form || !this.multiStep) {
        return this.fields.forEach(function(field) {
          return field.disable();
        });
      } else {
        return $step.each((function(_this) {
          return function(i, el) {
            var stepIndex;
            stepIndex = $(el).index() - _this.stepIndexOffset;
            if (_this.fieldsInSteps[stepIndex]) {
              return _this.fieldsInSteps[stepIndex].forEach(function(field) {
                return field.disable();
              });
            }
          };
        })(this));
      }
    };
    Form.prototype.enableFields = function($step) {
      if ($step === this.form || !this.multiStep) {
        return this.fields.forEach(function(field) {
          return field.enable();
        });
      } else {
        return $step.each((function(_this) {
          return function(i, el) {
            var stepIndex;
            stepIndex = $(el).index() - _this.stepIndexOffset;
            if (_this.fieldsInSteps[stepIndex]) {
              return _this.fieldsInSteps[stepIndex].forEach(function(field) {
                return field.enable();
              });
            }
          };
        })(this));
      }
    };
    Form.prototype.setCurrentStepTo = function(stepToSet) {
      var current, next, prev, visibleStep;
      if (stepToSet == null) {
        stepToSet = 'visible';
      }
      current = this.step.current;
      prev = this.step.prev;
      next = this.step.next;
      switch (stepToSet) {
        case 'next':
          this.step = {
            'current': next,
            'prev': current,
            'next': next.next()
          };
          break;
        case 'prev':
          this.step = {
            'current': prev,
            'prev': prev.prev(),
            'next': current
          };
          break;
        case 'visible':
          visibleStep = this.form.find('.step.show');
          this.step = {
            'current': visibleStep,
            'prev': visibleStep.prev(),
            'next': visibleStep.next()
          };
          break;
        default:
          this.step = {
            'current': stepToSet,
            'prev': stepToSet.prev(),
            'next': stepToSet.next()
          };
      }
    };
    Form.prototype.revealSection = function($step) {
      if (this.options.customTransition) {
        this.options.customTransition($step, this);
      } else {
        this.enableFields($step);
        this.disableFields($step.siblings('.step'));
        $step.addClass('show').siblings('.show').removeClass('show');
        Form.utils.scrollTo($step);
        if (this.options.heightTransitions) {
          Form.utils.setSectionHeight($step, true);
        }
      }
    };
    Form.prototype.manageStepHeight = function(stepClosedHeight) {
      var $steps;
      if (stepClosedHeight == null) {
        stepClosedHeight = 39;
      }
      $steps = this.form.find('.step');
      Form.utils.saveSectionHeights($steps);
      $steps.first().addClass('show').each(function() {
        return $(this).height($(this).data('height'));
      }).siblings('.step').height(stepClosedHeight);
      $steps.on('height_changed', function() {
        return Form.utils.setSectionHeight($(this), false, true, stepClosedHeight);
      });
      return $window.on('resize', util.debounce(function() {
        Form.utils.saveSectionHeights($steps);
        return $steps.trigger('height_changed');
      }, 250));
    };
    Form.prototype.showGeneralErrorMessage = function() {
      this.form.removeClass('loading');
      this.options.callbackOnResults();
      if (this.resultsPlaceholder.length) {
        return this.resultsPlaceholder.html(messages.error);
      }
    };
    Form.prototype.focusOnFirstErrorField = function() {
      return this.step.current.find('.fieldset.error').not('.fieldtype_radio').not('.fieldtype_radio_hybrid').not('.fieldtype_checkbox').not('.fieldtype_checkbox_single').first().find('input').trigger('focus');
    };

    /*==================================
    	=            Form Utils            =
    	==================================
     */
    Form.utils = {
      setSectionHeight: function($section, hideOthers, setNewHeight, hiddenHeight) {
        if (hideOthers == null) {
          hideOthers = true;
        }
        if (setNewHeight == null) {
          setNewHeight = true;
        }
        if (hiddenHeight == null) {
          hiddenHeight = 40;
        }
        if (setNewHeight) {
          $section.data('height', $section.children('.step-innerwrap').height() + 70);
        }
        $section.height($section.data('height'));
        if (hideOthers) {
          return $section.siblings('.step').css('height', hiddenHeight + "px");
        }
      },
      saveSectionHeights: function($steps) {
        return $steps.each(function() {
          var $step, $stepInnerwrap, stepHeight;
          $step = $(this);
          $stepInnerwrap = $step.children('.step-innerwrap');
          $stepInnerwrap = $stepInnerwrap.length ? $stepInnerwrap : $step;
          stepHeight = $stepInnerwrap.height() + 70;
          return $step.data('height', stepHeight);
        });
      },
      scrollTo: function($openSection) {
        var dimensions;
        if ($openSection && $openSection.length) {
          dimensions = $openSection.offset();
          if (window.pageYOffset > dimensions.top) {
            return $$('html, body').animate({
              scrollTop: dimensions.top - 70
            }, 300);
          }
        }
      }
    };
  })(jQuery);

}).call(this);
